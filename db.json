{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/ajax请求从前端至后台.png","path":"img/ajax请求从前端至后台.png","modified":1,"renderable":0},{"_id":"source/img/javascript 原型及原型链.png","path":"img/javascript 原型及原型链.png","modified":1,"renderable":0},{"_id":"source/img/创建对象.png","path":"img/创建对象.png","modified":1,"renderable":0},{"_id":"source/img/动画基础.png","path":"img/动画基础.png","modified":1,"renderable":0},{"_id":"source/img/构造函数执行过程.png","path":"img/构造函数执行过程.png","modified":1,"renderable":0},{"_id":"source/img/选择器.png","path":"img/选择器.png","modified":1,"renderable":0},{"_id":"source/img/js数据类型总结.png","path":"img/js数据类型总结.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1681245486539},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1681245486539},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1681245486539},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1681245486539},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1681245486539},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1681245486539},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1681245486539},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1681245486540},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1681245486540},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1681245486540},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1681245486540},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1681245486540},{"_id":"themes/next/_config.yml","hash":"3fe2d00049f34b7a93c7fb9f01f1c65e0bf3b02e","modified":1681245486540},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1681245486540},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1681245486540},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1681245486545},{"_id":"source/_posts/Init-A-Oracle-VPS.md","hash":"1c0d15302de68e704d1e9d4c8772280f85846bbb","modified":1681245762499},{"_id":"source/_posts/JQ学习1.md","hash":"7f7c2b172fdc9f7b3458e54007ca252f4ff1f2d0","modified":1681245486524},{"_id":"source/_posts/ajax请求从前端至后端.md","hash":"12fcd6d9c42c0580ff549893fcf697567c01682d","modified":1681245486524},{"_id":"source/_posts/build-blog.md","hash":"05219715b192b0621dbbc10b0cb9066649d9b2d2","modified":1681245486525},{"_id":"source/_posts/canvas学习笔记.md","hash":"3cda2a42f041c721d729d1e1c6ccdb22d044607d","modified":1681245486525},{"_id":"source/_posts/css选择器.md","hash":"b66961c64fdaf28e9d206e7448f82b1ec0a728b7","modified":1681245486525},{"_id":"source/_posts/es6-函数总结.md","hash":"4e028c09247c30f8176f60827a3d6da6ca0aac25","modified":1681245486525},{"_id":"source/_posts/js数据类型图.md","hash":"b5fd41a76e1e91e8cb6d8403f4abf0b6a9357675","modified":1681245486525},{"_id":"source/_posts/js作用域.md","hash":"4ad46894538414d2007e34e5e766643c49063ea8","modified":1681245486525},{"_id":"source/_posts/promise学习.md","hash":"6f0931ec185bd67a05072001797a13a5dd22ca7b","modified":1681245486525},{"_id":"source/_posts/react-项目总结.md","hash":"62dd28accc118a2bd8a28b01bb2d7fcc53ada961","modified":1681245486525},{"_id":"source/_posts/react项目总结2.md","hash":"9813bbdfec768c550694452bdecfde391f439877","modified":1681245486525},{"_id":"source/_posts/redux.md","hash":"54972977d1622273b12dd45e960a3bfcc1b3abfe","modified":1681245486525},{"_id":"source/_posts/this的工作原理.md","hash":"921f2299629a2feda6b89c0f7f12883af8d140e0","modified":1681245486525},{"_id":"source/_posts/vue源码阅读1.md","hash":"92443d2be8c827595e0b1af0d14a17eb24adf6a0","modified":1681245486525},{"_id":"source/_posts/创建对象.md","hash":"db17a46ffa23794a387cac12cfec12222e07d96b","modified":1681245486525},{"_id":"source/_posts/初识MongoDB.md","hash":"c479eafe446502c55e943c4de7dc495646ef006f","modified":1681245486526},{"_id":"source/_posts/动画基础.md","hash":"53d3993019206d204db515a12a1578e98f511ad8","modified":1681245486526},{"_id":"source/_posts/原型，原型链笔记.md","hash":"3082f8d4ef16e49f7daef7283858aae19062cdf5","modified":1681245486526},{"_id":"source/_posts/国金项目总结.md","hash":"d51cd60b273c7a0d5a90f56e64564ed2d0f06b8a","modified":1681245486526},{"_id":"source/_posts/学习设计模式之前.md","hash":"20c1b3fd277118a9f9584b8c833641b9a048f294","modified":1681245486526},{"_id":"source/_posts/实现列表标题标题头第一列最后一列固定.md","hash":"c3c4a2f08550d2cfaf47bf3cba33a8e3295a6d1e","modified":1681245486526},{"_id":"source/_posts/布局.md","hash":"4324dee63cf37f49e93296c05dc5a16eed14d2ec","modified":1681245486526},{"_id":"source/_posts/性能优化总结.md","hash":"a0e686ce612855c9e4d3be86dae25f761f264ca6","modified":1681245486526},{"_id":"source/_posts/用模块封装代码.md","hash":"eb9ad9f0c40b98935bef4e725712a8b97b3f46aa","modified":1681245486526},{"_id":"source/_posts/继承.md","hash":"2e6422b1fab059955399893677e0f052469dcf60","modified":1681245486526},{"_id":"source/_posts/闭包.md","hash":"8fa742ddd56362bb7ce2a40b91b2f6e7f48dff2c","modified":1681245486526},{"_id":"source/categories/index.md","hash":"edca3b44c714857c9471a6a63e8b0b824d6eb3fd","modified":1681245486526},{"_id":"source/img/ajax请求从前端至后台.png","hash":"5f7a82d1f34a3ae720836a61034760c6b9b718f7","modified":1681245486527},{"_id":"source/img/javascript 原型及原型链.png","hash":"d3bed95e18d9cbb7d14f027e690155f84132efbe","modified":1681245486528},{"_id":"source/img/创建对象.png","hash":"e2eb90734e031dd2dcb5299988f8b383d7f4f41f","modified":1681245486528},{"_id":"source/img/动画基础.png","hash":"20519c1c18b3fd29808d9c5006a6c4ba46414369","modified":1681245486529},{"_id":"source/img/构造函数执行过程.png","hash":"0144ed33c510d47ea4925a26df4329a898055279","modified":1681245486529},{"_id":"source/img/选择器.png","hash":"26765ae8bb0542538df00dfac9fee0a5e9726229","modified":1681245486529},{"_id":"source/tags/index.md","hash":"e8fe14a1a4c2025071d1536c2c659a5aea4a8eef","modified":1681245486529},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1681245486540},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1681245486540},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1681245486540},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1681245486540},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1681245486540},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1681245486540},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1681245486540},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1681245486540},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1681245486541},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1681245486541},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1681245486541},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1681245486541},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1681245486541},{"_id":"themes/next/layout/_layout.swig","hash":"9d1a23a6add6f3d0f88c2d17979956f14aaa37a4","modified":1681245486541},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1681245486545},{"_id":"themes/next/layout/category.swig","hash":"fb55a48fe92621578ab2db0c983c609371b3ed0e","modified":1681245486545},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1681245486545},{"_id":"themes/next/layout/page.swig","hash":"4ddaeedf1599d167c4ee166d391e616a7660a4ef","modified":1681245486545},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1681245486545},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1681245486545},{"_id":"themes/next/layout/tag.swig","hash":"52c506fa2b46a28ae2df10831c61c51a45b2f6c1","modified":1681245486545},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1681245486545},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1681245486546},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1681245486563},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1681245486563},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1681245486564},{"_id":"source/img/js数据类型总结.png","hash":"259c68f3eca11e9424b782f120b7346d5eb3fe2f","modified":1681245486528},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681245486552},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1681245486541},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1681245486541},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1681245486541},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1681245486541},{"_id":"themes/next/layout/_macro/post.swig","hash":"7b2683963693516b21095010911091414f112c03","modified":1681245486541},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1681245486541},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1681245486541},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1681245486541},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1681245486542},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1681245486542},{"_id":"themes/next/layout/_partials/head.swig","hash":"d4a05c51aac02f1f6248baccf2ddb8ee12b9122f","modified":1681245486542},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1681245486542},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1681245486542},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1681245486542},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1681245486542},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1681245486543},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1681245486543},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1681245486543},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1681245486544},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1681245486544},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1681245486544},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1681245486544},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1681245486545},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1681245486546},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1681245486546},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1681245486546},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1681245486546},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1681245486546},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1681245486546},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1681245486552},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1681245486552},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1681245486552},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1681245486552},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1681245486552},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1681245486552},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1681245486552},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1681245486552},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1681245486552},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1681245486552},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1681245486552},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1681245486552},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1681245486552},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1681245486552},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1681245486552},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681245486543},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681245486543},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681245486550},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681245486550},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681245486550},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681245486551},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1681245486552},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1681245486542},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1681245486542},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1681245486542},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1681245486542},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1681245486542},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1681245486542},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1681245486542},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1681245486542},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1681245486543},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1681245486543},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1681245486543},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1681245486543},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1681245486543},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1681245486543},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1681245486543},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1681245486543},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1681245486543},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1681245486544},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1681245486544},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1681245486544},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1681245486544},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1681245486544},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1681245486544},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1681245486544},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1681245486544},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1681245486544},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1681245486544},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1681245486544},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1d0d01aaeb7bcde3671263d736718f8837c20182","modified":1681245486544},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1681245486544},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1681245486545},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"7d2a97c8ad8d63770ab88c173044e2ecccda1b5a","modified":1681245486545},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1681245486545},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1681245486545},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1681245486550},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1681245486550},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1681245486550},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1681245486551},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1681245486551},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1681245486552},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1681245486553},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1681245486553},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1681245486553},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1681245486553},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1681245486553},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1681245486553},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1681245486553},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1681245486553},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1681245486553},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1681245486553},{"_id":"themes/next/source/js/src/utils.js","hash":"803f684fa7d0e729115a48851023a31f6fb6d0a7","modified":1681245486553},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1681245486555},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1681245486556},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b614b73ba49ca9136fed7c387ee8df72fe65118f","modified":1681245486556},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1681245486557},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1681245486557},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1681245486557},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1681245486557},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1681245486557},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1681245486558},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1681245486558},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1681245486558},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1681245486558},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1681245486560},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1681245486560},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1681245486560},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1681245486560},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1681245486560},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1681245486560},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1681245486560},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1681245486561},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1681245486561},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1681245486561},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1681245486562},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1681245486562},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1681245486563},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1681245486563},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1681245486563},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1681245486560},{"_id":"source/img/avatar.jpg","hash":"0b125c3f4e1f993a0e7cb47355987833fba5c1db","modified":1681245486528},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1681245486545},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1681245486545},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1681245486550},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1681245486546},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1681245486546},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1681245486546},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1681245486546},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1681245486546},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1681245486547},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1681245486550},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1681245486550},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1681245486550},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1681245486550},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1681245486550},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1681245486550},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1681245486550},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1681245486550},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1681245486550},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1681245486550},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1681245486550},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1681245486550},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1681245486551},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1681245486553},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1681245486556},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1681245486556},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1681245486556},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1681245486556},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1681245486556},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1681245486556},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1681245486557},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1681245486557},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1681245486557},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1681245486554},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1681245486554},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1681245486557},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1681245486557},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1681245486558},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1681245486558},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1681245486558},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1681245486562},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1681245486562},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1681245486554},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1681245486554},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1681245486560},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1681245486560},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1681245486563},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1681245486547},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"c089419916988d0f51d89b225460fe11b631e0a3","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1681245486548},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"bb3be8374c31c372ed0995bd8030d2b920d581de","modified":1681245486549},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1681245486549},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1681245486551},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1681245486551},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1681245486556},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1681245486556},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1681245486556},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1681245486556},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1681245486557},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1681245486557},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1681245486554},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1681245486554},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1681245486554},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1681245486554},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1681245486558},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1681245486559},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1681245486559},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1681245486556},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1681245486562},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1681245486559}],"Category":[{"name":"js","_id":"clgcqbk3r0003zs8qrxunx4su"},{"name":"其它","_id":"clgcqbk3u000ezs8qnslnc8zk"},{"name":"css","_id":"clgcqbk3v000lzs8qd6ik8k3x"},{"name":"react","_id":"clgcqbk3w000szs8q0kbuhg9m"},{"name":"服务端","_id":"clgcqbk3y001czs8qttufhzov"},{"name":"基础","_id":"clgcqbk3z001kzs8qlpbbpazs"},{"name":"services","_id":"clgcqp63m0033zs8q5755spdp"}],"Data":[],"Page":[{"title":"categories","date":"2017-07-01T15:10:36.000Z","type":"categories","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-07-01 11:10:36\ntype: \"categories\"\ncomments: true\n---\n","updated":"2023-04-11T20:38:06.526Z","path":"categories/index.html","layout":"page","_id":"clgcqbk550031zs8qhziut41n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-05-03T15:23:26.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-05-03 11:23:26\ntype: \"tags\"\ncomments: true\n---\n","updated":"2023-04-11T20:38:06.529Z","path":"tags/index.html","layout":"page","_id":"clgcqbk560032zs8qsnqbov4b","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Init A Oracle VPS","date":"2023-04-11T20:42:42.000Z","_content":"\n## Apply for a free tire cloud service\n- address: https://www.oracle.com/ca-en/cloud/free/\n>tips: <br/>\n1 This address is only for applicantions form Canada <br/>\n2 Make sure all the informations is correct.\n\n\n## Create a VPS\n\n### choose vps os\nfor me is CentOS-8-Stream\n\n### change Boot volume\n- 1 Select Specify a custom boot volume size\n- 2 choose the appropriate `Boot volume performance`\n\n### save ssh keys or username+password to login\n- ssh keys need save private key, then login use `ssh -i your/ssh-key/path username@IPAddress`, before login need change the ssh key right like\n```\nchmod 700 ~/.ssh\nchmod 600 ~/.ssh/ssh-key-oracle.key\n```\n\n- username+password\n&nbsp;&nbsp; 1 open `advanced options`\n&nbsp;&nbsp; 2 select `Paste cloud-init script`\n&nbsp;&nbsp; 3 copy below, yourPassword is password \n```\n#!/bin/bash\necho root:yourPassword |sudo chpasswd root\nsudo sed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config;\nsudo sed -i 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config;\nsudo service sshd restart\n```\n&nbsp;&nbsp; 4 then login with `ssh root@IPAdress`\n\n\n## Install git\n```\nyum install git\ngit --version\n```\n## nginx\n\n### init\n&nbsp;&nbsp; 1 install\n&nbsp;&nbsp; 2 init ` systemctl enable nginx # 设置开机启动; service nginx start # 启动 nginx 服务`\n&nbsp;&nbsp; 3 close firewall\n&nbsp;&nbsp; 4 setting Ingress Rules（入口规则）, like  `22 for ssh; 80 for default; and others`\n&nbsp;&nbsp; 5 testing!\n\n```\nyum install nginx #安装nginx\n\n#常用操作\nsystemctl enable nginx # 设置开机启动 \nservice nginx start # 启动 nginx 服务\nservice nginx stop # 停止 nginx 服务\nservice nginx reload # 重新加载配置，一般是在修改过 nginx 配置文件时使用。\nsystemctl status nginx    # 检查 Nginx 服务状态\n\n# 语法检测及重启\nnginx -t -c /etc/nginx/nginx.conf ## 检查语法问题\nservice nginx restart # 重启 nginx 服务\n\n# 设置防火墙\n#停止firewall\nsystemctl stop firewalld.service\n#禁止firewall开机启动\nsystemctl disable firewalld.service\n\n# 修改文件权限\nudo su - # 使用root权限\nchmod 777 home/ #修改单文件\nchmod -R 777 /home # 递归修改\n\n# 测试 nginx是否生效\nCurl localhost:80\nCurl IpAddress:80\n\n# 常用目录\n/usr/share/nginx/html/ # 默认的文件路径，其他目录可能没有访问权限\n/etc/nginx/nginx.conf # 配置文件地址\n\n# 查看日志\ntail -f /var/log/nginx/access.log\ntail -f /var/log/nginx/error.log\n\n```\n### brief sample of config\n```\nserver {\n    listen 8080;\n    location / {\n        root /usr/share/nginx/html;\n        autoindex on;\n        autoindex_exact_size off;\n        index index.html;\n        try_files $uri $uri/ /resume/index.html;\n    }\n}\n```\n\n## delete vps instances\n> can't delete by ourself, later will be delete by system\n\n","source":"_posts/Init-A-Oracle-VPS.md","raw":"---\ntitle: Init A Oracle VPS\ndate: 2023-04-11 16:42:42\ncategories: services\ntags: VPS\n---\n\n## Apply for a free tire cloud service\n- address: https://www.oracle.com/ca-en/cloud/free/\n>tips: <br/>\n1 This address is only for applicantions form Canada <br/>\n2 Make sure all the informations is correct.\n\n\n## Create a VPS\n\n### choose vps os\nfor me is CentOS-8-Stream\n\n### change Boot volume\n- 1 Select Specify a custom boot volume size\n- 2 choose the appropriate `Boot volume performance`\n\n### save ssh keys or username+password to login\n- ssh keys need save private key, then login use `ssh -i your/ssh-key/path username@IPAddress`, before login need change the ssh key right like\n```\nchmod 700 ~/.ssh\nchmod 600 ~/.ssh/ssh-key-oracle.key\n```\n\n- username+password\n&nbsp;&nbsp; 1 open `advanced options`\n&nbsp;&nbsp; 2 select `Paste cloud-init script`\n&nbsp;&nbsp; 3 copy below, yourPassword is password \n```\n#!/bin/bash\necho root:yourPassword |sudo chpasswd root\nsudo sed -i 's/^#\\?PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config;\nsudo sed -i 's/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g' /etc/ssh/sshd_config;\nsudo service sshd restart\n```\n&nbsp;&nbsp; 4 then login with `ssh root@IPAdress`\n\n\n## Install git\n```\nyum install git\ngit --version\n```\n## nginx\n\n### init\n&nbsp;&nbsp; 1 install\n&nbsp;&nbsp; 2 init ` systemctl enable nginx # 设置开机启动; service nginx start # 启动 nginx 服务`\n&nbsp;&nbsp; 3 close firewall\n&nbsp;&nbsp; 4 setting Ingress Rules（入口规则）, like  `22 for ssh; 80 for default; and others`\n&nbsp;&nbsp; 5 testing!\n\n```\nyum install nginx #安装nginx\n\n#常用操作\nsystemctl enable nginx # 设置开机启动 \nservice nginx start # 启动 nginx 服务\nservice nginx stop # 停止 nginx 服务\nservice nginx reload # 重新加载配置，一般是在修改过 nginx 配置文件时使用。\nsystemctl status nginx    # 检查 Nginx 服务状态\n\n# 语法检测及重启\nnginx -t -c /etc/nginx/nginx.conf ## 检查语法问题\nservice nginx restart # 重启 nginx 服务\n\n# 设置防火墙\n#停止firewall\nsystemctl stop firewalld.service\n#禁止firewall开机启动\nsystemctl disable firewalld.service\n\n# 修改文件权限\nudo su - # 使用root权限\nchmod 777 home/ #修改单文件\nchmod -R 777 /home # 递归修改\n\n# 测试 nginx是否生效\nCurl localhost:80\nCurl IpAddress:80\n\n# 常用目录\n/usr/share/nginx/html/ # 默认的文件路径，其他目录可能没有访问权限\n/etc/nginx/nginx.conf # 配置文件地址\n\n# 查看日志\ntail -f /var/log/nginx/access.log\ntail -f /var/log/nginx/error.log\n\n```\n### brief sample of config\n```\nserver {\n    listen 8080;\n    location / {\n        root /usr/share/nginx/html;\n        autoindex on;\n        autoindex_exact_size off;\n        index index.html;\n        try_files $uri $uri/ /resume/index.html;\n    }\n}\n```\n\n## delete vps instances\n> can't delete by ourself, later will be delete by system\n\n","slug":"Init-A-Oracle-VPS","published":1,"updated":"2023-04-11T22:20:41.341Z","_id":"clgcqbk3n0000zs8q09rtfpzn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Apply-for-a-free-tire-cloud-service\"><a href=\"#Apply-for-a-free-tire-cloud-service\" class=\"headerlink\" title=\"Apply for a free tire cloud service\"></a>Apply for a free tire cloud service</h2><ul>\n<li>address: <a href=\"https://www.oracle.com/ca-en/cloud/free/\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/ca-en/cloud/free/</a><blockquote>\n<p>tips: <br><br>1 This address is only for applicantions form Canada <br><br>2 Make sure all the informations is correct.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Create-a-VPS\"><a href=\"#Create-a-VPS\" class=\"headerlink\" title=\"Create a VPS\"></a>Create a VPS</h2><h3 id=\"choose-vps-os\"><a href=\"#choose-vps-os\" class=\"headerlink\" title=\"choose vps os\"></a>choose vps os</h3><p>for me is CentOS-8-Stream</p>\n<h3 id=\"change-Boot-volume\"><a href=\"#change-Boot-volume\" class=\"headerlink\" title=\"change Boot volume\"></a>change Boot volume</h3><ul>\n<li>1 Select Specify a custom boot volume size</li>\n<li>2 choose the appropriate <code>Boot volume performance</code></li>\n</ul>\n<h3 id=\"save-ssh-keys-or-username-password-to-login\"><a href=\"#save-ssh-keys-or-username-password-to-login\" class=\"headerlink\" title=\"save ssh keys or username+password to login\"></a>save ssh keys or username+password to login</h3><ul>\n<li><p>ssh keys need save private key, then login use <code>ssh -i your/ssh-key/path username@IPAddress</code>, before login need change the ssh key right like</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 700 ~/.ssh</span><br><span class=\"line\">chmod 600 ~/.ssh/ssh-key-oracle.key</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>username+password<br>&nbsp;&nbsp; 1 open <code>advanced options</code><br>&nbsp;&nbsp; 2 select <code>Paste cloud-init script</code><br>&nbsp;&nbsp; 3 copy below, yourPassword is password </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo root:yourPassword |sudo chpasswd root</span><br><span class=\"line\">sudo sed -i &apos;s/^#\\?PermitRootLogin.*/PermitRootLogin yes/g&apos; /etc/ssh/sshd_config;</span><br><span class=\"line\">sudo sed -i &apos;s/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g&apos; /etc/ssh/sshd_config;</span><br><span class=\"line\">sudo service sshd restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>&nbsp;&nbsp; 4 then login with <code>ssh root@IPAdress</code></p>\n<h2 id=\"Install-git\"><a href=\"#Install-git\" class=\"headerlink\" title=\"Install git\"></a>Install git</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>&nbsp;&nbsp; 1 install<br>&nbsp;&nbsp; 2 init <code>systemctl enable nginx # 设置开机启动; service nginx start # 启动 nginx 服务</code><br>&nbsp;&nbsp; 3 close firewall<br>&nbsp;&nbsp; 4 setting Ingress Rules（入口规则）, like  <code>22 for ssh; 80 for default; and others</code><br>&nbsp;&nbsp; 5 testing!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx #安装nginx</span><br><span class=\"line\"></span><br><span class=\"line\">#常用操作</span><br><span class=\"line\">systemctl enable nginx # 设置开机启动 </span><br><span class=\"line\">service nginx start # 启动 nginx 服务</span><br><span class=\"line\">service nginx stop # 停止 nginx 服务</span><br><span class=\"line\">service nginx reload # 重新加载配置，一般是在修改过 nginx 配置文件时使用。</span><br><span class=\"line\">systemctl status nginx    # 检查 Nginx 服务状态</span><br><span class=\"line\"></span><br><span class=\"line\"># 语法检测及重启</span><br><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf ## 检查语法问题</span><br><span class=\"line\">service nginx restart # 重启 nginx 服务</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置防火墙</span><br><span class=\"line\">#停止firewall</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">#禁止firewall开机启动</span><br><span class=\"line\">systemctl disable firewalld.service</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改文件权限</span><br><span class=\"line\">udo su - # 使用root权限</span><br><span class=\"line\">chmod 777 home/ #修改单文件</span><br><span class=\"line\">chmod -R 777 /home # 递归修改</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试 nginx是否生效</span><br><span class=\"line\">Curl localhost:80</span><br><span class=\"line\">Curl IpAddress:80</span><br><span class=\"line\"></span><br><span class=\"line\"># 常用目录</span><br><span class=\"line\">/usr/share/nginx/html/ # 默认的文件路径，其他目录可能没有访问权限</span><br><span class=\"line\">/etc/nginx/nginx.conf # 配置文件地址</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看日志</span><br><span class=\"line\">tail -f /var/log/nginx/access.log</span><br><span class=\"line\">tail -f /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"brief-sample-of-config\"><a href=\"#brief-sample-of-config\" class=\"headerlink\" title=\"brief sample of config\"></a>brief sample of config</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 8080;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root /usr/share/nginx/html;</span><br><span class=\"line\">        autoindex on;</span><br><span class=\"line\">        autoindex_exact_size off;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">        try_files $uri $uri/ /resume/index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"delete-vps-instances\"><a href=\"#delete-vps-instances\" class=\"headerlink\" title=\"delete vps instances\"></a>delete vps instances</h2><blockquote>\n<p>can’t delete by ourself, later will be delete by system</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Apply-for-a-free-tire-cloud-service\"><a href=\"#Apply-for-a-free-tire-cloud-service\" class=\"headerlink\" title=\"Apply for a free tire cloud service\"></a>Apply for a free tire cloud service</h2><ul>\n<li>address: <a href=\"https://www.oracle.com/ca-en/cloud/free/\" target=\"_blank\" rel=\"noopener\">https://www.oracle.com/ca-en/cloud/free/</a><blockquote>\n<p>tips: <br><br>1 This address is only for applicantions form Canada <br><br>2 Make sure all the informations is correct.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Create-a-VPS\"><a href=\"#Create-a-VPS\" class=\"headerlink\" title=\"Create a VPS\"></a>Create a VPS</h2><h3 id=\"choose-vps-os\"><a href=\"#choose-vps-os\" class=\"headerlink\" title=\"choose vps os\"></a>choose vps os</h3><p>for me is CentOS-8-Stream</p>\n<h3 id=\"change-Boot-volume\"><a href=\"#change-Boot-volume\" class=\"headerlink\" title=\"change Boot volume\"></a>change Boot volume</h3><ul>\n<li>1 Select Specify a custom boot volume size</li>\n<li>2 choose the appropriate <code>Boot volume performance</code></li>\n</ul>\n<h3 id=\"save-ssh-keys-or-username-password-to-login\"><a href=\"#save-ssh-keys-or-username-password-to-login\" class=\"headerlink\" title=\"save ssh keys or username+password to login\"></a>save ssh keys or username+password to login</h3><ul>\n<li><p>ssh keys need save private key, then login use <code>ssh -i your/ssh-key/path username@IPAddress</code>, before login need change the ssh key right like</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod 700 ~/.ssh</span><br><span class=\"line\">chmod 600 ~/.ssh/ssh-key-oracle.key</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>username+password<br>&nbsp;&nbsp; 1 open <code>advanced options</code><br>&nbsp;&nbsp; 2 select <code>Paste cloud-init script</code><br>&nbsp;&nbsp; 3 copy below, yourPassword is password </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo root:yourPassword |sudo chpasswd root</span><br><span class=\"line\">sudo sed -i &apos;s/^#\\?PermitRootLogin.*/PermitRootLogin yes/g&apos; /etc/ssh/sshd_config;</span><br><span class=\"line\">sudo sed -i &apos;s/^#\\?PasswordAuthentication.*/PasswordAuthentication yes/g&apos; /etc/ssh/sshd_config;</span><br><span class=\"line\">sudo service sshd restart</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>&nbsp;&nbsp; 4 then login with <code>ssh root@IPAdress</code></p>\n<h2 id=\"Install-git\"><a href=\"#Install-git\" class=\"headerlink\" title=\"Install git\"></a>Install git</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n<h2 id=\"nginx\"><a href=\"#nginx\" class=\"headerlink\" title=\"nginx\"></a>nginx</h2><h3 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init\"></a>init</h3><p>&nbsp;&nbsp; 1 install<br>&nbsp;&nbsp; 2 init <code>systemctl enable nginx # 设置开机启动; service nginx start # 启动 nginx 服务</code><br>&nbsp;&nbsp; 3 close firewall<br>&nbsp;&nbsp; 4 setting Ingress Rules（入口规则）, like  <code>22 for ssh; 80 for default; and others</code><br>&nbsp;&nbsp; 5 testing!</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx #安装nginx</span><br><span class=\"line\"></span><br><span class=\"line\">#常用操作</span><br><span class=\"line\">systemctl enable nginx # 设置开机启动 </span><br><span class=\"line\">service nginx start # 启动 nginx 服务</span><br><span class=\"line\">service nginx stop # 停止 nginx 服务</span><br><span class=\"line\">service nginx reload # 重新加载配置，一般是在修改过 nginx 配置文件时使用。</span><br><span class=\"line\">systemctl status nginx    # 检查 Nginx 服务状态</span><br><span class=\"line\"></span><br><span class=\"line\"># 语法检测及重启</span><br><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf ## 检查语法问题</span><br><span class=\"line\">service nginx restart # 重启 nginx 服务</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置防火墙</span><br><span class=\"line\">#停止firewall</span><br><span class=\"line\">systemctl stop firewalld.service</span><br><span class=\"line\">#禁止firewall开机启动</span><br><span class=\"line\">systemctl disable firewalld.service</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改文件权限</span><br><span class=\"line\">udo su - # 使用root权限</span><br><span class=\"line\">chmod 777 home/ #修改单文件</span><br><span class=\"line\">chmod -R 777 /home # 递归修改</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试 nginx是否生效</span><br><span class=\"line\">Curl localhost:80</span><br><span class=\"line\">Curl IpAddress:80</span><br><span class=\"line\"></span><br><span class=\"line\"># 常用目录</span><br><span class=\"line\">/usr/share/nginx/html/ # 默认的文件路径，其他目录可能没有访问权限</span><br><span class=\"line\">/etc/nginx/nginx.conf # 配置文件地址</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看日志</span><br><span class=\"line\">tail -f /var/log/nginx/access.log</span><br><span class=\"line\">tail -f /var/log/nginx/error.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"brief-sample-of-config\"><a href=\"#brief-sample-of-config\" class=\"headerlink\" title=\"brief sample of config\"></a>brief sample of config</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 8080;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        root /usr/share/nginx/html;</span><br><span class=\"line\">        autoindex on;</span><br><span class=\"line\">        autoindex_exact_size off;</span><br><span class=\"line\">        index index.html;</span><br><span class=\"line\">        try_files $uri $uri/ /resume/index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"delete-vps-instances\"><a href=\"#delete-vps-instances\" class=\"headerlink\" title=\"delete vps instances\"></a>delete vps instances</h2><blockquote>\n<p>can’t delete by ourself, later will be delete by system</p>\n</blockquote>\n"},{"title":"JQ学习1","date":"2017-05-15T16:52:23.000Z","_content":"\n### jq结构\n```javascript\n(function( window, undefined ) {\n  // If there is a window object, that at least has a document property,\n  // define jQuery and $ identifiers\n  if ( typeof window === \"object\" && typeof window.document === \"object\" ) {\n    window.jQuery = window.$ = jQuery;\n  }\n})( window );\n```\n传入window对象时防止压缩时window被处理为普通变量\nundefined在一些浏览器中可以对undefined进行修改\n\n### JQ对象上的属性和方法\n```javascript\njQuery = function( selector, context ) {\n  // The jQuery object is actually just the init constructor 'enhanced'\n  return new jQuery.fn.init( selector, context, rootjQuery );\n}\njquery.fn = jquery.prototype = {\n  jquery: 版本, \n  constructor: 修正指针指向问题,  \n  init: 初始化和参数管理,\n  selector: 存储选择字符串, \n  length: this对象的长度,\n  toArray: 传数组,\n  ...\n}\njQuery.fn.init.prototype = jQuery.fn;\n```\n[参考文章](https://github.com/chyingp/blog/blob/master/jquery/jQuery%E6%BA%90%E7%A0%81-%E6%A0%B8%E5%BF%83%E7%BB%93%E6%9E%84.md)\n\n### init方法\n```javascript\njQuery.fn = jQuery.prototype = {\n  init: function() {\n    $(\"\"), $(null), $(undefined), $(false)\n\n    $('#div1') \n    $('.box') $('div')  $('#div1 div.box')\n    $('<li>')  $('<li>1</li><li>2</li>')\n    \n    $(this)  $(document)    \n    $(function(){})   \n    $([])  $({})\n    \n    return jQuery.makeArray( selector, this );\n  }\n}\n```\n\n备注：\n1 constructor以字面量的方式定义对象，需要指定当前的constructor\n2 prototype,  constructor, 面向对象概念理解 \n\n","source":"_posts/JQ学习1.md","raw":"---\ntitle: JQ学习1\ndate: 2017-05-15 12:52:23\ncategories: js\ntags: jquery\n---\n\n### jq结构\n```javascript\n(function( window, undefined ) {\n  // If there is a window object, that at least has a document property,\n  // define jQuery and $ identifiers\n  if ( typeof window === \"object\" && typeof window.document === \"object\" ) {\n    window.jQuery = window.$ = jQuery;\n  }\n})( window );\n```\n传入window对象时防止压缩时window被处理为普通变量\nundefined在一些浏览器中可以对undefined进行修改\n\n### JQ对象上的属性和方法\n```javascript\njQuery = function( selector, context ) {\n  // The jQuery object is actually just the init constructor 'enhanced'\n  return new jQuery.fn.init( selector, context, rootjQuery );\n}\njquery.fn = jquery.prototype = {\n  jquery: 版本, \n  constructor: 修正指针指向问题,  \n  init: 初始化和参数管理,\n  selector: 存储选择字符串, \n  length: this对象的长度,\n  toArray: 传数组,\n  ...\n}\njQuery.fn.init.prototype = jQuery.fn;\n```\n[参考文章](https://github.com/chyingp/blog/blob/master/jquery/jQuery%E6%BA%90%E7%A0%81-%E6%A0%B8%E5%BF%83%E7%BB%93%E6%9E%84.md)\n\n### init方法\n```javascript\njQuery.fn = jQuery.prototype = {\n  init: function() {\n    $(\"\"), $(null), $(undefined), $(false)\n\n    $('#div1') \n    $('.box') $('div')  $('#div1 div.box')\n    $('<li>')  $('<li>1</li><li>2</li>')\n    \n    $(this)  $(document)    \n    $(function(){})   \n    $([])  $({})\n    \n    return jQuery.makeArray( selector, this );\n  }\n}\n```\n\n备注：\n1 constructor以字面量的方式定义对象，需要指定当前的constructor\n2 prototype,  constructor, 面向对象概念理解 \n\n","slug":"JQ学习1","published":1,"updated":"2023-04-11T20:38:06.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3p0001zs8qd0mzymaz","content":"<h3 id=\"jq结构\"><a href=\"#jq结构\" class=\"headerlink\" title=\"jq结构\"></a>jq结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> window, undefined </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// If there is a window object, that at least has a document property,</span></span><br><span class=\"line\">  <span class=\"comment\">// define jQuery and $ identifiers</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.document === <span class=\"string\">\"object\"</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span> );</span><br></pre></td></tr></table></figure>\n<p>传入window对象时防止压缩时window被处理为普通变量<br>undefined在一些浏览器中可以对undefined进行修改</p>\n<h3 id=\"JQ对象上的属性和方法\"><a href=\"#JQ对象上的属性和方法\" class=\"headerlink\" title=\"JQ对象上的属性和方法\"></a>JQ对象上的属性和方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> selector, context </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// The jQuery object is actually just the init constructor 'enhanced'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init( selector, context, rootjQuery );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jquery.fn = jquery.prototype = &#123;</span><br><span class=\"line\">  jquery: 版本, </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: 修正指针指向问题,  </span><br><span class=\"line\">  init: 初始化和参数管理,</span><br><span class=\"line\">  selector: 存储选择字符串, </span><br><span class=\"line\">  length: this对象的长度,</span><br><span class=\"line\">  toArray: 传数组,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jQuery.fn.init.prototype = jQuery.fn;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/chyingp/blog/blob/master/jquery/jQuery%E6%BA%90%E7%A0%81-%E6%A0%B8%E5%BF%83%E7%BB%93%E6%9E%84.md\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n<h3 id=\"init方法\"><a href=\"#init方法\" class=\"headerlink\" title=\"init方法\"></a>init方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.fn = jQuery.prototype = &#123;</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">\"\"</span>), $(<span class=\"literal\">null</span>), $(<span class=\"literal\">undefined</span>), $(<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    $(<span class=\"string\">'#div1'</span>) </span><br><span class=\"line\">    $(<span class=\"string\">'.box'</span>) $(<span class=\"string\">'div'</span>)  $(<span class=\"string\">'#div1 div.box'</span>)</span><br><span class=\"line\">    $(<span class=\"string\">'&lt;li&gt;'</span>)  $(<span class=\"string\">'&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>)  $(<span class=\"built_in\">document</span>)    </span><br><span class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)   </span><br><span class=\"line\">    $([])  $(&#123;&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery.makeArray( selector, <span class=\"keyword\">this</span> );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>备注：<br>1 constructor以字面量的方式定义对象，需要指定当前的constructor<br>2 prototype,  constructor, 面向对象概念理解 </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"jq结构\"><a href=\"#jq结构\" class=\"headerlink\" title=\"jq结构\"></a>jq结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> window, undefined </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// If there is a window object, that at least has a document property,</span></span><br><span class=\"line\">  <span class=\"comment\">// define jQuery and $ identifiers</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.document === <span class=\"string\">\"object\"</span> ) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)( <span class=\"built_in\">window</span> );</span><br></pre></td></tr></table></figure>\n<p>传入window对象时防止压缩时window被处理为普通变量<br>undefined在一些浏览器中可以对undefined进行修改</p>\n<h3 id=\"JQ对象上的属性和方法\"><a href=\"#JQ对象上的属性和方法\" class=\"headerlink\" title=\"JQ对象上的属性和方法\"></a>JQ对象上的属性和方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> selector, context </span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// The jQuery object is actually just the init constructor 'enhanced'</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init( selector, context, rootjQuery );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jquery.fn = jquery.prototype = &#123;</span><br><span class=\"line\">  jquery: 版本, </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>: 修正指针指向问题,  </span><br><span class=\"line\">  init: 初始化和参数管理,</span><br><span class=\"line\">  selector: 存储选择字符串, </span><br><span class=\"line\">  length: this对象的长度,</span><br><span class=\"line\">  toArray: 传数组,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">jQuery.fn.init.prototype = jQuery.fn;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/chyingp/blog/blob/master/jquery/jQuery%E6%BA%90%E7%A0%81-%E6%A0%B8%E5%BF%83%E7%BB%93%E6%9E%84.md\" target=\"_blank\" rel=\"noopener\">参考文章</a></p>\n<h3 id=\"init方法\"><a href=\"#init方法\" class=\"headerlink\" title=\"init方法\"></a>init方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.fn = jQuery.prototype = &#123;</span><br><span class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">\"\"</span>), $(<span class=\"literal\">null</span>), $(<span class=\"literal\">undefined</span>), $(<span class=\"literal\">false</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    $(<span class=\"string\">'#div1'</span>) </span><br><span class=\"line\">    $(<span class=\"string\">'.box'</span>) $(<span class=\"string\">'div'</span>)  $(<span class=\"string\">'#div1 div.box'</span>)</span><br><span class=\"line\">    $(<span class=\"string\">'&lt;li&gt;'</span>)  $(<span class=\"string\">'&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;'</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    $(<span class=\"keyword\">this</span>)  $(<span class=\"built_in\">document</span>)    </span><br><span class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)   </span><br><span class=\"line\">    $([])  $(&#123;&#125;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> jQuery.makeArray( selector, <span class=\"keyword\">this</span> );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>备注：<br>1 constructor以字面量的方式定义对象，需要指定当前的constructor<br>2 prototype,  constructor, 面向对象概念理解 </p>\n"},{"title":"ajax请求从前端至后端","date":"2018-03-22T21:19:47.000Z","_content":"![](/img/ajax请求从前端至后台.png)\n[图片地址](https://www.processon.com/view/link/5ab372ace4b018c271bf55a1)\n\n\n## 由express中的request引发的血案\n  像论坛上说的一样，express框架几乎不用怎么阅读文档就可以搞起了。最最常见的就是处理`get`和`post`请求了，处理过程中获取get和post数据相差很大，处理post请求还需要额外引入一些包。前端的ajax请求jQ已经帮我们封装好了，所以感知不到get和post的传值的不同。\n  >出于想搞明白这些问题做了一些实验\n  1 express如何处理get、post\n  2 Content-Type是个什么东西，对后端处理数据有什么影响\n  3 原生xhr都做了什么\n\n## 前端对于post和get的不同处理\n  ### 理解总结\n  get\n  追加在URL后通过序列化的字符串提交\n\n  post\n  协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n  主要有四种POST数据提交方式，前两种格式比较常用\n  1 `application/x-www-form-urlencoded`（jq，默认的表单提交格式）\n  通常写法: `param1=111&param2=222`\n  在XMLHttpRequest2中创建了FormData格式，方便数据表现形式为\n  ```\n  var form = new FormData();\n  form.append('param1', '111');\n  form.append('param2', '222');\n  xhr.send(form);\n  ```\n  2 `application/json`（由于json格式的流行，这种格式被广泛接受）\n  3 `text/xml`\n  4 `multipart/form-data`\n\n  参考\n  [四种常见的 POST 提交数据方式](https://imququ.com/post/four-ways-to-post-data-in-http.html)\n  [post请求，xhr.send(data)函数的data参数类型有哪些？](https://segmentfault.com/q/1010000008811883) \n\n  ### 使用原生ajax写法\n  简易版get:\n    ```\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', 'http://localhost:3000/api/run/getMarks?param=999&param2=%E6%88%91%E4%BB%AC%E4%BD%A0%E4%BB%AC999');\n    xhr.send();\n    xhr.onload = function () {\n      console.log(xhr.response);\n    }\n    ```\n\n  简易版post1(application/x-www-form-urlencoded;charset=UTF-8):\n    ```\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', 'http://localhost:3000/api/run/setMarks');\n    // 使用application/x-www-form-urlencoded\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n    xhr.send('param=999&param2=%E6%88%91%E4%BB%AC%E4%BD%A0%E4%BB%AC999');\n    xhr.onload = function () {\n      console.log(xhr.response);\n    }\n    ```\n\n  简易版post2(application/json):\n    ```\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', 'http://localhost:3000/api/run/setMarks');\n    // 使用application/json\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    var json = {\n      param: '9999',\n      param2: '我们'\n    };\n    xhr.send(JSON.stringify(json));\n    xhr.onload = function () {\n      console.log(xhr.response);\n    }\n    ```\n\n  Jq版post1:\n    ```\n    var json = {\n      param: '999',\n      param2: '我们你们999'\n    };\n    $.ajax({\n      url:\"http://localhost:3000/api/run/setMarks\",\n      type: 'POST',\n      data: json,\n      success: function(res) {\n        console.log(res);\n      }\n    });\n  ```\n\n  Jq版post2:\n    ```\n    var json1 = {\n      param: '888',\n      param2: '我们你们'\n    };\n    $.ajax({\n      url:\"http://localhost:3000/api/run/setMarks\",\n      type: 'POST',\n      contentType: 'application/json',\n      dataType: 'json',\n      data: JSON.stringify(json1),\n      success: function(res) {\n        console.log(res);\n      }\n    });\n    ```\n\n  完整版：\n    ```\n    define(['utils'], function (Utils) {\n\n      /* global args */\n      var xhrTimeout;\n      var timeout = 15000;\n      var TIMEOUT_MSG = '连接超时，请稍后重试';\n      // 维护页面跳转情况 1 服务器返回小于100，大于300的状态， 2 error\n      var core = {\n\n        // Method that performs the ajax request\n        ajax: function (method, url, args, loading) {\n\n          // Creating a promise\n          var promise = new Promise(function (resolve, reject) {\n\n            // Instantiates the XMLHttpRequest\n            var xhr = new XMLHttpRequest();\n            var uri = url;\n\n            if (loading && loading === 'nojuhua') {\n              f7.hideIndicator();\n            } else {\n              f7.showIndicator();\n            }\n\n            xhr.open(method, uri);\n\n            if (args && (method === 'POST' || method === 'PUT')) {\n              xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n              xhr.send(Utils.serialize(args));\n            } else {\n              xhr.send();\n            }\n\n            xhr.onabort = function () {\n              if (xhrTimeout) {\n                clearTimeout(xhrTimeout);\n              }\n              f7.hideIndicator();\n              reject(TIMEOUT_MSG);\n            };\n            xhrTimeout = setTimeout(function () {\n              xhr.abort();\n            }, timeout);\n\n            xhr.onload = function () {\n              if (xhrTimeout) {\n                clearTimeout(xhrTimeout);\n              }\n              if (this.status >= 200 && this.status < 300) {\n                var res = JSON.parse(this.response);\n                if (res.error_no.toString() === '0' || !res.error_no) {\n                  resolve(res);\n                  f7.hideIndicator();\n                } else {\n                  reject(res.error_info);\n                  f7.hideIndicator();\n                }\n              } else {\n                if (this.status === 500 || this.status === 502 || this.status === 503 || this.status === 504) {\n                  displayView.loadPage('pages/acct/notfound.html');\n                  f7.hideIndicator();\n                } else {\n                  f7.hideIndicator();\n                  reject(this.statusText);\n                }\n              }\n\n            };\n            xhr.onerror = function () {\n              if (xhrTimeout) {\n                clearTimeout(xhrTimeout);\n              }\n              f7.hideIndicator();\n              reject(this.statusText);\n            };\n          });\n\n          return promise;\n        }\n      };\n\n      // Adapter pattern\n      return {\n        get: function (url, loading) {\n          return core.ajax('GET', url, null, loading);\n        },\n        post: function (url, args) {\n          return core.ajax('POST', url, args);\n        },\n        put: function (url, args) {\n          return core.ajax('PUT', url, args);\n        },\n        delete: function (url) {\n          return core.ajax('DELETE', url, args);\n        }\n      };\n    });\n\n    ```\n\n\n## 在http中post和get数组的存放位置\n  get参数存放在请求行中\n  post参数存在于请求正文, 通常不会写在url中..\n  [HTTP 协议简介](http://funhacks.net/2017/03/01/http/)\n\n## express对于post和get的不同处理\n  ```\n  var express = require('express');\n  var bodyParser = require(\"body-parser\");\n\n  var app = express();\n  app.use(bodyParser.json()); // application/json\n  app.use(bodyParser.urlencoded({ extended: false })); // application/x-www-form-urlencoded;charset=UTF-8\n\n  app.post('/api/run/setMarks', function(req, res){\n    console.log(req.query); // 输出get的参数\n    console.log(req.body); // 输出post参数\n    res.json({test: 'test'});\n  })\n  ```\n\n## 写在最后\n花了很多时间去验证一些想法花了很多时间，不过很开心，后期有时间还是要系统去看看http相关的知识:-D。\n","source":"_posts/ajax请求从前端至后端.md","raw":"---\ntitle: ajax请求从前端至后端\ndate: 2018-03-22 17:19:47\ncategories: js\ntags: ajax\n---\n![](/img/ajax请求从前端至后台.png)\n[图片地址](https://www.processon.com/view/link/5ab372ace4b018c271bf55a1)\n\n\n## 由express中的request引发的血案\n  像论坛上说的一样，express框架几乎不用怎么阅读文档就可以搞起了。最最常见的就是处理`get`和`post`请求了，处理过程中获取get和post数据相差很大，处理post请求还需要额外引入一些包。前端的ajax请求jQ已经帮我们封装好了，所以感知不到get和post的传值的不同。\n  >出于想搞明白这些问题做了一些实验\n  1 express如何处理get、post\n  2 Content-Type是个什么东西，对后端处理数据有什么影响\n  3 原生xhr都做了什么\n\n## 前端对于post和get的不同处理\n  ### 理解总结\n  get\n  追加在URL后通过序列化的字符串提交\n\n  post\n  协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。\n  主要有四种POST数据提交方式，前两种格式比较常用\n  1 `application/x-www-form-urlencoded`（jq，默认的表单提交格式）\n  通常写法: `param1=111&param2=222`\n  在XMLHttpRequest2中创建了FormData格式，方便数据表现形式为\n  ```\n  var form = new FormData();\n  form.append('param1', '111');\n  form.append('param2', '222');\n  xhr.send(form);\n  ```\n  2 `application/json`（由于json格式的流行，这种格式被广泛接受）\n  3 `text/xml`\n  4 `multipart/form-data`\n\n  参考\n  [四种常见的 POST 提交数据方式](https://imququ.com/post/four-ways-to-post-data-in-http.html)\n  [post请求，xhr.send(data)函数的data参数类型有哪些？](https://segmentfault.com/q/1010000008811883) \n\n  ### 使用原生ajax写法\n  简易版get:\n    ```\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', 'http://localhost:3000/api/run/getMarks?param=999&param2=%E6%88%91%E4%BB%AC%E4%BD%A0%E4%BB%AC999');\n    xhr.send();\n    xhr.onload = function () {\n      console.log(xhr.response);\n    }\n    ```\n\n  简易版post1(application/x-www-form-urlencoded;charset=UTF-8):\n    ```\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', 'http://localhost:3000/api/run/setMarks');\n    // 使用application/x-www-form-urlencoded\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n    xhr.send('param=999&param2=%E6%88%91%E4%BB%AC%E4%BD%A0%E4%BB%AC999');\n    xhr.onload = function () {\n      console.log(xhr.response);\n    }\n    ```\n\n  简易版post2(application/json):\n    ```\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', 'http://localhost:3000/api/run/setMarks');\n    // 使用application/json\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    var json = {\n      param: '9999',\n      param2: '我们'\n    };\n    xhr.send(JSON.stringify(json));\n    xhr.onload = function () {\n      console.log(xhr.response);\n    }\n    ```\n\n  Jq版post1:\n    ```\n    var json = {\n      param: '999',\n      param2: '我们你们999'\n    };\n    $.ajax({\n      url:\"http://localhost:3000/api/run/setMarks\",\n      type: 'POST',\n      data: json,\n      success: function(res) {\n        console.log(res);\n      }\n    });\n  ```\n\n  Jq版post2:\n    ```\n    var json1 = {\n      param: '888',\n      param2: '我们你们'\n    };\n    $.ajax({\n      url:\"http://localhost:3000/api/run/setMarks\",\n      type: 'POST',\n      contentType: 'application/json',\n      dataType: 'json',\n      data: JSON.stringify(json1),\n      success: function(res) {\n        console.log(res);\n      }\n    });\n    ```\n\n  完整版：\n    ```\n    define(['utils'], function (Utils) {\n\n      /* global args */\n      var xhrTimeout;\n      var timeout = 15000;\n      var TIMEOUT_MSG = '连接超时，请稍后重试';\n      // 维护页面跳转情况 1 服务器返回小于100，大于300的状态， 2 error\n      var core = {\n\n        // Method that performs the ajax request\n        ajax: function (method, url, args, loading) {\n\n          // Creating a promise\n          var promise = new Promise(function (resolve, reject) {\n\n            // Instantiates the XMLHttpRequest\n            var xhr = new XMLHttpRequest();\n            var uri = url;\n\n            if (loading && loading === 'nojuhua') {\n              f7.hideIndicator();\n            } else {\n              f7.showIndicator();\n            }\n\n            xhr.open(method, uri);\n\n            if (args && (method === 'POST' || method === 'PUT')) {\n              xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded;charset=UTF-8');\n              xhr.send(Utils.serialize(args));\n            } else {\n              xhr.send();\n            }\n\n            xhr.onabort = function () {\n              if (xhrTimeout) {\n                clearTimeout(xhrTimeout);\n              }\n              f7.hideIndicator();\n              reject(TIMEOUT_MSG);\n            };\n            xhrTimeout = setTimeout(function () {\n              xhr.abort();\n            }, timeout);\n\n            xhr.onload = function () {\n              if (xhrTimeout) {\n                clearTimeout(xhrTimeout);\n              }\n              if (this.status >= 200 && this.status < 300) {\n                var res = JSON.parse(this.response);\n                if (res.error_no.toString() === '0' || !res.error_no) {\n                  resolve(res);\n                  f7.hideIndicator();\n                } else {\n                  reject(res.error_info);\n                  f7.hideIndicator();\n                }\n              } else {\n                if (this.status === 500 || this.status === 502 || this.status === 503 || this.status === 504) {\n                  displayView.loadPage('pages/acct/notfound.html');\n                  f7.hideIndicator();\n                } else {\n                  f7.hideIndicator();\n                  reject(this.statusText);\n                }\n              }\n\n            };\n            xhr.onerror = function () {\n              if (xhrTimeout) {\n                clearTimeout(xhrTimeout);\n              }\n              f7.hideIndicator();\n              reject(this.statusText);\n            };\n          });\n\n          return promise;\n        }\n      };\n\n      // Adapter pattern\n      return {\n        get: function (url, loading) {\n          return core.ajax('GET', url, null, loading);\n        },\n        post: function (url, args) {\n          return core.ajax('POST', url, args);\n        },\n        put: function (url, args) {\n          return core.ajax('PUT', url, args);\n        },\n        delete: function (url) {\n          return core.ajax('DELETE', url, args);\n        }\n      };\n    });\n\n    ```\n\n\n## 在http中post和get数组的存放位置\n  get参数存放在请求行中\n  post参数存在于请求正文, 通常不会写在url中..\n  [HTTP 协议简介](http://funhacks.net/2017/03/01/http/)\n\n## express对于post和get的不同处理\n  ```\n  var express = require('express');\n  var bodyParser = require(\"body-parser\");\n\n  var app = express();\n  app.use(bodyParser.json()); // application/json\n  app.use(bodyParser.urlencoded({ extended: false })); // application/x-www-form-urlencoded;charset=UTF-8\n\n  app.post('/api/run/setMarks', function(req, res){\n    console.log(req.query); // 输出get的参数\n    console.log(req.body); // 输出post参数\n    res.json({test: 'test'});\n  })\n  ```\n\n## 写在最后\n花了很多时间去验证一些想法花了很多时间，不过很开心，后期有时间还是要系统去看看http相关的知识:-D。\n","slug":"ajax请求从前端至后端","published":1,"updated":"2023-04-11T20:38:06.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3q0002zs8qa86sya53","content":"<p><img src=\"/img/ajax请求从前端至后台.png\" alt><br><a href=\"https://www.processon.com/view/link/5ab372ace4b018c271bf55a1\" target=\"_blank\" rel=\"noopener\">图片地址</a></p>\n<h2 id=\"由express中的request引发的血案\"><a href=\"#由express中的request引发的血案\" class=\"headerlink\" title=\"由express中的request引发的血案\"></a>由express中的request引发的血案</h2><p>  像论坛上说的一样，express框架几乎不用怎么阅读文档就可以搞起了。最最常见的就是处理<code>get</code>和<code>post</code>请求了，处理过程中获取get和post数据相差很大，处理post请求还需要额外引入一些包。前端的ajax请求jQ已经帮我们封装好了，所以感知不到get和post的传值的不同。</p>\n<blockquote>\n<p>出于想搞明白这些问题做了一些实验<br>  1 express如何处理get、post<br>  2 Content-Type是个什么东西，对后端处理数据有什么影响<br>  3 原生xhr都做了什么</p>\n</blockquote>\n<h2 id=\"前端对于post和get的不同处理\"><a href=\"#前端对于post和get的不同处理\" class=\"headerlink\" title=\"前端对于post和get的不同处理\"></a>前端对于post和get的不同处理</h2><h3 id=\"理解总结\"><a href=\"#理解总结\" class=\"headerlink\" title=\"理解总结\"></a>理解总结</h3><p>  get<br>  追加在URL后通过序列化的字符串提交</p>\n<p>  post<br>  协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。<br>  主要有四种POST数据提交方式，前两种格式比较常用<br>  1 <code>application/x-www-form-urlencoded</code>（jq，默认的表单提交格式）<br>  通常写法: <code>param1=111&amp;param2=222</code><br>  在XMLHttpRequest2中创建了FormData格式，方便数据表现形式为<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var form = new FormData();</span><br><span class=\"line\">form.append(&apos;param1&apos;, &apos;111&apos;);</span><br><span class=\"line\">form.append(&apos;param2&apos;, &apos;222&apos;);</span><br><span class=\"line\">xhr.send(form);</span><br></pre></td></tr></table></figure></p>\n<p>  2 <code>application/json</code>（由于json格式的流行，这种格式被广泛接受）<br>  3 <code>text/xml</code><br>  4 <code>multipart/form-data</code></p>\n<p>  参考<br>  <a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\" target=\"_blank\" rel=\"noopener\">四种常见的 POST 提交数据方式</a><br>  <a href=\"https://segmentfault.com/q/1010000008811883\" target=\"_blank\" rel=\"noopener\">post请求，xhr.send(data)函数的data参数类型有哪些？</a> </p>\n<h3 id=\"使用原生ajax写法\"><a href=\"#使用原生ajax写法\" class=\"headerlink\" title=\"使用原生ajax写法\"></a>使用原生ajax写法</h3><p>  简易版get:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">xhr.open(&apos;GET&apos;, &apos;http://localhost:3000/api/run/getMarks?param=999&amp;param2=%E6%88%91%E4%BB%AC%E4%BD%A0%E4%BB%AC999&apos;);</span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\">xhr.onload = function () &#123;</span><br><span class=\"line\">  console.log(xhr.response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  简易版post1(application/x-www-form-urlencoded;charset=UTF-8):<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">xhr.open(&apos;POST&apos;, &apos;http://localhost:3000/api/run/setMarks&apos;);</span><br><span class=\"line\">// 使用application/x-www-form-urlencoded</span><br><span class=\"line\">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;);</span><br><span class=\"line\">xhr.send(&apos;param=999&amp;param2=%E6%88%91%E4%BB%AC%E4%BD%A0%E4%BB%AC999&apos;);</span><br><span class=\"line\">xhr.onload = function () &#123;</span><br><span class=\"line\">  console.log(xhr.response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  简易版post2(application/json):<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">xhr.open(&apos;POST&apos;, &apos;http://localhost:3000/api/run/setMarks&apos;);</span><br><span class=\"line\">// 使用application/json</span><br><span class=\"line\">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/json&apos;);</span><br><span class=\"line\">var json = &#123;</span><br><span class=\"line\">  param: &apos;9999&apos;,</span><br><span class=\"line\">  param2: &apos;我们&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.send(JSON.stringify(json));</span><br><span class=\"line\">xhr.onload = function () &#123;</span><br><span class=\"line\">  console.log(xhr.response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  Jq版post1:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var json = &#123;</span><br><span class=\"line\">  param: &apos;999&apos;,</span><br><span class=\"line\">  param2: &apos;我们你们999&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url:&quot;http://localhost:3000/api/run/setMarks&quot;,</span><br><span class=\"line\">  type: &apos;POST&apos;,</span><br><span class=\"line\">  data: json,</span><br><span class=\"line\">  success: function(res) &#123;</span><br><span class=\"line\">    console.log(res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>  Jq版post2:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var json1 = &#123;</span><br><span class=\"line\">  param: &apos;888&apos;,</span><br><span class=\"line\">  param2: &apos;我们你们&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url:&quot;http://localhost:3000/api/run/setMarks&quot;,</span><br><span class=\"line\">  type: &apos;POST&apos;,</span><br><span class=\"line\">  contentType: &apos;application/json&apos;,</span><br><span class=\"line\">  dataType: &apos;json&apos;,</span><br><span class=\"line\">  data: JSON.stringify(json1),</span><br><span class=\"line\">  success: function(res) &#123;</span><br><span class=\"line\">    console.log(res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>  完整版：<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&apos;utils&apos;], function (Utils) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  /* global args */</span><br><span class=\"line\">  var xhrTimeout;</span><br><span class=\"line\">  var timeout = 15000;</span><br><span class=\"line\">  var TIMEOUT_MSG = &apos;连接超时，请稍后重试&apos;;</span><br><span class=\"line\">  // 维护页面跳转情况 1 服务器返回小于100，大于300的状态， 2 error</span><br><span class=\"line\">  var core = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Method that performs the ajax request</span><br><span class=\"line\">    ajax: function (method, url, args, loading) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      // Creating a promise</span><br><span class=\"line\">      var promise = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Instantiates the XMLHttpRequest</span><br><span class=\"line\">        var xhr = new XMLHttpRequest();</span><br><span class=\"line\">        var uri = url;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (loading &amp;&amp; loading === &apos;nojuhua&apos;) &#123;</span><br><span class=\"line\">          f7.hideIndicator();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          f7.showIndicator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        xhr.open(method, uri);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (args &amp;&amp; (method === &apos;POST&apos; || method === &apos;PUT&apos;)) &#123;</span><br><span class=\"line\">          xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;);</span><br><span class=\"line\">          xhr.send(Utils.serialize(args));</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          xhr.send();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        xhr.onabort = function () &#123;</span><br><span class=\"line\">          if (xhrTimeout) &#123;</span><br><span class=\"line\">            clearTimeout(xhrTimeout);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          f7.hideIndicator();</span><br><span class=\"line\">          reject(TIMEOUT_MSG);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhrTimeout = setTimeout(function () &#123;</span><br><span class=\"line\">          xhr.abort();</span><br><span class=\"line\">        &#125;, timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        xhr.onload = function () &#123;</span><br><span class=\"line\">          if (xhrTimeout) &#123;</span><br><span class=\"line\">            clearTimeout(xhrTimeout);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (this.status &gt;= 200 &amp;&amp; this.status &lt; 300) &#123;</span><br><span class=\"line\">            var res = JSON.parse(this.response);</span><br><span class=\"line\">            if (res.error_no.toString() === &apos;0&apos; || !res.error_no) &#123;</span><br><span class=\"line\">              resolve(res);</span><br><span class=\"line\">              f7.hideIndicator();</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">              reject(res.error_info);</span><br><span class=\"line\">              f7.hideIndicator();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            if (this.status === 500 || this.status === 502 || this.status === 503 || this.status === 504) &#123;</span><br><span class=\"line\">              displayView.loadPage(&apos;pages/acct/notfound.html&apos;);</span><br><span class=\"line\">              f7.hideIndicator();</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">              f7.hideIndicator();</span><br><span class=\"line\">              reject(this.statusText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.onerror = function () &#123;</span><br><span class=\"line\">          if (xhrTimeout) &#123;</span><br><span class=\"line\">            clearTimeout(xhrTimeout);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          f7.hideIndicator();</span><br><span class=\"line\">          reject(this.statusText);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      return promise;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Adapter pattern</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    get: function (url, loading) &#123;</span><br><span class=\"line\">      return core.ajax(&apos;GET&apos;, url, null, loading);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    post: function (url, args) &#123;</span><br><span class=\"line\">      return core.ajax(&apos;POST&apos;, url, args);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    put: function (url, args) &#123;</span><br><span class=\"line\">      return core.ajax(&apos;PUT&apos;, url, args);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    delete: function (url) &#123;</span><br><span class=\"line\">      return core.ajax(&apos;DELETE&apos;, url, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在http中post和get数组的存放位置\"><a href=\"#在http中post和get数组的存放位置\" class=\"headerlink\" title=\"在http中post和get数组的存放位置\"></a>在http中post和get数组的存放位置</h2><p>  get参数存放在请求行中<br>  post参数存在于请求正文, 通常不会写在url中..<br>  <a href=\"http://funhacks.net/2017/03/01/http/\" target=\"_blank\" rel=\"noopener\">HTTP 协议简介</a></p>\n<h2 id=\"express对于post和get的不同处理\"><a href=\"#express对于post和get的不同处理\" class=\"headerlink\" title=\"express对于post和get的不同处理\"></a>express对于post和get的不同处理</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var bodyParser = require(&quot;body-parser&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">app.use(bodyParser.json()); // application/json</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: false &#125;)); // application/x-www-form-urlencoded;charset=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(&apos;/api/run/setMarks&apos;, function(req, res)&#123;</span><br><span class=\"line\">  console.log(req.query); // 输出get的参数</span><br><span class=\"line\">  console.log(req.body); // 输出post参数</span><br><span class=\"line\">  res.json(&#123;test: &apos;test&apos;&#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>花了很多时间去验证一些想法花了很多时间，不过很开心，后期有时间还是要系统去看看http相关的知识:-D。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/ajax请求从前端至后台.png\" alt><br><a href=\"https://www.processon.com/view/link/5ab372ace4b018c271bf55a1\" target=\"_blank\" rel=\"noopener\">图片地址</a></p>\n<h2 id=\"由express中的request引发的血案\"><a href=\"#由express中的request引发的血案\" class=\"headerlink\" title=\"由express中的request引发的血案\"></a>由express中的request引发的血案</h2><p>  像论坛上说的一样，express框架几乎不用怎么阅读文档就可以搞起了。最最常见的就是处理<code>get</code>和<code>post</code>请求了，处理过程中获取get和post数据相差很大，处理post请求还需要额外引入一些包。前端的ajax请求jQ已经帮我们封装好了，所以感知不到get和post的传值的不同。</p>\n<blockquote>\n<p>出于想搞明白这些问题做了一些实验<br>  1 express如何处理get、post<br>  2 Content-Type是个什么东西，对后端处理数据有什么影响<br>  3 原生xhr都做了什么</p>\n</blockquote>\n<h2 id=\"前端对于post和get的不同处理\"><a href=\"#前端对于post和get的不同处理\" class=\"headerlink\" title=\"前端对于post和get的不同处理\"></a>前端对于post和get的不同处理</h2><h3 id=\"理解总结\"><a href=\"#理解总结\" class=\"headerlink\" title=\"理解总结\"></a>理解总结</h3><p>  get<br>  追加在URL后通过序列化的字符串提交</p>\n<p>  post<br>  协议规定 POST 提交的数据必须放在消息主体（entity-body）中，但协议并没有规定数据必须使用什么编码方式。实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。<br>  主要有四种POST数据提交方式，前两种格式比较常用<br>  1 <code>application/x-www-form-urlencoded</code>（jq，默认的表单提交格式）<br>  通常写法: <code>param1=111&amp;param2=222</code><br>  在XMLHttpRequest2中创建了FormData格式，方便数据表现形式为<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var form = new FormData();</span><br><span class=\"line\">form.append(&apos;param1&apos;, &apos;111&apos;);</span><br><span class=\"line\">form.append(&apos;param2&apos;, &apos;222&apos;);</span><br><span class=\"line\">xhr.send(form);</span><br></pre></td></tr></table></figure></p>\n<p>  2 <code>application/json</code>（由于json格式的流行，这种格式被广泛接受）<br>  3 <code>text/xml</code><br>  4 <code>multipart/form-data</code></p>\n<p>  参考<br>  <a href=\"https://imququ.com/post/four-ways-to-post-data-in-http.html\" target=\"_blank\" rel=\"noopener\">四种常见的 POST 提交数据方式</a><br>  <a href=\"https://segmentfault.com/q/1010000008811883\" target=\"_blank\" rel=\"noopener\">post请求，xhr.send(data)函数的data参数类型有哪些？</a> </p>\n<h3 id=\"使用原生ajax写法\"><a href=\"#使用原生ajax写法\" class=\"headerlink\" title=\"使用原生ajax写法\"></a>使用原生ajax写法</h3><p>  简易版get:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">xhr.open(&apos;GET&apos;, &apos;http://localhost:3000/api/run/getMarks?param=999&amp;param2=%E6%88%91%E4%BB%AC%E4%BD%A0%E4%BB%AC999&apos;);</span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\">xhr.onload = function () &#123;</span><br><span class=\"line\">  console.log(xhr.response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  简易版post1(application/x-www-form-urlencoded;charset=UTF-8):<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">xhr.open(&apos;POST&apos;, &apos;http://localhost:3000/api/run/setMarks&apos;);</span><br><span class=\"line\">// 使用application/x-www-form-urlencoded</span><br><span class=\"line\">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;);</span><br><span class=\"line\">xhr.send(&apos;param=999&amp;param2=%E6%88%91%E4%BB%AC%E4%BD%A0%E4%BB%AC999&apos;);</span><br><span class=\"line\">xhr.onload = function () &#123;</span><br><span class=\"line\">  console.log(xhr.response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  简易版post2(application/json):<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr = new XMLHttpRequest();</span><br><span class=\"line\">xhr.open(&apos;POST&apos;, &apos;http://localhost:3000/api/run/setMarks&apos;);</span><br><span class=\"line\">// 使用application/json</span><br><span class=\"line\">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/json&apos;);</span><br><span class=\"line\">var json = &#123;</span><br><span class=\"line\">  param: &apos;9999&apos;,</span><br><span class=\"line\">  param2: &apos;我们&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">xhr.send(JSON.stringify(json));</span><br><span class=\"line\">xhr.onload = function () &#123;</span><br><span class=\"line\">  console.log(xhr.response);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  Jq版post1:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var json = &#123;</span><br><span class=\"line\">  param: &apos;999&apos;,</span><br><span class=\"line\">  param2: &apos;我们你们999&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url:&quot;http://localhost:3000/api/run/setMarks&quot;,</span><br><span class=\"line\">  type: &apos;POST&apos;,</span><br><span class=\"line\">  data: json,</span><br><span class=\"line\">  success: function(res) &#123;</span><br><span class=\"line\">    console.log(res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>  Jq版post2:<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var json1 = &#123;</span><br><span class=\"line\">  param: &apos;888&apos;,</span><br><span class=\"line\">  param2: &apos;我们你们&apos;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  url:&quot;http://localhost:3000/api/run/setMarks&quot;,</span><br><span class=\"line\">  type: &apos;POST&apos;,</span><br><span class=\"line\">  contentType: &apos;application/json&apos;,</span><br><span class=\"line\">  dataType: &apos;json&apos;,</span><br><span class=\"line\">  data: JSON.stringify(json1),</span><br><span class=\"line\">  success: function(res) &#123;</span><br><span class=\"line\">    console.log(res);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>  完整版：<br>    <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define([&apos;utils&apos;], function (Utils) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  /* global args */</span><br><span class=\"line\">  var xhrTimeout;</span><br><span class=\"line\">  var timeout = 15000;</span><br><span class=\"line\">  var TIMEOUT_MSG = &apos;连接超时，请稍后重试&apos;;</span><br><span class=\"line\">  // 维护页面跳转情况 1 服务器返回小于100，大于300的状态， 2 error</span><br><span class=\"line\">  var core = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // Method that performs the ajax request</span><br><span class=\"line\">    ajax: function (method, url, args, loading) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      // Creating a promise</span><br><span class=\"line\">      var promise = new Promise(function (resolve, reject) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        // Instantiates the XMLHttpRequest</span><br><span class=\"line\">        var xhr = new XMLHttpRequest();</span><br><span class=\"line\">        var uri = url;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (loading &amp;&amp; loading === &apos;nojuhua&apos;) &#123;</span><br><span class=\"line\">          f7.hideIndicator();</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          f7.showIndicator();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        xhr.open(method, uri);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (args &amp;&amp; (method === &apos;POST&apos; || method === &apos;PUT&apos;)) &#123;</span><br><span class=\"line\">          xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/x-www-form-urlencoded;charset=UTF-8&apos;);</span><br><span class=\"line\">          xhr.send(Utils.serialize(args));</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          xhr.send();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        xhr.onabort = function () &#123;</span><br><span class=\"line\">          if (xhrTimeout) &#123;</span><br><span class=\"line\">            clearTimeout(xhrTimeout);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          f7.hideIndicator();</span><br><span class=\"line\">          reject(TIMEOUT_MSG);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhrTimeout = setTimeout(function () &#123;</span><br><span class=\"line\">          xhr.abort();</span><br><span class=\"line\">        &#125;, timeout);</span><br><span class=\"line\"></span><br><span class=\"line\">        xhr.onload = function () &#123;</span><br><span class=\"line\">          if (xhrTimeout) &#123;</span><br><span class=\"line\">            clearTimeout(xhrTimeout);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          if (this.status &gt;= 200 &amp;&amp; this.status &lt; 300) &#123;</span><br><span class=\"line\">            var res = JSON.parse(this.response);</span><br><span class=\"line\">            if (res.error_no.toString() === &apos;0&apos; || !res.error_no) &#123;</span><br><span class=\"line\">              resolve(res);</span><br><span class=\"line\">              f7.hideIndicator();</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">              reject(res.error_info);</span><br><span class=\"line\">              f7.hideIndicator();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125; else &#123;</span><br><span class=\"line\">            if (this.status === 500 || this.status === 502 || this.status === 503 || this.status === 504) &#123;</span><br><span class=\"line\">              displayView.loadPage(&apos;pages/acct/notfound.html&apos;);</span><br><span class=\"line\">              f7.hideIndicator();</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">              f7.hideIndicator();</span><br><span class=\"line\">              reject(this.statusText);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.onerror = function () &#123;</span><br><span class=\"line\">          if (xhrTimeout) &#123;</span><br><span class=\"line\">            clearTimeout(xhrTimeout);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          f7.hideIndicator();</span><br><span class=\"line\">          reject(this.statusText);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      return promise;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // Adapter pattern</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    get: function (url, loading) &#123;</span><br><span class=\"line\">      return core.ajax(&apos;GET&apos;, url, null, loading);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    post: function (url, args) &#123;</span><br><span class=\"line\">      return core.ajax(&apos;POST&apos;, url, args);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    put: function (url, args) &#123;</span><br><span class=\"line\">      return core.ajax(&apos;PUT&apos;, url, args);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    delete: function (url) &#123;</span><br><span class=\"line\">      return core.ajax(&apos;DELETE&apos;, url, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在http中post和get数组的存放位置\"><a href=\"#在http中post和get数组的存放位置\" class=\"headerlink\" title=\"在http中post和get数组的存放位置\"></a>在http中post和get数组的存放位置</h2><p>  get参数存放在请求行中<br>  post参数存在于请求正文, 通常不会写在url中..<br>  <a href=\"http://funhacks.net/2017/03/01/http/\" target=\"_blank\" rel=\"noopener\">HTTP 协议简介</a></p>\n<h2 id=\"express对于post和get的不同处理\"><a href=\"#express对于post和get的不同处理\" class=\"headerlink\" title=\"express对于post和get的不同处理\"></a>express对于post和get的不同处理</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var express = require(&apos;express&apos;);</span><br><span class=\"line\">var bodyParser = require(&quot;body-parser&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = express();</span><br><span class=\"line\">app.use(bodyParser.json()); // application/json</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; extended: false &#125;)); // application/x-www-form-urlencoded;charset=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(&apos;/api/run/setMarks&apos;, function(req, res)&#123;</span><br><span class=\"line\">  console.log(req.query); // 输出get的参数</span><br><span class=\"line\">  console.log(req.body); // 输出post参数</span><br><span class=\"line\">  res.json(&#123;test: &apos;test&apos;&#125;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>花了很多时间去验证一些想法花了很多时间，不过很开心，后期有时间还是要系统去看看http相关的知识:-D。</p>\n"},{"title":"build-blog","date":"2017-05-03T14:49:56.000Z","type":"tags","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n## Quick Start\n\n### 导入hexo\n\n``` bash\n$ npm install -g hexo-cli --registry=https://registry.npm.taobao.org\n```\n\n### 初始化项目\n\n``` bash\n$ hexo init\n```\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n\n// 报错:ERROR Deployer not found: github\nnpm install hexo-deployer-git --save\n\ndeploy:\n  type: git // 或者github\n  repository: git@github.com:lvSally/lvSally.github.io.git\n  branch: master\n```\n\n### Hexo的版本控制与持续集成\n[参考文章](https://formulahendry.github.io/2016/12/04/hexo-ci/#comments)\n思路：新建一个项目，每次代码更新的时候，通过CI生成新的github.io文件\n问题： 由于我使用next的主题文件，CI后的css、js/src、images、vendors文件夹全部删除了，我通过的是删除next文件提交，然后再添加的方法解决的，原因不太清楚，很神奇，哭..\n\n### 其它\n1 使用hexo new page tags/categories 创建分类或标签\n2 在themes _config.yml 控制主体显示\n3 themes -> _config.yml -> baidu_analytics 添加百度统计id可添加百度统计功能\n4 themes -> _config.yml -> avatar 设置头像\n5 [next第三方服务集成](http://theme-next.iissnan.com/third-party-services.html)\n6 [网易云跟帖](https://gentie.163.com/help.html) 悲剧的是类似`github.io`的子域名基本信息填写不能通过\n7 [Disqus](https://disqus.com),最终选择了Disqus，缺点是需要翻墙，使用Disqus比较简单，注册一个账号，在主题的设置文件中添加以下shortname即可。\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/build-blog.md","raw":"---\ntitle: build-blog\ndate: 2017-05-03 10:49:56\ncategories: 其它\ntype: \"tags\"\ntags:  [Hexo]\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n## Quick Start\n\n### 导入hexo\n\n``` bash\n$ npm install -g hexo-cli --registry=https://registry.npm.taobao.org\n```\n\n### 初始化项目\n\n``` bash\n$ hexo init\n```\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n\n// 报错:ERROR Deployer not found: github\nnpm install hexo-deployer-git --save\n\ndeploy:\n  type: git // 或者github\n  repository: git@github.com:lvSally/lvSally.github.io.git\n  branch: master\n```\n\n### Hexo的版本控制与持续集成\n[参考文章](https://formulahendry.github.io/2016/12/04/hexo-ci/#comments)\n思路：新建一个项目，每次代码更新的时候，通过CI生成新的github.io文件\n问题： 由于我使用next的主题文件，CI后的css、js/src、images、vendors文件夹全部删除了，我通过的是删除next文件提交，然后再添加的方法解决的，原因不太清楚，很神奇，哭..\n\n### 其它\n1 使用hexo new page tags/categories 创建分类或标签\n2 在themes _config.yml 控制主体显示\n3 themes -> _config.yml -> baidu_analytics 添加百度统计id可添加百度统计功能\n4 themes -> _config.yml -> avatar 设置头像\n5 [next第三方服务集成](http://theme-next.iissnan.com/third-party-services.html)\n6 [网易云跟帖](https://gentie.163.com/help.html) 悲剧的是类似`github.io`的子域名基本信息填写不能通过\n7 [Disqus](https://disqus.com),最终选择了Disqus，缺点是需要翻墙，使用Disqus比较简单，注册一个账号，在主题的设置文件中添加以下shortname即可。\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"build-blog","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3r0005zs8qgpamjod9","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"导入hexo\"><a href=\"#导入hexo\" class=\"headerlink\" title=\"导入hexo\"></a>导入hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\">// 报错:ERROR Deployer not found: github</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git // 或者github</span><br><span class=\"line\">  repository: git@github.com:lvSally/lvSally.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo的版本控制与持续集成\"><a href=\"#Hexo的版本控制与持续集成\" class=\"headerlink\" title=\"Hexo的版本控制与持续集成\"></a>Hexo的版本控制与持续集成</h3><p><a href=\"https://formulahendry.github.io/2016/12/04/hexo-ci/#comments\" target=\"_blank\" rel=\"noopener\">参考文章</a><br>思路：新建一个项目，每次代码更新的时候，通过CI生成新的github.io文件<br>问题： 由于我使用next的主题文件，CI后的css、js/src、images、vendors文件夹全部删除了，我通过的是删除next文件提交，然后再添加的方法解决的，原因不太清楚，很神奇，哭..</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>1 使用hexo new page tags/categories 创建分类或标签<br>2 在themes _config.yml 控制主体显示<br>3 themes -&gt; _config.yml -&gt; baidu_analytics 添加百度统计id可添加百度统计功能<br>4 themes -&gt; _config.yml -&gt; avatar 设置头像<br>5 <a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"noopener\">next第三方服务集成</a><br>6 <a href=\"https://gentie.163.com/help.html\" target=\"_blank\" rel=\"noopener\">网易云跟帖</a> 悲剧的是类似<code>github.io</code>的子域名基本信息填写不能通过<br>7 <a href=\"https://disqus.com\" target=\"_blank\" rel=\"noopener\">Disqus</a>,最终选择了Disqus，缺点是需要翻墙，使用Disqus比较简单，注册一个账号，在主题的设置文件中添加以下shortname即可。<br>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"导入hexo\"><a href=\"#导入hexo\" class=\"headerlink\" title=\"导入hexo\"></a>导入hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init</span><br></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br><span class=\"line\"></span><br><span class=\"line\">// 报错:ERROR Deployer not found: github</span><br><span class=\"line\">npm install hexo-deployer-git --save</span><br><span class=\"line\"></span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  <span class=\"built_in\">type</span>: git // 或者github</span><br><span class=\"line\">  repository: git@github.com:lvSally/lvSally.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"Hexo的版本控制与持续集成\"><a href=\"#Hexo的版本控制与持续集成\" class=\"headerlink\" title=\"Hexo的版本控制与持续集成\"></a>Hexo的版本控制与持续集成</h3><p><a href=\"https://formulahendry.github.io/2016/12/04/hexo-ci/#comments\" target=\"_blank\" rel=\"noopener\">参考文章</a><br>思路：新建一个项目，每次代码更新的时候，通过CI生成新的github.io文件<br>问题： 由于我使用next的主题文件，CI后的css、js/src、images、vendors文件夹全部删除了，我通过的是删除next文件提交，然后再添加的方法解决的，原因不太清楚，很神奇，哭..</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>1 使用hexo new page tags/categories 创建分类或标签<br>2 在themes _config.yml 控制主体显示<br>3 themes -&gt; _config.yml -&gt; baidu_analytics 添加百度统计id可添加百度统计功能<br>4 themes -&gt; _config.yml -&gt; avatar 设置头像<br>5 <a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"noopener\">next第三方服务集成</a><br>6 <a href=\"https://gentie.163.com/help.html\" target=\"_blank\" rel=\"noopener\">网易云跟帖</a> 悲剧的是类似<code>github.io</code>的子域名基本信息填写不能通过<br>7 <a href=\"https://disqus.com\" target=\"_blank\" rel=\"noopener\">Disqus</a>,最终选择了Disqus，缺点是需要翻墙，使用Disqus比较简单，注册一个账号，在主题的设置文件中添加以下shortname即可。<br>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"canvas学习笔记","date":"2017-05-03T17:49:46.000Z","_content":"\n###   简单例子\n```javascript\n<html>\n <head>\n  <script type=\"application/javascript\">\n    function draw() {\n      var canvas = document.getElementById(\"canvas\");\n      if (canvas.getContext) {\n        var ctx = canvas.getContext(\"2d\");\n\n        ctx.fillStyle = \"rgb(200,0,0)\";\n        ctx.fillRect (10, 10, 55, 50);\n\n        ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";\n        ctx.fillRect (30, 30, 55, 50);\n      }\n    }\n  </script>\n </head>\n <body onload=\"draw();\">\n   <canvas id=\"canvas\" width=\"150\" height=\"150\"></canvas>\n </body>\n</html>\n```\n### 直接可以绘制图形的方法\n`fillRect(x, y, width, height) `绘制一个填充的矩形\n`strokeRect(x, y, width, height)`绘制一个矩形的边框\n`clearRect(x, y, width, height)`清除指定矩形区域，让清除部分完全透明。\n\n###  绘制基本图形，文本，图片，变换\n`translate(x, y)`translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，如右图所示。\n`rotate(angle)`这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。\n`scale(x, y)`scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。\n`fillStyle = color`设置图形的填充颜色。\n`strokeStyle = color`设置图形轮廓的颜色。\n`globalAlpha = transparencyValue`这个属性影响到 canvas 里所有图形的透明度，有效的值范围是 0.0 （完全透明）到 1.0（完全不透明），默认是 1.0。\n`lineWidth = value`设置线条宽度。\n`lineCap = type`设置线条末端样式。\n`shadowOffsetX = float` shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。\n`shadowOffsetY = float` shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。\n`shadowBlur = float` shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。\n`shadowColor = color` shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。\n\n###  绘制路径\n`beginPath()`新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。\n`closePath()`闭合路径之后图形绘制命令又重新指向到上下文中。当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。  \n`stroke()`通过线条来绘制图形轮廓。\n`fill()`通过填充路径的内容区域生成实心的图形\n`moveTo(x, y)`将笔触移动到指定的坐标x以及y上。或者你可以想象一下在纸上作业，一支钢笔或者铅笔的笔尖从一个点到另一个点的移动过程。\n`lineTo(x, y)`绘制一条从当前位置到指定x以及y位置的直线。\n`arc(x, y, radius, startAngle, endAngle, anticlockwise)`画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。\n`quadraticCurveTo(cp1x, cp1y, x, y)`绘制贝塞尔曲线，cp1x,cp1y为控制点，x,y为结束点。\n`rect(x, y, width, height)`绘制一个左上角坐标为（x,y），宽高为width以及height的矩形。\n`save()restore()`save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。\n###  推荐基于canvas小游戏\n 基于canvas的[小游戏](https://github.com/white-shirt/HTML5-Game.git)\n\n###  详细canvas API\nMDN[canvas API](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)\n","source":"_posts/canvas学习笔记.md","raw":"---\ntitle: canvas学习笔记\ndate: 2017-05-03 13:49:46\ncategories: js\ntags: canvas\n---\n\n###   简单例子\n```javascript\n<html>\n <head>\n  <script type=\"application/javascript\">\n    function draw() {\n      var canvas = document.getElementById(\"canvas\");\n      if (canvas.getContext) {\n        var ctx = canvas.getContext(\"2d\");\n\n        ctx.fillStyle = \"rgb(200,0,0)\";\n        ctx.fillRect (10, 10, 55, 50);\n\n        ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";\n        ctx.fillRect (30, 30, 55, 50);\n      }\n    }\n  </script>\n </head>\n <body onload=\"draw();\">\n   <canvas id=\"canvas\" width=\"150\" height=\"150\"></canvas>\n </body>\n</html>\n```\n### 直接可以绘制图形的方法\n`fillRect(x, y, width, height) `绘制一个填充的矩形\n`strokeRect(x, y, width, height)`绘制一个矩形的边框\n`clearRect(x, y, width, height)`清除指定矩形区域，让清除部分完全透明。\n\n###  绘制基本图形，文本，图片，变换\n`translate(x, y)`translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，如右图所示。\n`rotate(angle)`这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。\n`scale(x, y)`scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。\n`fillStyle = color`设置图形的填充颜色。\n`strokeStyle = color`设置图形轮廓的颜色。\n`globalAlpha = transparencyValue`这个属性影响到 canvas 里所有图形的透明度，有效的值范围是 0.0 （完全透明）到 1.0（完全不透明），默认是 1.0。\n`lineWidth = value`设置线条宽度。\n`lineCap = type`设置线条末端样式。\n`shadowOffsetX = float` shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。\n`shadowOffsetY = float` shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。\n`shadowBlur = float` shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。\n`shadowColor = color` shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。\n\n###  绘制路径\n`beginPath()`新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。\n`closePath()`闭合路径之后图形绘制命令又重新指向到上下文中。当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。  \n`stroke()`通过线条来绘制图形轮廓。\n`fill()`通过填充路径的内容区域生成实心的图形\n`moveTo(x, y)`将笔触移动到指定的坐标x以及y上。或者你可以想象一下在纸上作业，一支钢笔或者铅笔的笔尖从一个点到另一个点的移动过程。\n`lineTo(x, y)`绘制一条从当前位置到指定x以及y位置的直线。\n`arc(x, y, radius, startAngle, endAngle, anticlockwise)`画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。\n`quadraticCurveTo(cp1x, cp1y, x, y)`绘制贝塞尔曲线，cp1x,cp1y为控制点，x,y为结束点。\n`rect(x, y, width, height)`绘制一个左上角坐标为（x,y），宽高为width以及height的矩形。\n`save()restore()`save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。\n###  推荐基于canvas小游戏\n 基于canvas的[小游戏](https://github.com/white-shirt/HTML5-Game.git)\n\n###  详细canvas API\nMDN[canvas API](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)\n","slug":"canvas学习笔记","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3s0006zs8qn51dvyzw","content":"<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"> &lt;head&gt;</span><br><span class=\"line\">  &lt;script type=<span class=\"string\">\"application/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (canvas.getContext) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.fillStyle = <span class=\"string\">\"rgb(200,0,0)\"</span>;</span><br><span class=\"line\">        ctx.fillRect (<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">55</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.fillStyle = <span class=\"string\">\"rgba(0, 0, 200, 0.5)\"</span>;</span><br><span class=\"line\">        ctx.fillRect (<span class=\"number\">30</span>, <span class=\"number\">30</span>, <span class=\"number\">55</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> &lt;/</span>head&gt;</span><br><span class=\"line\"> &lt;body onload=<span class=\"string\">\"draw();\"</span>&gt;</span><br><span class=\"line\">   &lt;canvas id=<span class=\"string\">\"canvas\"</span> width=<span class=\"string\">\"150\"</span> height=<span class=\"string\">\"150\"</span>&gt;&lt;/canvas&gt;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"直接可以绘制图形的方法\"><a href=\"#直接可以绘制图形的方法\" class=\"headerlink\" title=\"直接可以绘制图形的方法\"></a>直接可以绘制图形的方法</h3><p><code>fillRect(x, y, width, height)</code>绘制一个填充的矩形<br><code>strokeRect(x, y, width, height)</code>绘制一个矩形的边框<br><code>clearRect(x, y, width, height)</code>清除指定矩形区域，让清除部分完全透明。</p>\n<h3 id=\"绘制基本图形，文本，图片，变换\"><a href=\"#绘制基本图形，文本，图片，变换\" class=\"headerlink\" title=\"绘制基本图形，文本，图片，变换\"></a>绘制基本图形，文本，图片，变换</h3><p><code>translate(x, y)</code>translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，如右图所示。<br><code>rotate(angle)</code>这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。<br><code>scale(x, y)</code>scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。<br><code>fillStyle = color</code>设置图形的填充颜色。<br><code>strokeStyle = color</code>设置图形轮廓的颜色。<br><code>globalAlpha = transparencyValue</code>这个属性影响到 canvas 里所有图形的透明度，有效的值范围是 0.0 （完全透明）到 1.0（完全不透明），默认是 1.0。<br><code>lineWidth = value</code>设置线条宽度。<br><code>lineCap = type</code>设置线条末端样式。<br><code>shadowOffsetX = float</code> shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。<br><code>shadowOffsetY = float</code> shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。<br><code>shadowBlur = float</code> shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。<br><code>shadowColor = color</code> shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。</p>\n<h3 id=\"绘制路径\"><a href=\"#绘制路径\" class=\"headerlink\" title=\"绘制路径\"></a>绘制路径</h3><p><code>beginPath()</code>新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。<br><code>closePath()</code>闭合路径之后图形绘制命令又重新指向到上下文中。当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。<br><code>stroke()</code>通过线条来绘制图形轮廓。<br><code>fill()</code>通过填充路径的内容区域生成实心的图形<br><code>moveTo(x, y)</code>将笔触移动到指定的坐标x以及y上。或者你可以想象一下在纸上作业，一支钢笔或者铅笔的笔尖从一个点到另一个点的移动过程。<br><code>lineTo(x, y)</code>绘制一条从当前位置到指定x以及y位置的直线。<br><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code>画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。<br><code>quadraticCurveTo(cp1x, cp1y, x, y)</code>绘制贝塞尔曲线，cp1x,cp1y为控制点，x,y为结束点。<br><code>rect(x, y, width, height)</code>绘制一个左上角坐标为（x,y），宽高为width以及height的矩形。<br><code>save()restore()</code>save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。</p>\n<h3 id=\"推荐基于canvas小游戏\"><a href=\"#推荐基于canvas小游戏\" class=\"headerlink\" title=\"推荐基于canvas小游戏\"></a>推荐基于canvas小游戏</h3><p> 基于canvas的<a href=\"https://github.com/white-shirt/HTML5-Game.git\" target=\"_blank\" rel=\"noopener\">小游戏</a></p>\n<h3 id=\"详细canvas-API\"><a href=\"#详细canvas-API\" class=\"headerlink\" title=\"详细canvas API\"></a>详细canvas API</h3><p>MDN<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\" target=\"_blank\" rel=\"noopener\">canvas API</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\"> &lt;head&gt;</span><br><span class=\"line\">  &lt;script type=<span class=\"string\">\"application/javascript\"</span>&gt;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (canvas.getContext) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.fillStyle = <span class=\"string\">\"rgb(200,0,0)\"</span>;</span><br><span class=\"line\">        ctx.fillRect (<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">55</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        ctx.fillStyle = <span class=\"string\">\"rgba(0, 0, 200, 0.5)\"</span>;</span><br><span class=\"line\">        ctx.fillRect (<span class=\"number\">30</span>, <span class=\"number\">30</span>, <span class=\"number\">55</span>, <span class=\"number\">50</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/script&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> &lt;/</span>head&gt;</span><br><span class=\"line\"> &lt;body onload=<span class=\"string\">\"draw();\"</span>&gt;</span><br><span class=\"line\">   &lt;canvas id=<span class=\"string\">\"canvas\"</span> width=<span class=\"string\">\"150\"</span> height=<span class=\"string\">\"150\"</span>&gt;&lt;/canvas&gt;</span><br><span class=\"line\"> &lt;<span class=\"regexp\">/body&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"直接可以绘制图形的方法\"><a href=\"#直接可以绘制图形的方法\" class=\"headerlink\" title=\"直接可以绘制图形的方法\"></a>直接可以绘制图形的方法</h3><p><code>fillRect(x, y, width, height)</code>绘制一个填充的矩形<br><code>strokeRect(x, y, width, height)</code>绘制一个矩形的边框<br><code>clearRect(x, y, width, height)</code>清除指定矩形区域，让清除部分完全透明。</p>\n<h3 id=\"绘制基本图形，文本，图片，变换\"><a href=\"#绘制基本图形，文本，图片，变换\" class=\"headerlink\" title=\"绘制基本图形，文本，图片，变换\"></a>绘制基本图形，文本，图片，变换</h3><p><code>translate(x, y)</code>translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，如右图所示。<br><code>rotate(angle)</code>这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。<br><code>scale(x, y)</code>scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。<br><code>fillStyle = color</code>设置图形的填充颜色。<br><code>strokeStyle = color</code>设置图形轮廓的颜色。<br><code>globalAlpha = transparencyValue</code>这个属性影响到 canvas 里所有图形的透明度，有效的值范围是 0.0 （完全透明）到 1.0（完全不透明），默认是 1.0。<br><code>lineWidth = value</code>设置线条宽度。<br><code>lineCap = type</code>设置线条末端样式。<br><code>shadowOffsetX = float</code> shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。<br><code>shadowOffsetY = float</code> shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。<br><code>shadowBlur = float</code> shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。<br><code>shadowColor = color</code> shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。</p>\n<h3 id=\"绘制路径\"><a href=\"#绘制路径\" class=\"headerlink\" title=\"绘制路径\"></a>绘制路径</h3><p><code>beginPath()</code>新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。<br><code>closePath()</code>闭合路径之后图形绘制命令又重新指向到上下文中。当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。<br><code>stroke()</code>通过线条来绘制图形轮廓。<br><code>fill()</code>通过填充路径的内容区域生成实心的图形<br><code>moveTo(x, y)</code>将笔触移动到指定的坐标x以及y上。或者你可以想象一下在纸上作业，一支钢笔或者铅笔的笔尖从一个点到另一个点的移动过程。<br><code>lineTo(x, y)</code>绘制一条从当前位置到指定x以及y位置的直线。<br><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code>画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。<br><code>quadraticCurveTo(cp1x, cp1y, x, y)</code>绘制贝塞尔曲线，cp1x,cp1y为控制点，x,y为结束点。<br><code>rect(x, y, width, height)</code>绘制一个左上角坐标为（x,y），宽高为width以及height的矩形。<br><code>save()restore()</code>save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。</p>\n<h3 id=\"推荐基于canvas小游戏\"><a href=\"#推荐基于canvas小游戏\" class=\"headerlink\" title=\"推荐基于canvas小游戏\"></a>推荐基于canvas小游戏</h3><p> 基于canvas的<a href=\"https://github.com/white-shirt/HTML5-Game.git\" target=\"_blank\" rel=\"noopener\">小游戏</a></p>\n<h3 id=\"详细canvas-API\"><a href=\"#详细canvas-API\" class=\"headerlink\" title=\"详细canvas API\"></a>详细canvas API</h3><p>MDN<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\" target=\"_blank\" rel=\"noopener\">canvas API</a></p>\n"},{"title":"css选择器","date":"2017-09-29T14:45:58.000Z","_content":"\n> 总结选择器感觉就是像在记流水账，，，不过css的选择器功能确实挺强大的，有些匹配和正则的匹配方式是一致的，有些是css3新增的，旧版本的浏览器可能会不支持，可以通过caniuse网站来查看兼容性。\n\n![](/img/选择器.png)\n[详细脑图](http://naotu.baidu.com/file/cb535512773b5dcc4ecc10ddcd92c0d3)\n\n## css历史\n  >css1 1996\n  css2 1992\n  css2.1 2007\n  css3 2001-.\n\n## 外部文件引入方式\n `<link rel=\"stylesheet\" href=\"css.css\"></link>`\n\n## 浏览器私有属性\n  >chrome，safari\n  `-webkit-`\n  firefox\n  `-moz-`\n  IE\n  `-ms-`\n  opera\n  `-o-`\n\n## 语法\n  注释\n  `/**/`\n  选择器 {\n    属性声明\n  }\n\n  属性声明=属性名：属性值\n\n  属性值语法：\n  margin:[<length>|<percentage>|auto]{1,4}\n         基本元素 组合符号 数量符号\n\n  基本类型\n  关键字, 类型, 符号（/,）, inherit, initial\n\n 组合符号\n  空格（必填，顺序有关）\n  &&（必填，顺序无关，）\n  ||（至少出现一个）\n  | （只能出现一个）\n  [] 分组\n\n 数量符号\n  无\n  `+` 可以出现一次货多次\n  `?` 可出现也可以不出现\n  `{2,4}`\n  `*`\n  `#` 一次或者多次\n\n  规则语法\n  @标示符 xxx;\n  @ 标示符 {}\n\n  规则\n  @media\n  @keyframes\n  @font-face\n  @import\n\n## 选择器\n  ID选择器\n  类选择器\n  标签选择器\n  `*`通配符选择器\n\n  ### 属性选择器\n  ```\n  [attr]\n  [attr=\"val\"] 表示val中包含符号或者空格\n  [attr=val]  #nav{} == [id=nav]{}\n  [attr~=val] .sport{} == [class~=sports]{}，可用于除了class以为的其它属性\n  [attr|=val] 特定属性选择器，一般用于匹配属性lang的值\n  [attr^=val]\n  [attr$=val]\n  [attr*=val]\n  ```\n  ### 伪类选择器\n  ```\n  a:link\n  a:visited\n  a:hover\n  a:active\n  :enabled, disabled, checked\n  :only-child\n\n  :first-child\n  :last-child\n  :nth-child(even|odd)\n  :nth-child(n+1)\n  :nth-last-child(n+1)\n\n  dd:first-of-type{}(同上)\n\n  :empty\n  :root\n  :not eg: :not(p)选择非p元素\n  :target\n  :lang()\n  ```\n  ### 伪元素选择器\n  ```\n  (应用在元素内容的选择器)在css3中为了区别伪元素和伪类在前面添加::\n  ::first-letter\n  ::first-line\n  ::before (和content一起使用)\n  ::after\n  ::selection\n  ```\n\n  ### 组合选择器\n  ```\n  后代选择器\n  .main h2\n  子选择权\n  .main>h12\n  兄弟选择器\n  h2+p(获取前面为h2的一个p元素)\n  h2~p(获取前面为h2的所有兄弟)\n  ```\n  ### 选择器分组\n  `h1,h2,h3...`\n## css优先级\n  !important\n  a = 行内样式                       `1000`\n  b = ID选择器的数量                  `100`\n  c = 类、属性选择器的数量             `10`\n  d = 标签选择器和伪元素选择器的数据量   `1`\n\n## 兼容性测试网站\n  https://www.quirksmode.org/css/\n  http://caniuse.com/\n","source":"_posts/css选择器.md","raw":"---\ntitle: css选择器\ndate: 2017-09-29 10:45:58\ncategories: css\ntags: 选择器\n---\n\n> 总结选择器感觉就是像在记流水账，，，不过css的选择器功能确实挺强大的，有些匹配和正则的匹配方式是一致的，有些是css3新增的，旧版本的浏览器可能会不支持，可以通过caniuse网站来查看兼容性。\n\n![](/img/选择器.png)\n[详细脑图](http://naotu.baidu.com/file/cb535512773b5dcc4ecc10ddcd92c0d3)\n\n## css历史\n  >css1 1996\n  css2 1992\n  css2.1 2007\n  css3 2001-.\n\n## 外部文件引入方式\n `<link rel=\"stylesheet\" href=\"css.css\"></link>`\n\n## 浏览器私有属性\n  >chrome，safari\n  `-webkit-`\n  firefox\n  `-moz-`\n  IE\n  `-ms-`\n  opera\n  `-o-`\n\n## 语法\n  注释\n  `/**/`\n  选择器 {\n    属性声明\n  }\n\n  属性声明=属性名：属性值\n\n  属性值语法：\n  margin:[<length>|<percentage>|auto]{1,4}\n         基本元素 组合符号 数量符号\n\n  基本类型\n  关键字, 类型, 符号（/,）, inherit, initial\n\n 组合符号\n  空格（必填，顺序有关）\n  &&（必填，顺序无关，）\n  ||（至少出现一个）\n  | （只能出现一个）\n  [] 分组\n\n 数量符号\n  无\n  `+` 可以出现一次货多次\n  `?` 可出现也可以不出现\n  `{2,4}`\n  `*`\n  `#` 一次或者多次\n\n  规则语法\n  @标示符 xxx;\n  @ 标示符 {}\n\n  规则\n  @media\n  @keyframes\n  @font-face\n  @import\n\n## 选择器\n  ID选择器\n  类选择器\n  标签选择器\n  `*`通配符选择器\n\n  ### 属性选择器\n  ```\n  [attr]\n  [attr=\"val\"] 表示val中包含符号或者空格\n  [attr=val]  #nav{} == [id=nav]{}\n  [attr~=val] .sport{} == [class~=sports]{}，可用于除了class以为的其它属性\n  [attr|=val] 特定属性选择器，一般用于匹配属性lang的值\n  [attr^=val]\n  [attr$=val]\n  [attr*=val]\n  ```\n  ### 伪类选择器\n  ```\n  a:link\n  a:visited\n  a:hover\n  a:active\n  :enabled, disabled, checked\n  :only-child\n\n  :first-child\n  :last-child\n  :nth-child(even|odd)\n  :nth-child(n+1)\n  :nth-last-child(n+1)\n\n  dd:first-of-type{}(同上)\n\n  :empty\n  :root\n  :not eg: :not(p)选择非p元素\n  :target\n  :lang()\n  ```\n  ### 伪元素选择器\n  ```\n  (应用在元素内容的选择器)在css3中为了区别伪元素和伪类在前面添加::\n  ::first-letter\n  ::first-line\n  ::before (和content一起使用)\n  ::after\n  ::selection\n  ```\n\n  ### 组合选择器\n  ```\n  后代选择器\n  .main h2\n  子选择权\n  .main>h12\n  兄弟选择器\n  h2+p(获取前面为h2的一个p元素)\n  h2~p(获取前面为h2的所有兄弟)\n  ```\n  ### 选择器分组\n  `h1,h2,h3...`\n## css优先级\n  !important\n  a = 行内样式                       `1000`\n  b = ID选择器的数量                  `100`\n  c = 类、属性选择器的数量             `10`\n  d = 标签选择器和伪元素选择器的数据量   `1`\n\n## 兼容性测试网站\n  https://www.quirksmode.org/css/\n  http://caniuse.com/\n","slug":"css选择器","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3s0007zs8qvq1vs9db","content":"<blockquote>\n<p>总结选择器感觉就是像在记流水账，，，不过css的选择器功能确实挺强大的，有些匹配和正则的匹配方式是一致的，有些是css3新增的，旧版本的浏览器可能会不支持，可以通过caniuse网站来查看兼容性。</p>\n</blockquote>\n<p><img src=\"/img/选择器.png\" alt><br><a href=\"http://naotu.baidu.com/file/cb535512773b5dcc4ecc10ddcd92c0d3\" target=\"_blank\" rel=\"noopener\">详细脑图</a></p>\n<h2 id=\"css历史\"><a href=\"#css历史\" class=\"headerlink\" title=\"css历史\"></a>css历史</h2><blockquote>\n<p>css1 1996<br>  css2 1992<br>  css2.1 2007<br>  css3 2001-.</p>\n</blockquote>\n<h2 id=\"外部文件引入方式\"><a href=\"#外部文件引入方式\" class=\"headerlink\" title=\"外部文件引入方式\"></a>外部文件引入方式</h2><p> <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css.css&quot;&gt;&lt;/link&gt;</code></p>\n<h2 id=\"浏览器私有属性\"><a href=\"#浏览器私有属性\" class=\"headerlink\" title=\"浏览器私有属性\"></a>浏览器私有属性</h2><blockquote>\n<p>chrome，safari<br>  <code>-webkit-</code><br>  firefox<br>  <code>-moz-</code><br>  IE<br>  <code>-ms-</code><br>  opera<br>  <code>-o-</code></p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>  注释<br>  <code>/**/</code><br>  选择器 {<br>    属性声明<br>  }</p>\n<p>  属性声明=属性名：属性值</p>\n<p>  属性值语法：<br>  margin:[<length>|<percentage>|auto]{1,4}<br>         基本元素 组合符号 数量符号</percentage></length></p>\n<p>  基本类型<br>  关键字, 类型, 符号（/,）, inherit, initial</p>\n<p> 组合符号<br>  空格（必填，顺序有关）<br>  &amp;&amp;（必填，顺序无关，）<br>  ||（至少出现一个）<br>  | （只能出现一个）<br>  [] 分组</p>\n<p> 数量符号<br>  无<br>  <code>+</code> 可以出现一次货多次<br>  <code>?</code> 可出现也可以不出现<br>  <code>{2,4}</code><br>  <code>*</code><br>  <code>#</code> 一次或者多次</p>\n<p>  规则语法<br>  @标示符 xxx;<br>  @ 标示符 {}</p>\n<p>  规则<br>  @media<br>  @keyframes<br>  @font-face<br>  @import</p>\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><p>  ID选择器<br>  类选择器<br>  标签选择器<br>  <code>*</code>通配符选择器</p>\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[attr]</span><br><span class=\"line\">[attr=&quot;val&quot;] 表示val中包含符号或者空格</span><br><span class=\"line\">[attr=val]  #nav&#123;&#125; == [id=nav]&#123;&#125;</span><br><span class=\"line\">[attr~=val] .sport&#123;&#125; == [class~=sports]&#123;&#125;，可用于除了class以为的其它属性</span><br><span class=\"line\">[attr|=val] 特定属性选择器，一般用于匹配属性lang的值</span><br><span class=\"line\">[attr^=val]</span><br><span class=\"line\">[attr$=val]</span><br><span class=\"line\">[attr*=val]</span><br></pre></td></tr></table></figure>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:link</span><br><span class=\"line\">a:visited</span><br><span class=\"line\">a:hover</span><br><span class=\"line\">a:active</span><br><span class=\"line\">:enabled, disabled, checked</span><br><span class=\"line\">:only-child</span><br><span class=\"line\"></span><br><span class=\"line\">:first-child</span><br><span class=\"line\">:last-child</span><br><span class=\"line\">:nth-child(even|odd)</span><br><span class=\"line\">:nth-child(n+1)</span><br><span class=\"line\">:nth-last-child(n+1)</span><br><span class=\"line\"></span><br><span class=\"line\">dd:first-of-type&#123;&#125;(同上)</span><br><span class=\"line\"></span><br><span class=\"line\">:empty</span><br><span class=\"line\">:root</span><br><span class=\"line\">:not eg: :not(p)选择非p元素</span><br><span class=\"line\">:target</span><br><span class=\"line\">:lang()</span><br></pre></td></tr></table></figure>\n<h3 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(应用在元素内容的选择器)在css3中为了区别伪元素和伪类在前面添加::</span><br><span class=\"line\">::first-letter</span><br><span class=\"line\">::first-line</span><br><span class=\"line\">::before (和content一起使用)</span><br><span class=\"line\">::after</span><br><span class=\"line\">::selection</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后代选择器</span><br><span class=\"line\">.main h2</span><br><span class=\"line\">子选择权</span><br><span class=\"line\">.main&gt;h12</span><br><span class=\"line\">兄弟选择器</span><br><span class=\"line\">h2+p(获取前面为h2的一个p元素)</span><br><span class=\"line\">h2~p(获取前面为h2的所有兄弟)</span><br></pre></td></tr></table></figure>\n<h3 id=\"选择器分组\"><a href=\"#选择器分组\" class=\"headerlink\" title=\"选择器分组\"></a>选择器分组</h3><p>  <code>h1,h2,h3...</code></p>\n<h2 id=\"css优先级\"><a href=\"#css优先级\" class=\"headerlink\" title=\"css优先级\"></a>css优先级</h2><p>  !important<br>  a = 行内样式                       <code>1000</code><br>  b = ID选择器的数量                  <code>100</code><br>  c = 类、属性选择器的数量             <code>10</code><br>  d = 标签选择器和伪元素选择器的数据量   <code>1</code></p>\n<h2 id=\"兼容性测试网站\"><a href=\"#兼容性测试网站\" class=\"headerlink\" title=\"兼容性测试网站\"></a>兼容性测试网站</h2><p>  <a href=\"https://www.quirksmode.org/css/\" target=\"_blank\" rel=\"noopener\">https://www.quirksmode.org/css/</a><br>  <a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"noopener\">http://caniuse.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>总结选择器感觉就是像在记流水账，，，不过css的选择器功能确实挺强大的，有些匹配和正则的匹配方式是一致的，有些是css3新增的，旧版本的浏览器可能会不支持，可以通过caniuse网站来查看兼容性。</p>\n</blockquote>\n<p><img src=\"/img/选择器.png\" alt><br><a href=\"http://naotu.baidu.com/file/cb535512773b5dcc4ecc10ddcd92c0d3\" target=\"_blank\" rel=\"noopener\">详细脑图</a></p>\n<h2 id=\"css历史\"><a href=\"#css历史\" class=\"headerlink\" title=\"css历史\"></a>css历史</h2><blockquote>\n<p>css1 1996<br>  css2 1992<br>  css2.1 2007<br>  css3 2001-.</p>\n</blockquote>\n<h2 id=\"外部文件引入方式\"><a href=\"#外部文件引入方式\" class=\"headerlink\" title=\"外部文件引入方式\"></a>外部文件引入方式</h2><p> <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css.css&quot;&gt;&lt;/link&gt;</code></p>\n<h2 id=\"浏览器私有属性\"><a href=\"#浏览器私有属性\" class=\"headerlink\" title=\"浏览器私有属性\"></a>浏览器私有属性</h2><blockquote>\n<p>chrome，safari<br>  <code>-webkit-</code><br>  firefox<br>  <code>-moz-</code><br>  IE<br>  <code>-ms-</code><br>  opera<br>  <code>-o-</code></p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>  注释<br>  <code>/**/</code><br>  选择器 {<br>    属性声明<br>  }</p>\n<p>  属性声明=属性名：属性值</p>\n<p>  属性值语法：<br>  margin:[<length>|<percentage>|auto]{1,4}<br>         基本元素 组合符号 数量符号</percentage></length></p>\n<p>  基本类型<br>  关键字, 类型, 符号（/,）, inherit, initial</p>\n<p> 组合符号<br>  空格（必填，顺序有关）<br>  &amp;&amp;（必填，顺序无关，）<br>  ||（至少出现一个）<br>  | （只能出现一个）<br>  [] 分组</p>\n<p> 数量符号<br>  无<br>  <code>+</code> 可以出现一次货多次<br>  <code>?</code> 可出现也可以不出现<br>  <code>{2,4}</code><br>  <code>*</code><br>  <code>#</code> 一次或者多次</p>\n<p>  规则语法<br>  @标示符 xxx;<br>  @ 标示符 {}</p>\n<p>  规则<br>  @media<br>  @keyframes<br>  @font-face<br>  @import</p>\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><p>  ID选择器<br>  类选择器<br>  标签选择器<br>  <code>*</code>通配符选择器</p>\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[attr]</span><br><span class=\"line\">[attr=&quot;val&quot;] 表示val中包含符号或者空格</span><br><span class=\"line\">[attr=val]  #nav&#123;&#125; == [id=nav]&#123;&#125;</span><br><span class=\"line\">[attr~=val] .sport&#123;&#125; == [class~=sports]&#123;&#125;，可用于除了class以为的其它属性</span><br><span class=\"line\">[attr|=val] 特定属性选择器，一般用于匹配属性lang的值</span><br><span class=\"line\">[attr^=val]</span><br><span class=\"line\">[attr$=val]</span><br><span class=\"line\">[attr*=val]</span><br></pre></td></tr></table></figure>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:link</span><br><span class=\"line\">a:visited</span><br><span class=\"line\">a:hover</span><br><span class=\"line\">a:active</span><br><span class=\"line\">:enabled, disabled, checked</span><br><span class=\"line\">:only-child</span><br><span class=\"line\"></span><br><span class=\"line\">:first-child</span><br><span class=\"line\">:last-child</span><br><span class=\"line\">:nth-child(even|odd)</span><br><span class=\"line\">:nth-child(n+1)</span><br><span class=\"line\">:nth-last-child(n+1)</span><br><span class=\"line\"></span><br><span class=\"line\">dd:first-of-type&#123;&#125;(同上)</span><br><span class=\"line\"></span><br><span class=\"line\">:empty</span><br><span class=\"line\">:root</span><br><span class=\"line\">:not eg: :not(p)选择非p元素</span><br><span class=\"line\">:target</span><br><span class=\"line\">:lang()</span><br></pre></td></tr></table></figure>\n<h3 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(应用在元素内容的选择器)在css3中为了区别伪元素和伪类在前面添加::</span><br><span class=\"line\">::first-letter</span><br><span class=\"line\">::first-line</span><br><span class=\"line\">::before (和content一起使用)</span><br><span class=\"line\">::after</span><br><span class=\"line\">::selection</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">后代选择器</span><br><span class=\"line\">.main h2</span><br><span class=\"line\">子选择权</span><br><span class=\"line\">.main&gt;h12</span><br><span class=\"line\">兄弟选择器</span><br><span class=\"line\">h2+p(获取前面为h2的一个p元素)</span><br><span class=\"line\">h2~p(获取前面为h2的所有兄弟)</span><br></pre></td></tr></table></figure>\n<h3 id=\"选择器分组\"><a href=\"#选择器分组\" class=\"headerlink\" title=\"选择器分组\"></a>选择器分组</h3><p>  <code>h1,h2,h3...</code></p>\n<h2 id=\"css优先级\"><a href=\"#css优先级\" class=\"headerlink\" title=\"css优先级\"></a>css优先级</h2><p>  !important<br>  a = 行内样式                       <code>1000</code><br>  b = ID选择器的数量                  <code>100</code><br>  c = 类、属性选择器的数量             <code>10</code><br>  d = 标签选择器和伪元素选择器的数据量   <code>1</code></p>\n<h2 id=\"兼容性测试网站\"><a href=\"#兼容性测试网站\" class=\"headerlink\" title=\"兼容性测试网站\"></a>兼容性测试网站</h2><p>  <a href=\"https://www.quirksmode.org/css/\" target=\"_blank\" rel=\"noopener\">https://www.quirksmode.org/css/</a><br>  <a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"noopener\">http://caniuse.com/</a></p>\n"},{"title":"es6 函数总结","date":"2017-10-07T20:55:53.000Z","_content":"\n>es6增加了很多语法糖，比如增加了一些方便判断的属性，写法上更加简单了\n\n## 函数形参的默认值\n  形参默认值，即定义函数的时候可以给形参赋值，赋值的内容可以是`常量`，`变量`，`表达式`\n  >需要注意的是：\n  1 默认值对arguments对象有影响\n  2 默认参数的临时死区\n\n## 处理无命名参数\n  由于javascript函数的参数想传多少就传多少，之前会使用`arguments`对象处理无命名，现在可以使用`...arg`方式替代\n  >注意\n  1 不定参后面不能有其他参数\n  2 不定参不能用于对象字面量setter中，因为setter中的参数有且只有一个\n  3 无论是否有不定参，arguments对象总是包含所有传入的参数\n\n## 增强function构造函数\n  function构造函数，几乎没有用过...\n  ```\n  // 使用案例\n  var add = new function('first', 'second=1', 'return first + second');\n  ```\n\n## 展开运算符\n  这是一个语法糖，嘿嘿，和不定参很像，不定参可以让各自独立的一些参数最终以数组的方式访问，展开运算的则是将数组打乱成各自独立的参数\n  ```\n  Math.max(25, 50, 70, 100);\n  // 同样写法\n  let val = [25, 50, 70, 100];\n  Math.max(...val);\n\n  也支持这种写法\n  Math.max(...val, 101);\n  ```\n\n## name属性\n  `Function.name`, 方便开发者追踪栈记录\n\n## 函数的多重用途\n  ### 用途\n  1 和`new`一起使用作为构造函数 内部调用[[Constructor]]\n  2 函数使用 内部调用[[Call]]\n  ### 判断函数是否作为构造函数在使用\n  es5\n  `p1 instanceof Person` 但是无法区分是通过Person.call()还是new关键字得到的实例\n  es6\n  通过new.target来判断\n  当调用函数的[[Constructor]]方法时，会为new.target赋值new操作符的目标，通常为new时候的`构造函数`，如果函数调用的是[[Call]],new.target则为`undefined`\n  // 通过new关键字创建\n  eg: typeof new.target !== \"undefined\"\n\n## 块级函数\n  es5严格模式下，在代码块中声明函数会报异常，而在es6中作为一个块级声明（`严格模式`），在作用域内可以使用，一旦代码块执行完毕后，函数也结束了，非严格模式下会被提升至外围函数或者全局作用域中\n  块级函数与let函数表达式类似，区别为块级函数会被提升至块的顶部，let 函数表达式不会\n\n## 箭头函数\n  箭头函数很像c#中的lambda表达式\n  >特点\n  1 没有 this, super, arguments, new.target的绑定，这些都由外围最近一层的非箭头函数决定\n  2 不能通过new关键字调用\n  3 没有原型\n  4 不可改变this的绑定\n  5 不支持arguments对象\n  6 不支持重复的命名参数\n\n  ### 语法\n  ```\n  let doNothing = () => {}; // 创建空函数\n  let getName = () => Nicholas;// 无参\n  let reflect = value => value;// 一个参数\n  let sum = (num1, num2) => num1+mum2; // 多个参数，一个表达式的函数体\n  let sum = (num1, num2) => { // 多个参数，由多个表达式组成的函数体\n    return num1+mum2;\n  };\n\n  // 如果返回结果是对象，需要将该字面量包在`()`中,这样是为了与函数体区分\n  let getTempItem = id => ({id: id, name: 'temp'});\n\n  //创建立即执行函数\n  let person = ((name) => {\n    return {\n      getName: function() {\n        return name;\n      }\n    }\n  })('Nicholas');\n  ```\n\n  ### 其它\n  1 简化sort,map,reduce的写法，eg: `values.sort((a, b) => a-b)`\n  2 在箭头函数上调用apply, call, bind和普通函数类似，只是箭头函数中的this不会受这些方法的影响\n\n## 尾调用优化\n  >系统引擎优化\n\n  ```\n  function a() {\n    return b(); // 尾调用\n  }\n  ```\n","source":"_posts/es6-函数总结.md","raw":"---\ntitle: es6 函数总结\ndate: 2017-10-07 16:55:53\ncategories: js\ntags: es6\n---\n\n>es6增加了很多语法糖，比如增加了一些方便判断的属性，写法上更加简单了\n\n## 函数形参的默认值\n  形参默认值，即定义函数的时候可以给形参赋值，赋值的内容可以是`常量`，`变量`，`表达式`\n  >需要注意的是：\n  1 默认值对arguments对象有影响\n  2 默认参数的临时死区\n\n## 处理无命名参数\n  由于javascript函数的参数想传多少就传多少，之前会使用`arguments`对象处理无命名，现在可以使用`...arg`方式替代\n  >注意\n  1 不定参后面不能有其他参数\n  2 不定参不能用于对象字面量setter中，因为setter中的参数有且只有一个\n  3 无论是否有不定参，arguments对象总是包含所有传入的参数\n\n## 增强function构造函数\n  function构造函数，几乎没有用过...\n  ```\n  // 使用案例\n  var add = new function('first', 'second=1', 'return first + second');\n  ```\n\n## 展开运算符\n  这是一个语法糖，嘿嘿，和不定参很像，不定参可以让各自独立的一些参数最终以数组的方式访问，展开运算的则是将数组打乱成各自独立的参数\n  ```\n  Math.max(25, 50, 70, 100);\n  // 同样写法\n  let val = [25, 50, 70, 100];\n  Math.max(...val);\n\n  也支持这种写法\n  Math.max(...val, 101);\n  ```\n\n## name属性\n  `Function.name`, 方便开发者追踪栈记录\n\n## 函数的多重用途\n  ### 用途\n  1 和`new`一起使用作为构造函数 内部调用[[Constructor]]\n  2 函数使用 内部调用[[Call]]\n  ### 判断函数是否作为构造函数在使用\n  es5\n  `p1 instanceof Person` 但是无法区分是通过Person.call()还是new关键字得到的实例\n  es6\n  通过new.target来判断\n  当调用函数的[[Constructor]]方法时，会为new.target赋值new操作符的目标，通常为new时候的`构造函数`，如果函数调用的是[[Call]],new.target则为`undefined`\n  // 通过new关键字创建\n  eg: typeof new.target !== \"undefined\"\n\n## 块级函数\n  es5严格模式下，在代码块中声明函数会报异常，而在es6中作为一个块级声明（`严格模式`），在作用域内可以使用，一旦代码块执行完毕后，函数也结束了，非严格模式下会被提升至外围函数或者全局作用域中\n  块级函数与let函数表达式类似，区别为块级函数会被提升至块的顶部，let 函数表达式不会\n\n## 箭头函数\n  箭头函数很像c#中的lambda表达式\n  >特点\n  1 没有 this, super, arguments, new.target的绑定，这些都由外围最近一层的非箭头函数决定\n  2 不能通过new关键字调用\n  3 没有原型\n  4 不可改变this的绑定\n  5 不支持arguments对象\n  6 不支持重复的命名参数\n\n  ### 语法\n  ```\n  let doNothing = () => {}; // 创建空函数\n  let getName = () => Nicholas;// 无参\n  let reflect = value => value;// 一个参数\n  let sum = (num1, num2) => num1+mum2; // 多个参数，一个表达式的函数体\n  let sum = (num1, num2) => { // 多个参数，由多个表达式组成的函数体\n    return num1+mum2;\n  };\n\n  // 如果返回结果是对象，需要将该字面量包在`()`中,这样是为了与函数体区分\n  let getTempItem = id => ({id: id, name: 'temp'});\n\n  //创建立即执行函数\n  let person = ((name) => {\n    return {\n      getName: function() {\n        return name;\n      }\n    }\n  })('Nicholas');\n  ```\n\n  ### 其它\n  1 简化sort,map,reduce的写法，eg: `values.sort((a, b) => a-b)`\n  2 在箭头函数上调用apply, call, bind和普通函数类似，只是箭头函数中的this不会受这些方法的影响\n\n## 尾调用优化\n  >系统引擎优化\n\n  ```\n  function a() {\n    return b(); // 尾调用\n  }\n  ```\n","slug":"es6-函数总结","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3t000bzs8qt3zehrfd","content":"<blockquote>\n<p>es6增加了很多语法糖，比如增加了一些方便判断的属性，写法上更加简单了</p>\n</blockquote>\n<h2 id=\"函数形参的默认值\"><a href=\"#函数形参的默认值\" class=\"headerlink\" title=\"函数形参的默认值\"></a>函数形参的默认值</h2><p>  形参默认值，即定义函数的时候可以给形参赋值，赋值的内容可以是<code>常量</code>，<code>变量</code>，<code>表达式</code></p>\n<blockquote>\n<p>需要注意的是：<br>  1 默认值对arguments对象有影响<br>  2 默认参数的临时死区</p>\n</blockquote>\n<h2 id=\"处理无命名参数\"><a href=\"#处理无命名参数\" class=\"headerlink\" title=\"处理无命名参数\"></a>处理无命名参数</h2><p>  由于javascript函数的参数想传多少就传多少，之前会使用<code>arguments</code>对象处理无命名，现在可以使用<code>...arg</code>方式替代</p>\n<blockquote>\n<p>注意<br>  1 不定参后面不能有其他参数<br>  2 不定参不能用于对象字面量setter中，因为setter中的参数有且只有一个<br>  3 无论是否有不定参，arguments对象总是包含所有传入的参数</p>\n</blockquote>\n<h2 id=\"增强function构造函数\"><a href=\"#增强function构造函数\" class=\"headerlink\" title=\"增强function构造函数\"></a>增强function构造函数</h2><p>  function构造函数，几乎没有用过…<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用案例</span><br><span class=\"line\">var add = new function(&apos;first&apos;, &apos;second=1&apos;, &apos;return first + second&apos;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h2><p>  这是一个语法糖，嘿嘿，和不定参很像，不定参可以让各自独立的一些参数最终以数组的方式访问，展开运算的则是将数组打乱成各自独立的参数<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.max(25, 50, 70, 100);</span><br><span class=\"line\">// 同样写法</span><br><span class=\"line\">let val = [25, 50, 70, 100];</span><br><span class=\"line\">Math.max(...val);</span><br><span class=\"line\"></span><br><span class=\"line\">也支持这种写法</span><br><span class=\"line\">Math.max(...val, 101);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a>name属性</h2><p>  <code>Function.name</code>, 方便开发者追踪栈记录</p>\n<h2 id=\"函数的多重用途\"><a href=\"#函数的多重用途\" class=\"headerlink\" title=\"函数的多重用途\"></a>函数的多重用途</h2><h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><p>  1 和<code>new</code>一起使用作为构造函数 内部调用[[Constructor]]<br>  2 函数使用 内部调用[[Call]]</p>\n<h3 id=\"判断函数是否作为构造函数在使用\"><a href=\"#判断函数是否作为构造函数在使用\" class=\"headerlink\" title=\"判断函数是否作为构造函数在使用\"></a>判断函数是否作为构造函数在使用</h3><p>  es5<br>  <code>p1 instanceof Person</code> 但是无法区分是通过Person.call()还是new关键字得到的实例<br>  es6<br>  通过new.target来判断<br>  当调用函数的[[Constructor]]方法时，会为new.target赋值new操作符的目标，通常为new时候的<code>构造函数</code>，如果函数调用的是[[Call]],new.target则为<code>undefined</code><br>  // 通过new关键字创建<br>  eg: typeof new.target !== “undefined”</p>\n<h2 id=\"块级函数\"><a href=\"#块级函数\" class=\"headerlink\" title=\"块级函数\"></a>块级函数</h2><p>  es5严格模式下，在代码块中声明函数会报异常，而在es6中作为一个块级声明（<code>严格模式</code>），在作用域内可以使用，一旦代码块执行完毕后，函数也结束了，非严格模式下会被提升至外围函数或者全局作用域中<br>  块级函数与let函数表达式类似，区别为块级函数会被提升至块的顶部，let 函数表达式不会</p>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>  箭头函数很像c#中的lambda表达式</p>\n<blockquote>\n<p>特点<br>  1 没有 this, super, arguments, new.target的绑定，这些都由外围最近一层的非箭头函数决定<br>  2 不能通过new关键字调用<br>  3 没有原型<br>  4 不可改变this的绑定<br>  5 不支持arguments对象<br>  6 不支持重复的命名参数</p>\n</blockquote>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let doNothing = () =&gt; &#123;&#125;; // 创建空函数</span><br><span class=\"line\">let getName = () =&gt; Nicholas;// 无参</span><br><span class=\"line\">let reflect = value =&gt; value;// 一个参数</span><br><span class=\"line\">let sum = (num1, num2) =&gt; num1+mum2; // 多个参数，一个表达式的函数体</span><br><span class=\"line\">let sum = (num1, num2) =&gt; &#123; // 多个参数，由多个表达式组成的函数体</span><br><span class=\"line\">  return num1+mum2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果返回结果是对象，需要将该字面量包在`()`中,这样是为了与函数体区分</span><br><span class=\"line\">let getTempItem = id =&gt; (&#123;id: id, name: &apos;temp&apos;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//创建立即执行函数</span><br><span class=\"line\">let person = ((name) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    getName: function() &#123;</span><br><span class=\"line\">      return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(&apos;Nicholas&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>  1 简化sort,map,reduce的写法，eg: <code>values.sort((a, b) =&gt; a-b)</code><br>  2 在箭头函数上调用apply, call, bind和普通函数类似，只是箭头函数中的this不会受这些方法的影响</p>\n<h2 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h2><blockquote>\n<p>系统引擎优化</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">  return b(); // 尾调用</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>es6增加了很多语法糖，比如增加了一些方便判断的属性，写法上更加简单了</p>\n</blockquote>\n<h2 id=\"函数形参的默认值\"><a href=\"#函数形参的默认值\" class=\"headerlink\" title=\"函数形参的默认值\"></a>函数形参的默认值</h2><p>  形参默认值，即定义函数的时候可以给形参赋值，赋值的内容可以是<code>常量</code>，<code>变量</code>，<code>表达式</code></p>\n<blockquote>\n<p>需要注意的是：<br>  1 默认值对arguments对象有影响<br>  2 默认参数的临时死区</p>\n</blockquote>\n<h2 id=\"处理无命名参数\"><a href=\"#处理无命名参数\" class=\"headerlink\" title=\"处理无命名参数\"></a>处理无命名参数</h2><p>  由于javascript函数的参数想传多少就传多少，之前会使用<code>arguments</code>对象处理无命名，现在可以使用<code>...arg</code>方式替代</p>\n<blockquote>\n<p>注意<br>  1 不定参后面不能有其他参数<br>  2 不定参不能用于对象字面量setter中，因为setter中的参数有且只有一个<br>  3 无论是否有不定参，arguments对象总是包含所有传入的参数</p>\n</blockquote>\n<h2 id=\"增强function构造函数\"><a href=\"#增强function构造函数\" class=\"headerlink\" title=\"增强function构造函数\"></a>增强function构造函数</h2><p>  function构造函数，几乎没有用过…<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 使用案例</span><br><span class=\"line\">var add = new function(&apos;first&apos;, &apos;second=1&apos;, &apos;return first + second&apos;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h2><p>  这是一个语法糖，嘿嘿，和不定参很像，不定参可以让各自独立的一些参数最终以数组的方式访问，展开运算的则是将数组打乱成各自独立的参数<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.max(25, 50, 70, 100);</span><br><span class=\"line\">// 同样写法</span><br><span class=\"line\">let val = [25, 50, 70, 100];</span><br><span class=\"line\">Math.max(...val);</span><br><span class=\"line\"></span><br><span class=\"line\">也支持这种写法</span><br><span class=\"line\">Math.max(...val, 101);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a>name属性</h2><p>  <code>Function.name</code>, 方便开发者追踪栈记录</p>\n<h2 id=\"函数的多重用途\"><a href=\"#函数的多重用途\" class=\"headerlink\" title=\"函数的多重用途\"></a>函数的多重用途</h2><h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><p>  1 和<code>new</code>一起使用作为构造函数 内部调用[[Constructor]]<br>  2 函数使用 内部调用[[Call]]</p>\n<h3 id=\"判断函数是否作为构造函数在使用\"><a href=\"#判断函数是否作为构造函数在使用\" class=\"headerlink\" title=\"判断函数是否作为构造函数在使用\"></a>判断函数是否作为构造函数在使用</h3><p>  es5<br>  <code>p1 instanceof Person</code> 但是无法区分是通过Person.call()还是new关键字得到的实例<br>  es6<br>  通过new.target来判断<br>  当调用函数的[[Constructor]]方法时，会为new.target赋值new操作符的目标，通常为new时候的<code>构造函数</code>，如果函数调用的是[[Call]],new.target则为<code>undefined</code><br>  // 通过new关键字创建<br>  eg: typeof new.target !== “undefined”</p>\n<h2 id=\"块级函数\"><a href=\"#块级函数\" class=\"headerlink\" title=\"块级函数\"></a>块级函数</h2><p>  es5严格模式下，在代码块中声明函数会报异常，而在es6中作为一个块级声明（<code>严格模式</code>），在作用域内可以使用，一旦代码块执行完毕后，函数也结束了，非严格模式下会被提升至外围函数或者全局作用域中<br>  块级函数与let函数表达式类似，区别为块级函数会被提升至块的顶部，let 函数表达式不会</p>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>  箭头函数很像c#中的lambda表达式</p>\n<blockquote>\n<p>特点<br>  1 没有 this, super, arguments, new.target的绑定，这些都由外围最近一层的非箭头函数决定<br>  2 不能通过new关键字调用<br>  3 没有原型<br>  4 不可改变this的绑定<br>  5 不支持arguments对象<br>  6 不支持重复的命名参数</p>\n</blockquote>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let doNothing = () =&gt; &#123;&#125;; // 创建空函数</span><br><span class=\"line\">let getName = () =&gt; Nicholas;// 无参</span><br><span class=\"line\">let reflect = value =&gt; value;// 一个参数</span><br><span class=\"line\">let sum = (num1, num2) =&gt; num1+mum2; // 多个参数，一个表达式的函数体</span><br><span class=\"line\">let sum = (num1, num2) =&gt; &#123; // 多个参数，由多个表达式组成的函数体</span><br><span class=\"line\">  return num1+mum2;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 如果返回结果是对象，需要将该字面量包在`()`中,这样是为了与函数体区分</span><br><span class=\"line\">let getTempItem = id =&gt; (&#123;id: id, name: &apos;temp&apos;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//创建立即执行函数</span><br><span class=\"line\">let person = ((name) =&gt; &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    getName: function() &#123;</span><br><span class=\"line\">      return name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(&apos;Nicholas&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>  1 简化sort,map,reduce的写法，eg: <code>values.sort((a, b) =&gt; a-b)</code><br>  2 在箭头函数上调用apply, call, bind和普通函数类似，只是箭头函数中的this不会受这些方法的影响</p>\n<h2 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h2><blockquote>\n<p>系统引擎优化</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">  return b(); // 尾调用</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"js数据类型图","date":"2018-03-22T21:14:42.000Z","_content":"\n### 上图片\n![](/img/js数据类型总结.png)\n[图片地址](https://www.processon.com/view/link/5ab3747fe4b02cee4ce4f8ff)\n","source":"_posts/js数据类型图.md","raw":"---\ntitle: js数据类型图\ndate: 2018-03-22 17:14:42\ncategories: js\ntags: js基础\n---\n\n### 上图片\n![](/img/js数据类型总结.png)\n[图片地址](https://www.processon.com/view/link/5ab3747fe4b02cee4ce4f8ff)\n","slug":"js数据类型图","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3u000czs8q27k7efb7","content":"<h3 id=\"上图片\"><a href=\"#上图片\" class=\"headerlink\" title=\"上图片\"></a>上图片</h3><p><img src=\"/img/js数据类型总结.png\" alt><br><a href=\"https://www.processon.com/view/link/5ab3747fe4b02cee4ce4f8ff\" target=\"_blank\" rel=\"noopener\">图片地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"上图片\"><a href=\"#上图片\" class=\"headerlink\" title=\"上图片\"></a>上图片</h3><p><img src=\"/img/js数据类型总结.png\" alt><br><a href=\"https://www.processon.com/view/link/5ab3747fe4b02cee4ce4f8ff\" target=\"_blank\" rel=\"noopener\">图片地址</a></p>\n"},{"title":"js作用域","date":"2017-10-10T17:46:23.000Z","_content":"\n## javascript 作用域\n  ### 全局作用域\n  全局函数声明，`if`,`for`,`while`中定义的函数都属于全局作用域\n\n  ### 函数作用域\n  函数有自己的作用域,因此会有以下来定义局部作用域\n  ```\n  // 匿名函数被认为是表达式\n  (function() {})()\n  !function() {} ()\n  +function(){}();\n  (function(){}());\n  var a = function() {return s}();\n  ```\n\n  #### 函数声明和变量声明会被前置\n  ```\n  var myvar = 'my value';  \n  (function() {  \n      alert(myvar);  \n      var myvar = 'local value';  \n  })();  \n  ```\n\n  变量声明前置缺省值为undefined\n  >名称解析顺序：\n  1 当前作用域内是否有 var foo 的定义。\n  2 函数形式参数是否有使用 foo 名称的。\n  3 函数自身是否叫做 foo。\n  4 回溯到上一级作用域，然后从 `#1` 重新开始。\n\n  #### 命名空间\n  通过立即行函数实现，因为函数拥有自己的作用域。通过这种方式可以避免变量污染\n\n  ```\n  (function() {\n      // 函数创建一个命名空间\n      var $ = {};\n      $.foo = function() {\n        console.log(1)\n          // 对外公开的函数，创建了闭包\n      };\n      window.$ = $;\n\n  })(); // 立即执行此匿名函数\n  ```\n\n  ### eval作用域\n  eval('var a = 1;'),由于不建议使用eval，暂不研究\n\n  ### es6箭头函数作用域\n\n\n## es3执行作用域\n  执行上下文 Execution Context 简称ec\n  变量对象(VO) 抽象概念主要包括（变量， 函数声明， 行数参数）\n  活动对象(AO)\n  执行上下文概念： 是一个抽象概念，函数执行前创建，将一系列活动组成一个栈栈底总是全局执行山下文，栈顶总是当前执行上下文\n","source":"_posts/js作用域.md","raw":"---\ntitle: js作用域\ndate: 2017-10-10 13:46:23\ncategories: js\ntags: js基础\n---\n\n## javascript 作用域\n  ### 全局作用域\n  全局函数声明，`if`,`for`,`while`中定义的函数都属于全局作用域\n\n  ### 函数作用域\n  函数有自己的作用域,因此会有以下来定义局部作用域\n  ```\n  // 匿名函数被认为是表达式\n  (function() {})()\n  !function() {} ()\n  +function(){}();\n  (function(){}());\n  var a = function() {return s}();\n  ```\n\n  #### 函数声明和变量声明会被前置\n  ```\n  var myvar = 'my value';  \n  (function() {  \n      alert(myvar);  \n      var myvar = 'local value';  \n  })();  \n  ```\n\n  变量声明前置缺省值为undefined\n  >名称解析顺序：\n  1 当前作用域内是否有 var foo 的定义。\n  2 函数形式参数是否有使用 foo 名称的。\n  3 函数自身是否叫做 foo。\n  4 回溯到上一级作用域，然后从 `#1` 重新开始。\n\n  #### 命名空间\n  通过立即行函数实现，因为函数拥有自己的作用域。通过这种方式可以避免变量污染\n\n  ```\n  (function() {\n      // 函数创建一个命名空间\n      var $ = {};\n      $.foo = function() {\n        console.log(1)\n          // 对外公开的函数，创建了闭包\n      };\n      window.$ = $;\n\n  })(); // 立即执行此匿名函数\n  ```\n\n  ### eval作用域\n  eval('var a = 1;'),由于不建议使用eval，暂不研究\n\n  ### es6箭头函数作用域\n\n\n## es3执行作用域\n  执行上下文 Execution Context 简称ec\n  变量对象(VO) 抽象概念主要包括（变量， 函数声明， 行数参数）\n  活动对象(AO)\n  执行上下文概念： 是一个抽象概念，函数执行前创建，将一系列活动组成一个栈栈底总是全局执行山下文，栈顶总是当前执行上下文\n","slug":"js作用域","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3u000gzs8quq1kfind","content":"<h2 id=\"javascript-作用域\"><a href=\"#javascript-作用域\" class=\"headerlink\" title=\"javascript 作用域\"></a>javascript 作用域</h2><h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><p>  全局函数声明，<code>if</code>,<code>for</code>,<code>while</code>中定义的函数都属于全局作用域</p>\n<h3 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h3><p>  函数有自己的作用域,因此会有以下来定义局部作用域<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 匿名函数被认为是表达式</span><br><span class=\"line\">(function() &#123;&#125;)()</span><br><span class=\"line\">!function() &#123;&#125; ()</span><br><span class=\"line\">+function()&#123;&#125;();</span><br><span class=\"line\">(function()&#123;&#125;());</span><br><span class=\"line\">var a = function() &#123;return s&#125;();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数声明和变量声明会被前置\"><a href=\"#函数声明和变量声明会被前置\" class=\"headerlink\" title=\"函数声明和变量声明会被前置\"></a>函数声明和变量声明会被前置</h4>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myvar = &apos;my value&apos;;  </span><br><span class=\"line\">(function() &#123;  </span><br><span class=\"line\">    alert(myvar);  </span><br><span class=\"line\">    var myvar = &apos;local value&apos;;  </span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>  变量声明前置缺省值为undefined</p>\n<blockquote>\n<p>名称解析顺序：<br>  1 当前作用域内是否有 var foo 的定义。<br>  2 函数形式参数是否有使用 foo 名称的。<br>  3 函数自身是否叫做 foo。<br>  4 回溯到上一级作用域，然后从 <code>#1</code> 重新开始。</p>\n</blockquote>\n<h4 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h4><p>  通过立即行函数实现，因为函数拥有自己的作用域。通过这种方式可以避免变量污染</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function() &#123;</span><br><span class=\"line\">    // 函数创建一个命名空间</span><br><span class=\"line\">    var $ = &#123;&#125;;</span><br><span class=\"line\">    $.foo = function() &#123;</span><br><span class=\"line\">      console.log(1)</span><br><span class=\"line\">        // 对外公开的函数，创建了闭包</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    window.$ = $;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(); // 立即执行此匿名函数</span><br></pre></td></tr></table></figure>\n<h3 id=\"eval作用域\"><a href=\"#eval作用域\" class=\"headerlink\" title=\"eval作用域\"></a>eval作用域</h3><p>  eval(‘var a = 1;’),由于不建议使用eval，暂不研究</p>\n<h3 id=\"es6箭头函数作用域\"><a href=\"#es6箭头函数作用域\" class=\"headerlink\" title=\"es6箭头函数作用域\"></a>es6箭头函数作用域</h3><h2 id=\"es3执行作用域\"><a href=\"#es3执行作用域\" class=\"headerlink\" title=\"es3执行作用域\"></a>es3执行作用域</h2><p>  执行上下文 Execution Context 简称ec<br>  变量对象(VO) 抽象概念主要包括（变量， 函数声明， 行数参数）<br>  活动对象(AO)<br>  执行上下文概念： 是一个抽象概念，函数执行前创建，将一系列活动组成一个栈栈底总是全局执行山下文，栈顶总是当前执行上下文</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"javascript-作用域\"><a href=\"#javascript-作用域\" class=\"headerlink\" title=\"javascript 作用域\"></a>javascript 作用域</h2><h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><p>  全局函数声明，<code>if</code>,<code>for</code>,<code>while</code>中定义的函数都属于全局作用域</p>\n<h3 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h3><p>  函数有自己的作用域,因此会有以下来定义局部作用域<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 匿名函数被认为是表达式</span><br><span class=\"line\">(function() &#123;&#125;)()</span><br><span class=\"line\">!function() &#123;&#125; ()</span><br><span class=\"line\">+function()&#123;&#125;();</span><br><span class=\"line\">(function()&#123;&#125;());</span><br><span class=\"line\">var a = function() &#123;return s&#125;();</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"函数声明和变量声明会被前置\"><a href=\"#函数声明和变量声明会被前置\" class=\"headerlink\" title=\"函数声明和变量声明会被前置\"></a>函数声明和变量声明会被前置</h4>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myvar = &apos;my value&apos;;  </span><br><span class=\"line\">(function() &#123;  </span><br><span class=\"line\">    alert(myvar);  </span><br><span class=\"line\">    var myvar = &apos;local value&apos;;  </span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<p>  变量声明前置缺省值为undefined</p>\n<blockquote>\n<p>名称解析顺序：<br>  1 当前作用域内是否有 var foo 的定义。<br>  2 函数形式参数是否有使用 foo 名称的。<br>  3 函数自身是否叫做 foo。<br>  4 回溯到上一级作用域，然后从 <code>#1</code> 重新开始。</p>\n</blockquote>\n<h4 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h4><p>  通过立即行函数实现，因为函数拥有自己的作用域。通过这种方式可以避免变量污染</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function() &#123;</span><br><span class=\"line\">    // 函数创建一个命名空间</span><br><span class=\"line\">    var $ = &#123;&#125;;</span><br><span class=\"line\">    $.foo = function() &#123;</span><br><span class=\"line\">      console.log(1)</span><br><span class=\"line\">        // 对外公开的函数，创建了闭包</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    window.$ = $;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)(); // 立即执行此匿名函数</span><br></pre></td></tr></table></figure>\n<h3 id=\"eval作用域\"><a href=\"#eval作用域\" class=\"headerlink\" title=\"eval作用域\"></a>eval作用域</h3><p>  eval(‘var a = 1;’),由于不建议使用eval，暂不研究</p>\n<h3 id=\"es6箭头函数作用域\"><a href=\"#es6箭头函数作用域\" class=\"headerlink\" title=\"es6箭头函数作用域\"></a>es6箭头函数作用域</h3><h2 id=\"es3执行作用域\"><a href=\"#es3执行作用域\" class=\"headerlink\" title=\"es3执行作用域\"></a>es3执行作用域</h2><p>  执行上下文 Execution Context 简称ec<br>  变量对象(VO) 抽象概念主要包括（变量， 函数声明， 行数参数）<br>  活动对象(AO)<br>  执行上下文概念： 是一个抽象概念，函数执行前创建，将一系列活动组成一个栈栈底总是全局执行山下文，栈顶总是当前执行上下文</p>\n"},{"title":"promise学习","date":"2017-12-07T00:51:27.000Z","_content":"\n>学习promise刚开始是相当痛苦的，抱着`深入理解es6`这本书就开始看promise是个什么东西，先读了事件和回调，并不知道promise存在的意义，读到串联promise我就放弃了，感觉学习这个知识一点也不开心，学起来也很费力。直到有一天学超分享了Promise.All()的方法，好像一下就顿悟了，js这个脚本语言根本就不会存在多线程这种概念，由于我们可以自定义promise类型，在then()方法中可以异步去执行一些逻辑，才知道promise用处不仅仅是在ajax外面new一个promise。promise其实很牛逼。\n\n## 异步编程的几种情况\npromise的出现不是取代其他的异步编程写法，而是在一些情况下使用promise处理时可以方便一些。\n1 事件模式\n2 回调函数（ajax）\n3 定时器（setTimeout, setInterval）\n4 promise\n\n## promise的生命周期\npending->settled\nsettled包括Fulfilled和Rejected,对应then方法的then(resolve, reject);有些类似于ajax请求的过程，pending时并不知道什么时候会处理完成，当promise处理完成已有就会根据成功和失败执行相应的回调，不同的是，then方法可以链式调用。\n\n## promise的方法和原型方法\n// ====================创建未处理的Promise=====================\n```\n  // 由于每次返回的都是Promise对象因此可以链式的调用下面的两个方法\n  Promise.prototype.catch() // 传入两个方法，resolve, reject\n  Promise.prototype.then()\n\n  let p = new Promise(function(resolve, reject) {\n    //...\n    resolve(res);\n    reject(err);\n  });\n  p.then();\n  p.catch();\n```\n\n\n// ====================创建已处理的Promise=====================\n```\n  // 创建一个已处理的promise，使用promise表示一个已知值，就可以直接使用下面方法创建已解决的promise。\n  Promise.reject()\n  Promise.resolve()\n\n  //二者都是接受一个已知的值，并返回一个promise对象，因此该对象就可以链式调用了\n  let p = Promise.resolve(42);\n  p.then((res) => {\n    console.log(res); // 42\n  });\n\n  // Thenable 对象：有用then()方法，并接受resolve，reject作为参数的普通对象就叫做Thenable 对象\n  let thenable = {\n    then: function(resolve, reject){\n      resolve(42);\n    }\n  }\n  // 通过调用Promise.resolve(),返回Promise对象。如果想Promise.resolve()传入一个promise对象，怎不会有任何变化\n  let p = Promise.resolve(thenable);\n  p.then(function(res) {\n      console.log(res); // 42\n  });\n```\n\n//=======================链式调用promise===================\n```\n  1 链式中没有return值调用then返回undefined\n  2 链式中return值返回对应的值\n  3 链式中return值返回Promise对象，then调用return中的Promise\n  new Promise((res) => {\n    res(123);\n  }).then((res1) => {\n    console.log(res1);\n    if(res.error_no !== 0 ) {\n      return Promise.reject(); // return一个自定义的Promise.reject()，那么调用then()方法只能执行第二参数，实现一些特殊效果\n    }\n  }).then(() => {}, ()=>{});\n```\n\n//=======================相应多个promise===================\n```\n  Promise.all() // 返回一个数组，对应相应的返回值。表示有一个执行成功就执行resolve，否则reject\n  Promise.race() //返回一个值，表示有一个执行成功就执行resolve\n```\n","source":"_posts/promise学习.md","raw":"---\ntitle: promise学习\ndate: 2017-12-06 19:51:27\ncategories: js\ntags: es6\n---\n\n>学习promise刚开始是相当痛苦的，抱着`深入理解es6`这本书就开始看promise是个什么东西，先读了事件和回调，并不知道promise存在的意义，读到串联promise我就放弃了，感觉学习这个知识一点也不开心，学起来也很费力。直到有一天学超分享了Promise.All()的方法，好像一下就顿悟了，js这个脚本语言根本就不会存在多线程这种概念，由于我们可以自定义promise类型，在then()方法中可以异步去执行一些逻辑，才知道promise用处不仅仅是在ajax外面new一个promise。promise其实很牛逼。\n\n## 异步编程的几种情况\npromise的出现不是取代其他的异步编程写法，而是在一些情况下使用promise处理时可以方便一些。\n1 事件模式\n2 回调函数（ajax）\n3 定时器（setTimeout, setInterval）\n4 promise\n\n## promise的生命周期\npending->settled\nsettled包括Fulfilled和Rejected,对应then方法的then(resolve, reject);有些类似于ajax请求的过程，pending时并不知道什么时候会处理完成，当promise处理完成已有就会根据成功和失败执行相应的回调，不同的是，then方法可以链式调用。\n\n## promise的方法和原型方法\n// ====================创建未处理的Promise=====================\n```\n  // 由于每次返回的都是Promise对象因此可以链式的调用下面的两个方法\n  Promise.prototype.catch() // 传入两个方法，resolve, reject\n  Promise.prototype.then()\n\n  let p = new Promise(function(resolve, reject) {\n    //...\n    resolve(res);\n    reject(err);\n  });\n  p.then();\n  p.catch();\n```\n\n\n// ====================创建已处理的Promise=====================\n```\n  // 创建一个已处理的promise，使用promise表示一个已知值，就可以直接使用下面方法创建已解决的promise。\n  Promise.reject()\n  Promise.resolve()\n\n  //二者都是接受一个已知的值，并返回一个promise对象，因此该对象就可以链式调用了\n  let p = Promise.resolve(42);\n  p.then((res) => {\n    console.log(res); // 42\n  });\n\n  // Thenable 对象：有用then()方法，并接受resolve，reject作为参数的普通对象就叫做Thenable 对象\n  let thenable = {\n    then: function(resolve, reject){\n      resolve(42);\n    }\n  }\n  // 通过调用Promise.resolve(),返回Promise对象。如果想Promise.resolve()传入一个promise对象，怎不会有任何变化\n  let p = Promise.resolve(thenable);\n  p.then(function(res) {\n      console.log(res); // 42\n  });\n```\n\n//=======================链式调用promise===================\n```\n  1 链式中没有return值调用then返回undefined\n  2 链式中return值返回对应的值\n  3 链式中return值返回Promise对象，then调用return中的Promise\n  new Promise((res) => {\n    res(123);\n  }).then((res1) => {\n    console.log(res1);\n    if(res.error_no !== 0 ) {\n      return Promise.reject(); // return一个自定义的Promise.reject()，那么调用then()方法只能执行第二参数，实现一些特殊效果\n    }\n  }).then(() => {}, ()=>{});\n```\n\n//=======================相应多个promise===================\n```\n  Promise.all() // 返回一个数组，对应相应的返回值。表示有一个执行成功就执行resolve，否则reject\n  Promise.race() //返回一个值，表示有一个执行成功就执行resolve\n```\n","slug":"promise学习","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3v000jzs8qtqjl2u2j","content":"<blockquote>\n<p>学习promise刚开始是相当痛苦的，抱着<code>深入理解es6</code>这本书就开始看promise是个什么东西，先读了事件和回调，并不知道promise存在的意义，读到串联promise我就放弃了，感觉学习这个知识一点也不开心，学起来也很费力。直到有一天学超分享了Promise.All()的方法，好像一下就顿悟了，js这个脚本语言根本就不会存在多线程这种概念，由于我们可以自定义promise类型，在then()方法中可以异步去执行一些逻辑，才知道promise用处不仅仅是在ajax外面new一个promise。promise其实很牛逼。</p>\n</blockquote>\n<h2 id=\"异步编程的几种情况\"><a href=\"#异步编程的几种情况\" class=\"headerlink\" title=\"异步编程的几种情况\"></a>异步编程的几种情况</h2><p>promise的出现不是取代其他的异步编程写法，而是在一些情况下使用promise处理时可以方便一些。<br>1 事件模式<br>2 回调函数（ajax）<br>3 定时器（setTimeout, setInterval）<br>4 promise</p>\n<h2 id=\"promise的生命周期\"><a href=\"#promise的生命周期\" class=\"headerlink\" title=\"promise的生命周期\"></a>promise的生命周期</h2><p>pending-&gt;settled<br>settled包括Fulfilled和Rejected,对应then方法的then(resolve, reject);有些类似于ajax请求的过程，pending时并不知道什么时候会处理完成，当promise处理完成已有就会根据成功和失败执行相应的回调，不同的是，then方法可以链式调用。</p>\n<h2 id=\"promise的方法和原型方法\"><a href=\"#promise的方法和原型方法\" class=\"headerlink\" title=\"promise的方法和原型方法\"></a>promise的方法和原型方法</h2><p>// ====================创建未处理的Promise=====================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 由于每次返回的都是Promise对象因此可以链式的调用下面的两个方法</span><br><span class=\"line\">Promise.prototype.catch() // 传入两个方法，resolve, reject</span><br><span class=\"line\">Promise.prototype.then()</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">  resolve(res);</span><br><span class=\"line\">  reject(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p.then();</span><br><span class=\"line\">p.catch();</span><br></pre></td></tr></table></figure></p>\n<p>// ====================创建已处理的Promise=====================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个已处理的promise，使用promise表示一个已知值，就可以直接使用下面方法创建已解决的promise。</span><br><span class=\"line\">Promise.reject()</span><br><span class=\"line\">Promise.resolve()</span><br><span class=\"line\"></span><br><span class=\"line\">//二者都是接受一个已知的值，并返回一个promise对象，因此该对象就可以链式调用了</span><br><span class=\"line\">let p = Promise.resolve(42);</span><br><span class=\"line\">p.then((res) =&gt; &#123;</span><br><span class=\"line\">  console.log(res); // 42</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Thenable 对象：有用then()方法，并接受resolve，reject作为参数的普通对象就叫做Thenable 对象</span><br><span class=\"line\">let thenable = &#123;</span><br><span class=\"line\">  then: function(resolve, reject)&#123;</span><br><span class=\"line\">    resolve(42);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 通过调用Promise.resolve(),返回Promise对象。如果想Promise.resolve()传入一个promise对象，怎不会有任何变化</span><br><span class=\"line\">let p = Promise.resolve(thenable);</span><br><span class=\"line\">p.then(function(res) &#123;</span><br><span class=\"line\">    console.log(res); // 42</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>//=======================链式调用promise===================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 链式中没有return值调用then返回undefined</span><br><span class=\"line\">2 链式中return值返回对应的值</span><br><span class=\"line\">3 链式中return值返回Promise对象，then调用return中的Promise</span><br><span class=\"line\">new Promise((res) =&gt; &#123;</span><br><span class=\"line\">  res(123);</span><br><span class=\"line\">&#125;).then((res1) =&gt; &#123;</span><br><span class=\"line\">  console.log(res1);</span><br><span class=\"line\">  if(res.error_no !== 0 ) &#123;</span><br><span class=\"line\">    return Promise.reject(); // return一个自定义的Promise.reject()，那么调用then()方法只能执行第二参数，实现一些特殊效果</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).then(() =&gt; &#123;&#125;, ()=&gt;&#123;&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>//=======================相应多个promise===================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.all() // 返回一个数组，对应相应的返回值。表示有一个执行成功就执行resolve，否则reject</span><br><span class=\"line\">Promise.race() //返回一个值，表示有一个执行成功就执行resolve</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>学习promise刚开始是相当痛苦的，抱着<code>深入理解es6</code>这本书就开始看promise是个什么东西，先读了事件和回调，并不知道promise存在的意义，读到串联promise我就放弃了，感觉学习这个知识一点也不开心，学起来也很费力。直到有一天学超分享了Promise.All()的方法，好像一下就顿悟了，js这个脚本语言根本就不会存在多线程这种概念，由于我们可以自定义promise类型，在then()方法中可以异步去执行一些逻辑，才知道promise用处不仅仅是在ajax外面new一个promise。promise其实很牛逼。</p>\n</blockquote>\n<h2 id=\"异步编程的几种情况\"><a href=\"#异步编程的几种情况\" class=\"headerlink\" title=\"异步编程的几种情况\"></a>异步编程的几种情况</h2><p>promise的出现不是取代其他的异步编程写法，而是在一些情况下使用promise处理时可以方便一些。<br>1 事件模式<br>2 回调函数（ajax）<br>3 定时器（setTimeout, setInterval）<br>4 promise</p>\n<h2 id=\"promise的生命周期\"><a href=\"#promise的生命周期\" class=\"headerlink\" title=\"promise的生命周期\"></a>promise的生命周期</h2><p>pending-&gt;settled<br>settled包括Fulfilled和Rejected,对应then方法的then(resolve, reject);有些类似于ajax请求的过程，pending时并不知道什么时候会处理完成，当promise处理完成已有就会根据成功和失败执行相应的回调，不同的是，then方法可以链式调用。</p>\n<h2 id=\"promise的方法和原型方法\"><a href=\"#promise的方法和原型方法\" class=\"headerlink\" title=\"promise的方法和原型方法\"></a>promise的方法和原型方法</h2><p>// ====================创建未处理的Promise=====================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 由于每次返回的都是Promise对象因此可以链式的调用下面的两个方法</span><br><span class=\"line\">Promise.prototype.catch() // 传入两个方法，resolve, reject</span><br><span class=\"line\">Promise.prototype.then()</span><br><span class=\"line\"></span><br><span class=\"line\">let p = new Promise(function(resolve, reject) &#123;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">  resolve(res);</span><br><span class=\"line\">  reject(err);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">p.then();</span><br><span class=\"line\">p.catch();</span><br></pre></td></tr></table></figure></p>\n<p>// ====================创建已处理的Promise=====================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建一个已处理的promise，使用promise表示一个已知值，就可以直接使用下面方法创建已解决的promise。</span><br><span class=\"line\">Promise.reject()</span><br><span class=\"line\">Promise.resolve()</span><br><span class=\"line\"></span><br><span class=\"line\">//二者都是接受一个已知的值，并返回一个promise对象，因此该对象就可以链式调用了</span><br><span class=\"line\">let p = Promise.resolve(42);</span><br><span class=\"line\">p.then((res) =&gt; &#123;</span><br><span class=\"line\">  console.log(res); // 42</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// Thenable 对象：有用then()方法，并接受resolve，reject作为参数的普通对象就叫做Thenable 对象</span><br><span class=\"line\">let thenable = &#123;</span><br><span class=\"line\">  then: function(resolve, reject)&#123;</span><br><span class=\"line\">    resolve(42);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 通过调用Promise.resolve(),返回Promise对象。如果想Promise.resolve()传入一个promise对象，怎不会有任何变化</span><br><span class=\"line\">let p = Promise.resolve(thenable);</span><br><span class=\"line\">p.then(function(res) &#123;</span><br><span class=\"line\">    console.log(res); // 42</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>//=======================链式调用promise===================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 链式中没有return值调用then返回undefined</span><br><span class=\"line\">2 链式中return值返回对应的值</span><br><span class=\"line\">3 链式中return值返回Promise对象，then调用return中的Promise</span><br><span class=\"line\">new Promise((res) =&gt; &#123;</span><br><span class=\"line\">  res(123);</span><br><span class=\"line\">&#125;).then((res1) =&gt; &#123;</span><br><span class=\"line\">  console.log(res1);</span><br><span class=\"line\">  if(res.error_no !== 0 ) &#123;</span><br><span class=\"line\">    return Promise.reject(); // return一个自定义的Promise.reject()，那么调用then()方法只能执行第二参数，实现一些特殊效果</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;).then(() =&gt; &#123;&#125;, ()=&gt;&#123;&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>//=======================相应多个promise===================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Promise.all() // 返回一个数组，对应相应的返回值。表示有一个执行成功就执行resolve，否则reject</span><br><span class=\"line\">Promise.race() //返回一个值，表示有一个执行成功就执行resolve</span><br></pre></td></tr></table></figure></p>\n"},{"title":"react 项目总结","date":"2017-11-29T01:42:10.000Z","_content":"\n## 格式规范\n1 将大部分的正则校验放入reg文件中，统一管理，方便复用\n2 将h5调用原生的方法统一放入util文件中，方便查看项目中都使用了哪些原生方法，同时可以达到复用的效果\n\n## 使用正则匹配style中为px的数据\n由于消息的详情页可能来自后台录入，录入的文章包含一些样式，由于项目中使用了flexible，使用px组件的显示都比较小，比较方便的方式就是通过正则匹配\n```javascript\n  pxToRem: function(_s){\n    //匹配:20px或: 20px不区分大小写\n    var reg = /(\\:\\s*)+(\\d)+(px)/gi;\n    let newStr= _s.replace(reg, function(_x){\n      _x = _x.replace(/(\\:|: )/,'').replace(/px/i,'');\n      return ':' + (parseFloat(_x) * 2 / 75).toFixed(5) + 'rem';\n    });\n    return newStr;\n  }\n```\n## 在一些安卓手机中border不显示\n由于1px转换为rem后可能只有0.01，数值过小导致边框显示不出，\n1 大多数的处理方法是不对1px的边框进行转换\n  postcss-pxtorem 文档说明\n\n  A message about ignoring properties\n  ```\n  // `px` is converted to `rem`\n  .convert {\n      font-size: 16px; // converted to 1rem\n  }\n\n  // `Px` or `PX` is ignored by `postcss-pxtorem` but still accepted by browsers\n  .ignore {\n      border: 1Px solid; // ignored\n      border-width: 2PX; // ignored\n  }\n  ```\n2 [7 种方法解决移动端 Retina 屏幕 1px 边框问题](https://juejin.im/entry/584e427361ff4b006cd22c7c)\n\n## 对js模块化理解增强\n理解初始于，这样的一段代码\n```\nimport React, { Component } from 'react';\nlet moduleList = [];\nclass Message extends Component {\n  componentDidMount() {\n    ...\n  }\n\n  componentWillUnmount() {\n    ...\n  }\n\n  render() {\n    return (\n      <div className=\"page page-msg\">\n        ...\n      </div>\n    );\n  }\n}\nexport default Message;\n```\n在class外部定义的变量`moduleList`并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。\n同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能\n\n```\n// 测试\n(function() {\n    var _userId = 1;\n    var exportTest = {};\n    function converter(userId) {\n        _userId = ++userId;\n        return _userId;\n    }\n    exportTest.getUserId = function() {\n        return converter(_userId);\n    }\n    window.exportTest = exportTest;\n} ());\nexportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用\n```\n>总结\n1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用\n2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）\n3 exportTest = null，闭包中的变量引用，以及闭包函数被释放\n\n## 对ref的理解\n1 复杂组件可以获取对外的一些属性和方法\n2 简单的可以获取一个dom节点\n\n## 高阶组件，及高阶组件生命周期\n## 生命周期\n\n## 滚动加载组件\n```\nimport React, { Component } from 'react';\n\nlet timer = null;\n\nclass LoadingMore extends Component {\n  constructor(props) {\n    super(props);\n    this.scroll = this.scroll.bind(this);\n  }\n\n  scroll() {\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      console.log('scrolling');\n      const loadMoreFn = this.props.loadMoreFn || function () {};\n      const loadingDom = this.refs.loading;\n      const loadingDomTop = loadingDom.getBoundingClientRect().top;\n      const windowHeight = window.innerHeight;\n      if (loadingDomTop && loadingDomTop < windowHeight) {\n        loadMoreFn();\n      }\n    }, 100);\n  }\n\n  componentDidMount() {\n    const pageContent = document.querySelector('.page-content');\n    if (pageContent) {\n      pageContent.addEventListener('scroll', this.scroll, false);\n    } else {\n      window.addEventListener('scroll', this.scroll, false);\n    }\n  }\n\n  componentWillUnmount() {\n    console.log('window removeEventListener');\n    const pageContent = document.querySelector('.page-content');\n\n    if (pageContent) {\n      pageContent.removeEventListener('scroll', this.scroll, false);\n    } else {\n      window.removeEventListener('scroll', this.scroll, false);\n    }\n    timer = null;\n  }\n\n  render() {\n    return (\n      <div className=\"loading-component\" ref=\"loading\">\n        <div>\n          <span className=\"font\">加载中...</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoadingMore;\n```\n优化，滚动至底部是显示没有更多数据\n\n## webpack神器\n配制：devtool: 'source-map', 结合react插件就可以打断点了\n## 思想转变\n由于惯性思维，设置一些status时，只想到通过两种状态如何控制视图的显示。有时候一些逻辑只用true或者false两种状态是不够的，可以使用status（1,2,3...）\n## 在入口页面判断是否登录\n之前错误的处理逻辑为，把入口页面index作为一个容器，根据情况平判断加载login页面还是首页，这样操作的问题是，在同一个页面中处理两套生命周期比较是比较复杂的\n1 render先执行根据默认值会加载login页面\n2 当didmound中拿到登录状态发现已经登录，再去加载首页\n\n处理：\n在没有拿到登录状态时先不渲染，拿到登录状态了，如果用户已经登陆在入口页加载首页，如果没有直接跳转至登录页面\n\n## ios fix 布局\n由于position: fixed在ios中存在的问题较大，使用了相对定位做了替代\n>页面结构修改\n由于ios对fix属性支持的不好，因此用absolute来替换\n需要处理的内容，如果不需要顶部固定可以做不处理\n1 顶部标题栏（header）和页面内容（page-content）和页脚（footer）为并列关系，被page包含，都是用绝对定位\n2 页面内容（page-content）需要设置为纵向滚动，据顶部的距离为头部的高度\n3 此时的滚动加载更多的组件滚动区域不是相对于window而是page-content\n4 需要定位的固定在底部的元素可以在page-content外面绝对定位，需要区别个别手机键盘将文字顶起的情况,还有滚动一段距离固定的问题\n\n## 低版本手机中不支持set\nreact 16 依赖 Set、Map、requestAnimationFrame，如果在不支持的浏览器请使用 pollyfil,处理这个问题的时候怂了，由于不清楚react16还有什么坑，我把版本设为了15.6。\n\n## h5资源本地化的理解\n就是将我们的部分文件放在手机内存中，目前的app仅有10M,由于菜单等信息都是接口获取的，暂时没有考虑资源本地化\n\n## react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps\n[React router 4 带参数的路由，从\"/album?id=1\"访问\"/album?id=2\"该如何重新渲染？](https://segmentfault.com/q/1010000012169944?_ea=2905143) 还是第一次在sf上回答，有点小激动，嘻嘻~\n\n## jsx语法遍历对象\n通过`Object.keys(obj)`来将对象转成数组，再用map去处理，其中需要注意的是，jsx语法中render的是一个对象他只会对这个对象执行，render一个组件才会被渲染在是视图中\neg:\n`{<component />}` // 不会被渲染\n`<component />` // 会渲染\n\n## require的神奇情况\nrequire在一些情况下直接读一个变量会报错，如果这样写require('../abc'+data)才可以，很神奇，情况不明\n\n\n## 待处理\n1 对应一个分页的页面，滚动一定的距离，进入详情页面，再返回的时候，列表页中滚动条的位置不应该被初始化到顶部\n2 对于项目中的四个tab也，每次切换的时候都会有接口调用，会出现屏闪的问题，页面优化\n","source":"_posts/react-项目总结.md","raw":"---\ntitle: react 项目总结\ndate: 2017-11-28 20:42:10\ncategories: react\ntags: 工作总结\n---\n\n## 格式规范\n1 将大部分的正则校验放入reg文件中，统一管理，方便复用\n2 将h5调用原生的方法统一放入util文件中，方便查看项目中都使用了哪些原生方法，同时可以达到复用的效果\n\n## 使用正则匹配style中为px的数据\n由于消息的详情页可能来自后台录入，录入的文章包含一些样式，由于项目中使用了flexible，使用px组件的显示都比较小，比较方便的方式就是通过正则匹配\n```javascript\n  pxToRem: function(_s){\n    //匹配:20px或: 20px不区分大小写\n    var reg = /(\\:\\s*)+(\\d)+(px)/gi;\n    let newStr= _s.replace(reg, function(_x){\n      _x = _x.replace(/(\\:|: )/,'').replace(/px/i,'');\n      return ':' + (parseFloat(_x) * 2 / 75).toFixed(5) + 'rem';\n    });\n    return newStr;\n  }\n```\n## 在一些安卓手机中border不显示\n由于1px转换为rem后可能只有0.01，数值过小导致边框显示不出，\n1 大多数的处理方法是不对1px的边框进行转换\n  postcss-pxtorem 文档说明\n\n  A message about ignoring properties\n  ```\n  // `px` is converted to `rem`\n  .convert {\n      font-size: 16px; // converted to 1rem\n  }\n\n  // `Px` or `PX` is ignored by `postcss-pxtorem` but still accepted by browsers\n  .ignore {\n      border: 1Px solid; // ignored\n      border-width: 2PX; // ignored\n  }\n  ```\n2 [7 种方法解决移动端 Retina 屏幕 1px 边框问题](https://juejin.im/entry/584e427361ff4b006cd22c7c)\n\n## 对js模块化理解增强\n理解初始于，这样的一段代码\n```\nimport React, { Component } from 'react';\nlet moduleList = [];\nclass Message extends Component {\n  componentDidMount() {\n    ...\n  }\n\n  componentWillUnmount() {\n    ...\n  }\n\n  render() {\n    return (\n      <div className=\"page page-msg\">\n        ...\n      </div>\n    );\n  }\n}\nexport default Message;\n```\n在class外部定义的变量`moduleList`并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。\n同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能\n\n```\n// 测试\n(function() {\n    var _userId = 1;\n    var exportTest = {};\n    function converter(userId) {\n        _userId = ++userId;\n        return _userId;\n    }\n    exportTest.getUserId = function() {\n        return converter(_userId);\n    }\n    window.exportTest = exportTest;\n} ());\nexportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用\n```\n>总结\n1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用\n2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）\n3 exportTest = null，闭包中的变量引用，以及闭包函数被释放\n\n## 对ref的理解\n1 复杂组件可以获取对外的一些属性和方法\n2 简单的可以获取一个dom节点\n\n## 高阶组件，及高阶组件生命周期\n## 生命周期\n\n## 滚动加载组件\n```\nimport React, { Component } from 'react';\n\nlet timer = null;\n\nclass LoadingMore extends Component {\n  constructor(props) {\n    super(props);\n    this.scroll = this.scroll.bind(this);\n  }\n\n  scroll() {\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      console.log('scrolling');\n      const loadMoreFn = this.props.loadMoreFn || function () {};\n      const loadingDom = this.refs.loading;\n      const loadingDomTop = loadingDom.getBoundingClientRect().top;\n      const windowHeight = window.innerHeight;\n      if (loadingDomTop && loadingDomTop < windowHeight) {\n        loadMoreFn();\n      }\n    }, 100);\n  }\n\n  componentDidMount() {\n    const pageContent = document.querySelector('.page-content');\n    if (pageContent) {\n      pageContent.addEventListener('scroll', this.scroll, false);\n    } else {\n      window.addEventListener('scroll', this.scroll, false);\n    }\n  }\n\n  componentWillUnmount() {\n    console.log('window removeEventListener');\n    const pageContent = document.querySelector('.page-content');\n\n    if (pageContent) {\n      pageContent.removeEventListener('scroll', this.scroll, false);\n    } else {\n      window.removeEventListener('scroll', this.scroll, false);\n    }\n    timer = null;\n  }\n\n  render() {\n    return (\n      <div className=\"loading-component\" ref=\"loading\">\n        <div>\n          <span className=\"font\">加载中...</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoadingMore;\n```\n优化，滚动至底部是显示没有更多数据\n\n## webpack神器\n配制：devtool: 'source-map', 结合react插件就可以打断点了\n## 思想转变\n由于惯性思维，设置一些status时，只想到通过两种状态如何控制视图的显示。有时候一些逻辑只用true或者false两种状态是不够的，可以使用status（1,2,3...）\n## 在入口页面判断是否登录\n之前错误的处理逻辑为，把入口页面index作为一个容器，根据情况平判断加载login页面还是首页，这样操作的问题是，在同一个页面中处理两套生命周期比较是比较复杂的\n1 render先执行根据默认值会加载login页面\n2 当didmound中拿到登录状态发现已经登录，再去加载首页\n\n处理：\n在没有拿到登录状态时先不渲染，拿到登录状态了，如果用户已经登陆在入口页加载首页，如果没有直接跳转至登录页面\n\n## ios fix 布局\n由于position: fixed在ios中存在的问题较大，使用了相对定位做了替代\n>页面结构修改\n由于ios对fix属性支持的不好，因此用absolute来替换\n需要处理的内容，如果不需要顶部固定可以做不处理\n1 顶部标题栏（header）和页面内容（page-content）和页脚（footer）为并列关系，被page包含，都是用绝对定位\n2 页面内容（page-content）需要设置为纵向滚动，据顶部的距离为头部的高度\n3 此时的滚动加载更多的组件滚动区域不是相对于window而是page-content\n4 需要定位的固定在底部的元素可以在page-content外面绝对定位，需要区别个别手机键盘将文字顶起的情况,还有滚动一段距离固定的问题\n\n## 低版本手机中不支持set\nreact 16 依赖 Set、Map、requestAnimationFrame，如果在不支持的浏览器请使用 pollyfil,处理这个问题的时候怂了，由于不清楚react16还有什么坑，我把版本设为了15.6。\n\n## h5资源本地化的理解\n就是将我们的部分文件放在手机内存中，目前的app仅有10M,由于菜单等信息都是接口获取的，暂时没有考虑资源本地化\n\n## react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps\n[React router 4 带参数的路由，从\"/album?id=1\"访问\"/album?id=2\"该如何重新渲染？](https://segmentfault.com/q/1010000012169944?_ea=2905143) 还是第一次在sf上回答，有点小激动，嘻嘻~\n\n## jsx语法遍历对象\n通过`Object.keys(obj)`来将对象转成数组，再用map去处理，其中需要注意的是，jsx语法中render的是一个对象他只会对这个对象执行，render一个组件才会被渲染在是视图中\neg:\n`{<component />}` // 不会被渲染\n`<component />` // 会渲染\n\n## require的神奇情况\nrequire在一些情况下直接读一个变量会报错，如果这样写require('../abc'+data)才可以，很神奇，情况不明\n\n\n## 待处理\n1 对应一个分页的页面，滚动一定的距离，进入详情页面，再返回的时候，列表页中滚动条的位置不应该被初始化到顶部\n2 对于项目中的四个tab也，每次切换的时候都会有接口调用，会出现屏闪的问题，页面优化\n","slug":"react-项目总结","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3v000nzs8qwz376jjp","content":"<h2 id=\"格式规范\"><a href=\"#格式规范\" class=\"headerlink\" title=\"格式规范\"></a>格式规范</h2><p>1 将大部分的正则校验放入reg文件中，统一管理，方便复用<br>2 将h5调用原生的方法统一放入util文件中，方便查看项目中都使用了哪些原生方法，同时可以达到复用的效果</p>\n<h2 id=\"使用正则匹配style中为px的数据\"><a href=\"#使用正则匹配style中为px的数据\" class=\"headerlink\" title=\"使用正则匹配style中为px的数据\"></a>使用正则匹配style中为px的数据</h2><p>由于消息的详情页可能来自后台录入，录入的文章包含一些样式，由于项目中使用了flexible，使用px组件的显示都比较小，比较方便的方式就是通过正则匹配<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pxToRem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//匹配:20px或: 20px不区分大小写</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\:\\s*)+(\\d)+(px)/gi</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newStr= _s.replace(reg, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_x</span>)</span>&#123;</span><br><span class=\"line\">    _x = _x.replace(<span class=\"regexp\">/(\\:|: )/</span>,<span class=\"string\">''</span>).replace(<span class=\"regexp\">/px/i</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">':'</span> + (<span class=\"built_in\">parseFloat</span>(_x) * <span class=\"number\">2</span> / <span class=\"number\">75</span>).toFixed(<span class=\"number\">5</span>) + <span class=\"string\">'rem'</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在一些安卓手机中border不显示\"><a href=\"#在一些安卓手机中border不显示\" class=\"headerlink\" title=\"在一些安卓手机中border不显示\"></a>在一些安卓手机中border不显示</h2><p>由于1px转换为rem后可能只有0.01，数值过小导致边框显示不出，<br>1 大多数的处理方法是不对1px的边框进行转换<br>  postcss-pxtorem 文档说明</p>\n<p>  A message about ignoring properties<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// `px` is converted to `rem`</span><br><span class=\"line\">.convert &#123;</span><br><span class=\"line\">    font-size: 16px; // converted to 1rem</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// `Px` or `PX` is ignored by `postcss-pxtorem` but still accepted by browsers</span><br><span class=\"line\">.ignore &#123;</span><br><span class=\"line\">    border: 1Px solid; // ignored</span><br><span class=\"line\">    border-width: 2PX; // ignored</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2 <a href=\"https://juejin.im/entry/584e427361ff4b006cd22c7c\" target=\"_blank\" rel=\"noopener\">7 种方法解决移动端 Retina 屏幕 1px 边框问题</a></p>\n<h2 id=\"对js模块化理解增强\"><a href=\"#对js模块化理解增强\" class=\"headerlink\" title=\"对js模块化理解增强\"></a>对js模块化理解增强</h2><p>理解初始于，这样的一段代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">let moduleList = [];</span><br><span class=\"line\">class Message extends Component &#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;page page-msg&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Message;</span><br></pre></td></tr></table></figure></p>\n<p>在class外部定义的变量<code>moduleList</code>并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。<br>同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 测试</span><br><span class=\"line\">(function() &#123;</span><br><span class=\"line\">    var _userId = 1;</span><br><span class=\"line\">    var exportTest = &#123;&#125;;</span><br><span class=\"line\">    function converter(userId) &#123;</span><br><span class=\"line\">        _userId = ++userId;</span><br><span class=\"line\">        return _userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exportTest.getUserId = function() &#123;</span><br><span class=\"line\">        return converter(_userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    window.exportTest = exportTest;</span><br><span class=\"line\">&#125; ());</span><br><span class=\"line\">exportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总结<br>1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用<br>2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）<br>3 exportTest = null，闭包中的变量引用，以及闭包函数被释放</p>\n</blockquote>\n<h2 id=\"对ref的理解\"><a href=\"#对ref的理解\" class=\"headerlink\" title=\"对ref的理解\"></a>对ref的理解</h2><p>1 复杂组件可以获取对外的一些属性和方法<br>2 简单的可以获取一个dom节点</p>\n<h2 id=\"高阶组件，及高阶组件生命周期\"><a href=\"#高阶组件，及高阶组件生命周期\" class=\"headerlink\" title=\"高阶组件，及高阶组件生命周期\"></a>高阶组件，及高阶组件生命周期</h2><h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h2 id=\"滚动加载组件\"><a href=\"#滚动加载组件\" class=\"headerlink\" title=\"滚动加载组件\"></a>滚动加载组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">let timer = null;</span><br><span class=\"line\"></span><br><span class=\"line\">class LoadingMore extends Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.scroll = this.scroll.bind(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  scroll() &#123;</span><br><span class=\"line\">    if (timer) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      console.log(&apos;scrolling&apos;);</span><br><span class=\"line\">      const loadMoreFn = this.props.loadMoreFn || function () &#123;&#125;;</span><br><span class=\"line\">      const loadingDom = this.refs.loading;</span><br><span class=\"line\">      const loadingDomTop = loadingDom.getBoundingClientRect().top;</span><br><span class=\"line\">      const windowHeight = window.innerHeight;</span><br><span class=\"line\">      if (loadingDomTop &amp;&amp; loadingDomTop &lt; windowHeight) &#123;</span><br><span class=\"line\">        loadMoreFn();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 100);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    const pageContent = document.querySelector(&apos;.page-content&apos;);</span><br><span class=\"line\">    if (pageContent) &#123;</span><br><span class=\"line\">      pageContent.addEventListener(&apos;scroll&apos;, this.scroll, false);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      window.addEventListener(&apos;scroll&apos;, this.scroll, false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    console.log(&apos;window removeEventListener&apos;);</span><br><span class=\"line\">    const pageContent = document.querySelector(&apos;.page-content&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (pageContent) &#123;</span><br><span class=\"line\">      pageContent.removeEventListener(&apos;scroll&apos;, this.scroll, false);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      window.removeEventListener(&apos;scroll&apos;, this.scroll, false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;loading-component&quot; ref=&quot;loading&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;span className=&quot;font&quot;&gt;加载中...&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default LoadingMore;</span><br></pre></td></tr></table></figure>\n<p>优化，滚动至底部是显示没有更多数据</p>\n<h2 id=\"webpack神器\"><a href=\"#webpack神器\" class=\"headerlink\" title=\"webpack神器\"></a>webpack神器</h2><p>配制：devtool: ‘source-map’, 结合react插件就可以打断点了</p>\n<h2 id=\"思想转变\"><a href=\"#思想转变\" class=\"headerlink\" title=\"思想转变\"></a>思想转变</h2><p>由于惯性思维，设置一些status时，只想到通过两种状态如何控制视图的显示。有时候一些逻辑只用true或者false两种状态是不够的，可以使用status（1,2,3…）</p>\n<h2 id=\"在入口页面判断是否登录\"><a href=\"#在入口页面判断是否登录\" class=\"headerlink\" title=\"在入口页面判断是否登录\"></a>在入口页面判断是否登录</h2><p>之前错误的处理逻辑为，把入口页面index作为一个容器，根据情况平判断加载login页面还是首页，这样操作的问题是，在同一个页面中处理两套生命周期比较是比较复杂的<br>1 render先执行根据默认值会加载login页面<br>2 当didmound中拿到登录状态发现已经登录，再去加载首页</p>\n<p>处理：<br>在没有拿到登录状态时先不渲染，拿到登录状态了，如果用户已经登陆在入口页加载首页，如果没有直接跳转至登录页面</p>\n<h2 id=\"ios-fix-布局\"><a href=\"#ios-fix-布局\" class=\"headerlink\" title=\"ios fix 布局\"></a>ios fix 布局</h2><p>由于position: fixed在ios中存在的问题较大，使用了相对定位做了替代</p>\n<blockquote>\n<p>页面结构修改<br>由于ios对fix属性支持的不好，因此用absolute来替换<br>需要处理的内容，如果不需要顶部固定可以做不处理<br>1 顶部标题栏（header）和页面内容（page-content）和页脚（footer）为并列关系，被page包含，都是用绝对定位<br>2 页面内容（page-content）需要设置为纵向滚动，据顶部的距离为头部的高度<br>3 此时的滚动加载更多的组件滚动区域不是相对于window而是page-content<br>4 需要定位的固定在底部的元素可以在page-content外面绝对定位，需要区别个别手机键盘将文字顶起的情况,还有滚动一段距离固定的问题</p>\n</blockquote>\n<h2 id=\"低版本手机中不支持set\"><a href=\"#低版本手机中不支持set\" class=\"headerlink\" title=\"低版本手机中不支持set\"></a>低版本手机中不支持set</h2><p>react 16 依赖 Set、Map、requestAnimationFrame，如果在不支持的浏览器请使用 pollyfil,处理这个问题的时候怂了，由于不清楚react16还有什么坑，我把版本设为了15.6。</p>\n<h2 id=\"h5资源本地化的理解\"><a href=\"#h5资源本地化的理解\" class=\"headerlink\" title=\"h5资源本地化的理解\"></a>h5资源本地化的理解</h2><p>就是将我们的部分文件放在手机内存中，目前的app仅有10M,由于菜单等信息都是接口获取的，暂时没有考虑资源本地化</p>\n<h2 id=\"react路由以及props改变时触发的触发的钩子函数-componentWillReceiveProps\"><a href=\"#react路由以及props改变时触发的触发的钩子函数-componentWillReceiveProps\" class=\"headerlink\" title=\"react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps\"></a>react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps</h2><p><a href=\"https://segmentfault.com/q/1010000012169944?_ea=2905143\" target=\"_blank\" rel=\"noopener\">React router 4 带参数的路由，从”/album?id=1”访问”/album?id=2”该如何重新渲染？</a> 还是第一次在sf上回答，有点小激动，嘻嘻~</p>\n<h2 id=\"jsx语法遍历对象\"><a href=\"#jsx语法遍历对象\" class=\"headerlink\" title=\"jsx语法遍历对象\"></a>jsx语法遍历对象</h2><p>通过<code>Object.keys(obj)</code>来将对象转成数组，再用map去处理，其中需要注意的是，jsx语法中render的是一个对象他只会对这个对象执行，render一个组件才会被渲染在是视图中<br>eg:<br><code>{&lt;component /&gt;}</code> // 不会被渲染<br><code>&lt;component /&gt;</code> // 会渲染</p>\n<h2 id=\"require的神奇情况\"><a href=\"#require的神奇情况\" class=\"headerlink\" title=\"require的神奇情况\"></a>require的神奇情况</h2><p>require在一些情况下直接读一个变量会报错，如果这样写require(‘../abc’+data)才可以，很神奇，情况不明</p>\n<h2 id=\"待处理\"><a href=\"#待处理\" class=\"headerlink\" title=\"待处理\"></a>待处理</h2><p>1 对应一个分页的页面，滚动一定的距离，进入详情页面，再返回的时候，列表页中滚动条的位置不应该被初始化到顶部<br>2 对于项目中的四个tab也，每次切换的时候都会有接口调用，会出现屏闪的问题，页面优化</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"格式规范\"><a href=\"#格式规范\" class=\"headerlink\" title=\"格式规范\"></a>格式规范</h2><p>1 将大部分的正则校验放入reg文件中，统一管理，方便复用<br>2 将h5调用原生的方法统一放入util文件中，方便查看项目中都使用了哪些原生方法，同时可以达到复用的效果</p>\n<h2 id=\"使用正则匹配style中为px的数据\"><a href=\"#使用正则匹配style中为px的数据\" class=\"headerlink\" title=\"使用正则匹配style中为px的数据\"></a>使用正则匹配style中为px的数据</h2><p>由于消息的详情页可能来自后台录入，录入的文章包含一些样式，由于项目中使用了flexible，使用px组件的显示都比较小，比较方便的方式就是通过正则匹配<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pxToRem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_s</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//匹配:20px或: 20px不区分大小写</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\:\\s*)+(\\d)+(px)/gi</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newStr= _s.replace(reg, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_x</span>)</span>&#123;</span><br><span class=\"line\">    _x = _x.replace(<span class=\"regexp\">/(\\:|: )/</span>,<span class=\"string\">''</span>).replace(<span class=\"regexp\">/px/i</span>,<span class=\"string\">''</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">':'</span> + (<span class=\"built_in\">parseFloat</span>(_x) * <span class=\"number\">2</span> / <span class=\"number\">75</span>).toFixed(<span class=\"number\">5</span>) + <span class=\"string\">'rem'</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newStr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在一些安卓手机中border不显示\"><a href=\"#在一些安卓手机中border不显示\" class=\"headerlink\" title=\"在一些安卓手机中border不显示\"></a>在一些安卓手机中border不显示</h2><p>由于1px转换为rem后可能只有0.01，数值过小导致边框显示不出，<br>1 大多数的处理方法是不对1px的边框进行转换<br>  postcss-pxtorem 文档说明</p>\n<p>  A message about ignoring properties<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// `px` is converted to `rem`</span><br><span class=\"line\">.convert &#123;</span><br><span class=\"line\">    font-size: 16px; // converted to 1rem</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// `Px` or `PX` is ignored by `postcss-pxtorem` but still accepted by browsers</span><br><span class=\"line\">.ignore &#123;</span><br><span class=\"line\">    border: 1Px solid; // ignored</span><br><span class=\"line\">    border-width: 2PX; // ignored</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>2 <a href=\"https://juejin.im/entry/584e427361ff4b006cd22c7c\" target=\"_blank\" rel=\"noopener\">7 种方法解决移动端 Retina 屏幕 1px 边框问题</a></p>\n<h2 id=\"对js模块化理解增强\"><a href=\"#对js模块化理解增强\" class=\"headerlink\" title=\"对js模块化理解增强\"></a>对js模块化理解增强</h2><p>理解初始于，这样的一段代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">let moduleList = [];</span><br><span class=\"line\">class Message extends Component &#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;page page-msg&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Message;</span><br></pre></td></tr></table></figure></p>\n<p>在class外部定义的变量<code>moduleList</code>并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。<br>同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 测试</span><br><span class=\"line\">(function() &#123;</span><br><span class=\"line\">    var _userId = 1;</span><br><span class=\"line\">    var exportTest = &#123;&#125;;</span><br><span class=\"line\">    function converter(userId) &#123;</span><br><span class=\"line\">        _userId = ++userId;</span><br><span class=\"line\">        return _userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exportTest.getUserId = function() &#123;</span><br><span class=\"line\">        return converter(_userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    window.exportTest = exportTest;</span><br><span class=\"line\">&#125; ());</span><br><span class=\"line\">exportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总结<br>1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用<br>2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）<br>3 exportTest = null，闭包中的变量引用，以及闭包函数被释放</p>\n</blockquote>\n<h2 id=\"对ref的理解\"><a href=\"#对ref的理解\" class=\"headerlink\" title=\"对ref的理解\"></a>对ref的理解</h2><p>1 复杂组件可以获取对外的一些属性和方法<br>2 简单的可以获取一个dom节点</p>\n<h2 id=\"高阶组件，及高阶组件生命周期\"><a href=\"#高阶组件，及高阶组件生命周期\" class=\"headerlink\" title=\"高阶组件，及高阶组件生命周期\"></a>高阶组件，及高阶组件生命周期</h2><h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h2 id=\"滚动加载组件\"><a href=\"#滚动加载组件\" class=\"headerlink\" title=\"滚动加载组件\"></a>滚动加载组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">let timer = null;</span><br><span class=\"line\"></span><br><span class=\"line\">class LoadingMore extends Component &#123;</span><br><span class=\"line\">  constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\">    this.scroll = this.scroll.bind(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  scroll() &#123;</span><br><span class=\"line\">    if (timer) &#123;</span><br><span class=\"line\">      clearTimeout(timer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      console.log(&apos;scrolling&apos;);</span><br><span class=\"line\">      const loadMoreFn = this.props.loadMoreFn || function () &#123;&#125;;</span><br><span class=\"line\">      const loadingDom = this.refs.loading;</span><br><span class=\"line\">      const loadingDomTop = loadingDom.getBoundingClientRect().top;</span><br><span class=\"line\">      const windowHeight = window.innerHeight;</span><br><span class=\"line\">      if (loadingDomTop &amp;&amp; loadingDomTop &lt; windowHeight) &#123;</span><br><span class=\"line\">        loadMoreFn();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;, 100);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    const pageContent = document.querySelector(&apos;.page-content&apos;);</span><br><span class=\"line\">    if (pageContent) &#123;</span><br><span class=\"line\">      pageContent.addEventListener(&apos;scroll&apos;, this.scroll, false);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      window.addEventListener(&apos;scroll&apos;, this.scroll, false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    console.log(&apos;window removeEventListener&apos;);</span><br><span class=\"line\">    const pageContent = document.querySelector(&apos;.page-content&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">    if (pageContent) &#123;</span><br><span class=\"line\">      pageContent.removeEventListener(&apos;scroll&apos;, this.scroll, false);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      window.removeEventListener(&apos;scroll&apos;, this.scroll, false);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    timer = null;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;loading-component&quot; ref=&quot;loading&quot;&gt;</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">          &lt;span className=&quot;font&quot;&gt;加载中...&lt;/span&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default LoadingMore;</span><br></pre></td></tr></table></figure>\n<p>优化，滚动至底部是显示没有更多数据</p>\n<h2 id=\"webpack神器\"><a href=\"#webpack神器\" class=\"headerlink\" title=\"webpack神器\"></a>webpack神器</h2><p>配制：devtool: ‘source-map’, 结合react插件就可以打断点了</p>\n<h2 id=\"思想转变\"><a href=\"#思想转变\" class=\"headerlink\" title=\"思想转变\"></a>思想转变</h2><p>由于惯性思维，设置一些status时，只想到通过两种状态如何控制视图的显示。有时候一些逻辑只用true或者false两种状态是不够的，可以使用status（1,2,3…）</p>\n<h2 id=\"在入口页面判断是否登录\"><a href=\"#在入口页面判断是否登录\" class=\"headerlink\" title=\"在入口页面判断是否登录\"></a>在入口页面判断是否登录</h2><p>之前错误的处理逻辑为，把入口页面index作为一个容器，根据情况平判断加载login页面还是首页，这样操作的问题是，在同一个页面中处理两套生命周期比较是比较复杂的<br>1 render先执行根据默认值会加载login页面<br>2 当didmound中拿到登录状态发现已经登录，再去加载首页</p>\n<p>处理：<br>在没有拿到登录状态时先不渲染，拿到登录状态了，如果用户已经登陆在入口页加载首页，如果没有直接跳转至登录页面</p>\n<h2 id=\"ios-fix-布局\"><a href=\"#ios-fix-布局\" class=\"headerlink\" title=\"ios fix 布局\"></a>ios fix 布局</h2><p>由于position: fixed在ios中存在的问题较大，使用了相对定位做了替代</p>\n<blockquote>\n<p>页面结构修改<br>由于ios对fix属性支持的不好，因此用absolute来替换<br>需要处理的内容，如果不需要顶部固定可以做不处理<br>1 顶部标题栏（header）和页面内容（page-content）和页脚（footer）为并列关系，被page包含，都是用绝对定位<br>2 页面内容（page-content）需要设置为纵向滚动，据顶部的距离为头部的高度<br>3 此时的滚动加载更多的组件滚动区域不是相对于window而是page-content<br>4 需要定位的固定在底部的元素可以在page-content外面绝对定位，需要区别个别手机键盘将文字顶起的情况,还有滚动一段距离固定的问题</p>\n</blockquote>\n<h2 id=\"低版本手机中不支持set\"><a href=\"#低版本手机中不支持set\" class=\"headerlink\" title=\"低版本手机中不支持set\"></a>低版本手机中不支持set</h2><p>react 16 依赖 Set、Map、requestAnimationFrame，如果在不支持的浏览器请使用 pollyfil,处理这个问题的时候怂了，由于不清楚react16还有什么坑，我把版本设为了15.6。</p>\n<h2 id=\"h5资源本地化的理解\"><a href=\"#h5资源本地化的理解\" class=\"headerlink\" title=\"h5资源本地化的理解\"></a>h5资源本地化的理解</h2><p>就是将我们的部分文件放在手机内存中，目前的app仅有10M,由于菜单等信息都是接口获取的，暂时没有考虑资源本地化</p>\n<h2 id=\"react路由以及props改变时触发的触发的钩子函数-componentWillReceiveProps\"><a href=\"#react路由以及props改变时触发的触发的钩子函数-componentWillReceiveProps\" class=\"headerlink\" title=\"react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps\"></a>react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps</h2><p><a href=\"https://segmentfault.com/q/1010000012169944?_ea=2905143\" target=\"_blank\" rel=\"noopener\">React router 4 带参数的路由，从”/album?id=1”访问”/album?id=2”该如何重新渲染？</a> 还是第一次在sf上回答，有点小激动，嘻嘻~</p>\n<h2 id=\"jsx语法遍历对象\"><a href=\"#jsx语法遍历对象\" class=\"headerlink\" title=\"jsx语法遍历对象\"></a>jsx语法遍历对象</h2><p>通过<code>Object.keys(obj)</code>来将对象转成数组，再用map去处理，其中需要注意的是，jsx语法中render的是一个对象他只会对这个对象执行，render一个组件才会被渲染在是视图中<br>eg:<br><code>{&lt;component /&gt;}</code> // 不会被渲染<br><code>&lt;component /&gt;</code> // 会渲染</p>\n<h2 id=\"require的神奇情况\"><a href=\"#require的神奇情况\" class=\"headerlink\" title=\"require的神奇情况\"></a>require的神奇情况</h2><p>require在一些情况下直接读一个变量会报错，如果这样写require(‘../abc’+data)才可以，很神奇，情况不明</p>\n<h2 id=\"待处理\"><a href=\"#待处理\" class=\"headerlink\" title=\"待处理\"></a>待处理</h2><p>1 对应一个分页的页面，滚动一定的距离，进入详情页面，再返回的时候，列表页中滚动条的位置不应该被初始化到顶部<br>2 对于项目中的四个tab也，每次切换的时候都会有接口调用，会出现屏闪的问题，页面优化</p>\n"},{"title":"react项目总结2","date":"2018-02-02T12:51:56.000Z","_content":"\n### react项目，ios光标问题\n  重现这个问题：在react官网上下载appdome, 随便添加一个input，在手机app或者Safari上操作，先让input `focus`，然后点击其他元素（包括按钮之类的元素），光标不会消失\n  最终知道是react框架的问题，框架中在`document上绑定了blur`，导致的\n  解决方案\n  ```\n  <script>document.addEventListener('touchstart',function(e){(document.activeElement && document.activeElement != e.target) && document.activeElement.blur();});</script>\n  ```\n  [参考文件](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html )\n\n### 光标问题2\n  使用absolute代替了fix解决了顶部固定问题，然而h5还是逃不过一些致命的问题，比如一个页面中存在输入框，ios的键盘又占据页面的一些空间，页面就会出现滚动条，而这种控制已经超越了h5，让我不禁想起那些追求完美的企业对于这种表单是不是直接使用原生解决了\n\n### 写了一个自己的polyfill\n  1 将相应的polyfill方法放入自执行的方法中（可以来自mdn或者github）(function() {})()\n  2 在页面刚开始的时候引入 import \"polyfill\";\n\n### 处理class\n  1 classList，提供了add、remove、toggle以及contains等方法\n\n  2\n  var classVal = document.getElementById(\"id\").getAttribute(\"class\");\n\n  //删除的话\n  classVal = classVal.replace(\"someClassName\",\"\");\n  document.getElementById(\"id\").setAttribute(\"class\",classVal );\n\n  //添加的话\n  classVal = classVal.concat(\" someClassName\");\n  document.getElementById(\"id\").setAttribute(\"class\",classVal );\n\n  //替换的话\n  classVal = classVal.replace(\"someClassName\",\"otherClassName\");\n\n### 展开运算符和剩余运算符\n  `剩余运算符`\n  剩余运算符要命名个变量名称的，可以用在函数参数，还有 解构赋值上{a,b,...obj}= {a:1,b:2,c:3,d:4}\n  `展开运算符`\n  剩余参数语法允许我们将一个不定数量的参数表示为一个数组。\n  扩展语法允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组字面量）或多个变量（用于解构赋值）的位置扩展。\n\n  举个栗子\n  <MyHead name={name} phone={tel} image={image} {...this.props}/>\n  {...this.props}使用了展开运算符，会把this.props中的属性展开。\n  {}是jsx识别js使用\n  name={name} phone={tel} image={image} {...this.props}将作为属性传给MyHead\n\n### 安卓手机一些兼容性问题总结及扩展\n  1 webview 相当于一个浏览器\n  2 a 标签 `_blank`之类的客户端可以定义一些协议去做特殊解析*\n  3 android4.4部分flex， svg, canvas属性不支持\n  4 file浏览器支持，但是部分webview包不支持\n  5 新版本的chrome不支持window.jtoJHandle，需要判断这个属性是否存在\n  6 安卓机型下，用户设置整个手机字体大小时，我们app内字体大小受影响，导致页面样式错乱。\n  原因：我们app的字体大小继承到手机设置的字体大小。\n  解决方案：需找安卓开发，修改安卓客户端，禁止app继承手机所设置的大小。\n  7 安卓手机的分水岭4.0-4.3， 4.4\n### APP调试小结\n  1 很蠢很方便的方法: alert\n  2 原生打debug包，然后将手机设置为允许调试状态，那么安卓可以通过`chrome://inspect/#devices`查看手机上的页面\n  3 ios有mac就比较方便了，可以在`Safari`上找到相应的手机，然后找到相应的app\n  4 比较方便的还是使用[vConsole](https://www.npmjs.com/package/vconsole)\n  使用: 因入库，实例化对象，那么手机手机上就会出现一个悬浮按钮，点击可看一些日志\n\n### 项目调试遇到的坑\n  遇到一些网址打不开，或者一些开发的服务连不上，或者一些配置信息没有读到，可以能是一下原因，哭\n  1 网址不能访问可能是开了翻墙软件\n  2 开发的服务ping不到可能是开了防火墙\n  3 node的配置文件死活读不到，可能是文件读错了，可以通过打印信息看一些日志。\n\n### [redux学习总结](https://lvsally.github.io/2018/02/01/redux/)\n\n### 单页面思考模块切换\n  江海：spa+f7，增加了view的概念，可以方便模块切换时保存模块的状态，拥有自己的路由和页面跳转方法\n  浙商：spa+react 想保存某些模块的内容可能只能存在缓存中（利用闭包）\n  手淘分享，模块切换的问题多是放在原生解决\n\n### 开屏广告实现方案\n  开屏广告实现方案：由于h5接口获取和展示页面可能会导致页面一段时间内白屏，因此放在原生处理，利用客户端缓存上一次的广告页，那么展示的也是上一次的广告\n\n### 第三方app解决方案\n  涉及第三方网站和我们app有交互，放弃使用iframe，使用h5+原生，其中原生通过新打开一个webview展示第三方，其中返回我的的页面的时候考虑两种情况： 1 直接关闭新的webview，那么再次进入第三方页面时的页面状态将不会保存。 2 隐藏新的webview，原生端认为实现起来比较麻烦，不能和其他项目统一处理\n","source":"_posts/react项目总结2.md","raw":"---\ntitle: react项目总结2\ndate: 2018-02-02 07:51:56\ncategories: react\ntags: 工作总结\n---\n\n### react项目，ios光标问题\n  重现这个问题：在react官网上下载appdome, 随便添加一个input，在手机app或者Safari上操作，先让input `focus`，然后点击其他元素（包括按钮之类的元素），光标不会消失\n  最终知道是react框架的问题，框架中在`document上绑定了blur`，导致的\n  解决方案\n  ```\n  <script>document.addEventListener('touchstart',function(e){(document.activeElement && document.activeElement != e.target) && document.activeElement.blur();});</script>\n  ```\n  [参考文件](https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html )\n\n### 光标问题2\n  使用absolute代替了fix解决了顶部固定问题，然而h5还是逃不过一些致命的问题，比如一个页面中存在输入框，ios的键盘又占据页面的一些空间，页面就会出现滚动条，而这种控制已经超越了h5，让我不禁想起那些追求完美的企业对于这种表单是不是直接使用原生解决了\n\n### 写了一个自己的polyfill\n  1 将相应的polyfill方法放入自执行的方法中（可以来自mdn或者github）(function() {})()\n  2 在页面刚开始的时候引入 import \"polyfill\";\n\n### 处理class\n  1 classList，提供了add、remove、toggle以及contains等方法\n\n  2\n  var classVal = document.getElementById(\"id\").getAttribute(\"class\");\n\n  //删除的话\n  classVal = classVal.replace(\"someClassName\",\"\");\n  document.getElementById(\"id\").setAttribute(\"class\",classVal );\n\n  //添加的话\n  classVal = classVal.concat(\" someClassName\");\n  document.getElementById(\"id\").setAttribute(\"class\",classVal );\n\n  //替换的话\n  classVal = classVal.replace(\"someClassName\",\"otherClassName\");\n\n### 展开运算符和剩余运算符\n  `剩余运算符`\n  剩余运算符要命名个变量名称的，可以用在函数参数，还有 解构赋值上{a,b,...obj}= {a:1,b:2,c:3,d:4}\n  `展开运算符`\n  剩余参数语法允许我们将一个不定数量的参数表示为一个数组。\n  扩展语法允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组字面量）或多个变量（用于解构赋值）的位置扩展。\n\n  举个栗子\n  <MyHead name={name} phone={tel} image={image} {...this.props}/>\n  {...this.props}使用了展开运算符，会把this.props中的属性展开。\n  {}是jsx识别js使用\n  name={name} phone={tel} image={image} {...this.props}将作为属性传给MyHead\n\n### 安卓手机一些兼容性问题总结及扩展\n  1 webview 相当于一个浏览器\n  2 a 标签 `_blank`之类的客户端可以定义一些协议去做特殊解析*\n  3 android4.4部分flex， svg, canvas属性不支持\n  4 file浏览器支持，但是部分webview包不支持\n  5 新版本的chrome不支持window.jtoJHandle，需要判断这个属性是否存在\n  6 安卓机型下，用户设置整个手机字体大小时，我们app内字体大小受影响，导致页面样式错乱。\n  原因：我们app的字体大小继承到手机设置的字体大小。\n  解决方案：需找安卓开发，修改安卓客户端，禁止app继承手机所设置的大小。\n  7 安卓手机的分水岭4.0-4.3， 4.4\n### APP调试小结\n  1 很蠢很方便的方法: alert\n  2 原生打debug包，然后将手机设置为允许调试状态，那么安卓可以通过`chrome://inspect/#devices`查看手机上的页面\n  3 ios有mac就比较方便了，可以在`Safari`上找到相应的手机，然后找到相应的app\n  4 比较方便的还是使用[vConsole](https://www.npmjs.com/package/vconsole)\n  使用: 因入库，实例化对象，那么手机手机上就会出现一个悬浮按钮，点击可看一些日志\n\n### 项目调试遇到的坑\n  遇到一些网址打不开，或者一些开发的服务连不上，或者一些配置信息没有读到，可以能是一下原因，哭\n  1 网址不能访问可能是开了翻墙软件\n  2 开发的服务ping不到可能是开了防火墙\n  3 node的配置文件死活读不到，可能是文件读错了，可以通过打印信息看一些日志。\n\n### [redux学习总结](https://lvsally.github.io/2018/02/01/redux/)\n\n### 单页面思考模块切换\n  江海：spa+f7，增加了view的概念，可以方便模块切换时保存模块的状态，拥有自己的路由和页面跳转方法\n  浙商：spa+react 想保存某些模块的内容可能只能存在缓存中（利用闭包）\n  手淘分享，模块切换的问题多是放在原生解决\n\n### 开屏广告实现方案\n  开屏广告实现方案：由于h5接口获取和展示页面可能会导致页面一段时间内白屏，因此放在原生处理，利用客户端缓存上一次的广告页，那么展示的也是上一次的广告\n\n### 第三方app解决方案\n  涉及第三方网站和我们app有交互，放弃使用iframe，使用h5+原生，其中原生通过新打开一个webview展示第三方，其中返回我的的页面的时候考虑两种情况： 1 直接关闭新的webview，那么再次进入第三方页面时的页面状态将不会保存。 2 隐藏新的webview，原生端认为实现起来比较麻烦，不能和其他项目统一处理\n","slug":"react项目总结2","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3w000qzs8qlxnavclp","content":"<h3 id=\"react项目，ios光标问题\"><a href=\"#react项目，ios光标问题\" class=\"headerlink\" title=\"react项目，ios光标问题\"></a>react项目，ios光标问题</h3><p>  重现这个问题：在react官网上下载appdome, 随便添加一个input，在手机app或者Safari上操作，先让input <code>focus</code>，然后点击其他元素（包括按钮之类的元素），光标不会消失<br>  最终知道是react框架的问题，框架中在<code>document上绑定了blur</code>，导致的<br>  解决方案<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;document.addEventListener(&apos;touchstart&apos;,function(e)&#123;(document.activeElement &amp;&amp; document.activeElement != e.target) &amp;&amp; document.activeElement.blur();&#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>  <a href=\"https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\" target=\"_blank\" rel=\"noopener\">参考文件</a></p>\n<h3 id=\"光标问题2\"><a href=\"#光标问题2\" class=\"headerlink\" title=\"光标问题2\"></a>光标问题2</h3><p>  使用absolute代替了fix解决了顶部固定问题，然而h5还是逃不过一些致命的问题，比如一个页面中存在输入框，ios的键盘又占据页面的一些空间，页面就会出现滚动条，而这种控制已经超越了h5，让我不禁想起那些追求完美的企业对于这种表单是不是直接使用原生解决了</p>\n<h3 id=\"写了一个自己的polyfill\"><a href=\"#写了一个自己的polyfill\" class=\"headerlink\" title=\"写了一个自己的polyfill\"></a>写了一个自己的polyfill</h3><p>  1 将相应的polyfill方法放入自执行的方法中（可以来自mdn或者github）(function() {})()<br>  2 在页面刚开始的时候引入 import “polyfill”;</p>\n<h3 id=\"处理class\"><a href=\"#处理class\" class=\"headerlink\" title=\"处理class\"></a>处理class</h3><p>  1 classList，提供了add、remove、toggle以及contains等方法</p>\n<p>  2<br>  var classVal = document.getElementById(“id”).getAttribute(“class”);</p>\n<p>  //删除的话<br>  classVal = classVal.replace(“someClassName”,””);<br>  document.getElementById(“id”).setAttribute(“class”,classVal );</p>\n<p>  //添加的话<br>  classVal = classVal.concat(“ someClassName”);<br>  document.getElementById(“id”).setAttribute(“class”,classVal );</p>\n<p>  //替换的话<br>  classVal = classVal.replace(“someClassName”,”otherClassName”);</p>\n<h3 id=\"展开运算符和剩余运算符\"><a href=\"#展开运算符和剩余运算符\" class=\"headerlink\" title=\"展开运算符和剩余运算符\"></a>展开运算符和剩余运算符</h3><p>  <code>剩余运算符</code><br>  剩余运算符要命名个变量名称的，可以用在函数参数，还有 解构赋值上{a,b,…obj}= {a:1,b:2,c:3,d:4}<br>  <code>展开运算符</code><br>  剩余参数语法允许我们将一个不定数量的参数表示为一个数组。<br>  扩展语法允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组字面量）或多个变量（用于解构赋值）的位置扩展。</p>\n<p>  举个栗子<br>  <myhead name=\"{name}\" phone=\"{tel}\" image=\"{image}\" {...this.props}><br>  {…this.props}使用了展开运算符，会把this.props中的属性展开。<br>  {}是jsx识别js使用<br>  name={name} phone={tel} image={image} {…this.props}将作为属性传给MyHead</myhead></p>\n<h3 id=\"安卓手机一些兼容性问题总结及扩展\"><a href=\"#安卓手机一些兼容性问题总结及扩展\" class=\"headerlink\" title=\"安卓手机一些兼容性问题总结及扩展\"></a>安卓手机一些兼容性问题总结及扩展</h3><p>  1 webview 相当于一个浏览器<br>  2 a 标签 <code>_blank</code>之类的客户端可以定义一些协议去做特殊解析*<br>  3 android4.4部分flex， svg, canvas属性不支持<br>  4 file浏览器支持，但是部分webview包不支持<br>  5 新版本的chrome不支持window.jtoJHandle，需要判断这个属性是否存在<br>  6 安卓机型下，用户设置整个手机字体大小时，我们app内字体大小受影响，导致页面样式错乱。<br>  原因：我们app的字体大小继承到手机设置的字体大小。<br>  解决方案：需找安卓开发，修改安卓客户端，禁止app继承手机所设置的大小。<br>  7 安卓手机的分水岭4.0-4.3， 4.4</p>\n<h3 id=\"APP调试小结\"><a href=\"#APP调试小结\" class=\"headerlink\" title=\"APP调试小结\"></a>APP调试小结</h3><p>  1 很蠢很方便的方法: alert<br>  2 原生打debug包，然后将手机设置为允许调试状态，那么安卓可以通过<code>chrome://inspect/#devices</code>查看手机上的页面<br>  3 ios有mac就比较方便了，可以在<code>Safari</code>上找到相应的手机，然后找到相应的app<br>  4 比较方便的还是使用<a href=\"https://www.npmjs.com/package/vconsole\" target=\"_blank\" rel=\"noopener\">vConsole</a><br>  使用: 因入库，实例化对象，那么手机手机上就会出现一个悬浮按钮，点击可看一些日志</p>\n<h3 id=\"项目调试遇到的坑\"><a href=\"#项目调试遇到的坑\" class=\"headerlink\" title=\"项目调试遇到的坑\"></a>项目调试遇到的坑</h3><p>  遇到一些网址打不开，或者一些开发的服务连不上，或者一些配置信息没有读到，可以能是一下原因，哭<br>  1 网址不能访问可能是开了翻墙软件<br>  2 开发的服务ping不到可能是开了防火墙<br>  3 node的配置文件死活读不到，可能是文件读错了，可以通过打印信息看一些日志。</p>\n<h3 id=\"redux学习总结\"><a href=\"#redux学习总结\" class=\"headerlink\" title=\"redux学习总结\"></a><a href=\"https://lvsally.github.io/2018/02/01/redux/\" target=\"_blank\" rel=\"noopener\">redux学习总结</a></h3><h3 id=\"单页面思考模块切换\"><a href=\"#单页面思考模块切换\" class=\"headerlink\" title=\"单页面思考模块切换\"></a>单页面思考模块切换</h3><p>  江海：spa+f7，增加了view的概念，可以方便模块切换时保存模块的状态，拥有自己的路由和页面跳转方法<br>  浙商：spa+react 想保存某些模块的内容可能只能存在缓存中（利用闭包）<br>  手淘分享，模块切换的问题多是放在原生解决</p>\n<h3 id=\"开屏广告实现方案\"><a href=\"#开屏广告实现方案\" class=\"headerlink\" title=\"开屏广告实现方案\"></a>开屏广告实现方案</h3><p>  开屏广告实现方案：由于h5接口获取和展示页面可能会导致页面一段时间内白屏，因此放在原生处理，利用客户端缓存上一次的广告页，那么展示的也是上一次的广告</p>\n<h3 id=\"第三方app解决方案\"><a href=\"#第三方app解决方案\" class=\"headerlink\" title=\"第三方app解决方案\"></a>第三方app解决方案</h3><p>  涉及第三方网站和我们app有交互，放弃使用iframe，使用h5+原生，其中原生通过新打开一个webview展示第三方，其中返回我的的页面的时候考虑两种情况： 1 直接关闭新的webview，那么再次进入第三方页面时的页面状态将不会保存。 2 隐藏新的webview，原生端认为实现起来比较麻烦，不能和其他项目统一处理</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"react项目，ios光标问题\"><a href=\"#react项目，ios光标问题\" class=\"headerlink\" title=\"react项目，ios光标问题\"></a>react项目，ios光标问题</h3><p>  重现这个问题：在react官网上下载appdome, 随便添加一个input，在手机app或者Safari上操作，先让input <code>focus</code>，然后点击其他元素（包括按钮之类的元素），光标不会消失<br>  最终知道是react框架的问题，框架中在<code>document上绑定了blur</code>，导致的<br>  解决方案<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;document.addEventListener(&apos;touchstart&apos;,function(e)&#123;(document.activeElement &amp;&amp; document.activeElement != e.target) &amp;&amp; document.activeElement.blur();&#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>  <a href=\"https://developer.apple.com/library/content/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html\" target=\"_blank\" rel=\"noopener\">参考文件</a></p>\n<h3 id=\"光标问题2\"><a href=\"#光标问题2\" class=\"headerlink\" title=\"光标问题2\"></a>光标问题2</h3><p>  使用absolute代替了fix解决了顶部固定问题，然而h5还是逃不过一些致命的问题，比如一个页面中存在输入框，ios的键盘又占据页面的一些空间，页面就会出现滚动条，而这种控制已经超越了h5，让我不禁想起那些追求完美的企业对于这种表单是不是直接使用原生解决了</p>\n<h3 id=\"写了一个自己的polyfill\"><a href=\"#写了一个自己的polyfill\" class=\"headerlink\" title=\"写了一个自己的polyfill\"></a>写了一个自己的polyfill</h3><p>  1 将相应的polyfill方法放入自执行的方法中（可以来自mdn或者github）(function() {})()<br>  2 在页面刚开始的时候引入 import “polyfill”;</p>\n<h3 id=\"处理class\"><a href=\"#处理class\" class=\"headerlink\" title=\"处理class\"></a>处理class</h3><p>  1 classList，提供了add、remove、toggle以及contains等方法</p>\n<p>  2<br>  var classVal = document.getElementById(“id”).getAttribute(“class”);</p>\n<p>  //删除的话<br>  classVal = classVal.replace(“someClassName”,””);<br>  document.getElementById(“id”).setAttribute(“class”,classVal );</p>\n<p>  //添加的话<br>  classVal = classVal.concat(“ someClassName”);<br>  document.getElementById(“id”).setAttribute(“class”,classVal );</p>\n<p>  //替换的话<br>  classVal = classVal.replace(“someClassName”,”otherClassName”);</p>\n<h3 id=\"展开运算符和剩余运算符\"><a href=\"#展开运算符和剩余运算符\" class=\"headerlink\" title=\"展开运算符和剩余运算符\"></a>展开运算符和剩余运算符</h3><p>  <code>剩余运算符</code><br>  剩余运算符要命名个变量名称的，可以用在函数参数，还有 解构赋值上{a,b,…obj}= {a:1,b:2,c:3,d:4}<br>  <code>展开运算符</code><br>  剩余参数语法允许我们将一个不定数量的参数表示为一个数组。<br>  扩展语法允许一个表达式在期望多个参数（用于函数调用）或多个元素（用于数组字面量）或多个变量（用于解构赋值）的位置扩展。</p>\n<p>  举个栗子<br>  <myhead name=\"{name}\" phone=\"{tel}\" image=\"{image}\" {...this.props}><br>  {…this.props}使用了展开运算符，会把this.props中的属性展开。<br>  {}是jsx识别js使用<br>  name={name} phone={tel} image={image} {…this.props}将作为属性传给MyHead</myhead></p>\n<h3 id=\"安卓手机一些兼容性问题总结及扩展\"><a href=\"#安卓手机一些兼容性问题总结及扩展\" class=\"headerlink\" title=\"安卓手机一些兼容性问题总结及扩展\"></a>安卓手机一些兼容性问题总结及扩展</h3><p>  1 webview 相当于一个浏览器<br>  2 a 标签 <code>_blank</code>之类的客户端可以定义一些协议去做特殊解析*<br>  3 android4.4部分flex， svg, canvas属性不支持<br>  4 file浏览器支持，但是部分webview包不支持<br>  5 新版本的chrome不支持window.jtoJHandle，需要判断这个属性是否存在<br>  6 安卓机型下，用户设置整个手机字体大小时，我们app内字体大小受影响，导致页面样式错乱。<br>  原因：我们app的字体大小继承到手机设置的字体大小。<br>  解决方案：需找安卓开发，修改安卓客户端，禁止app继承手机所设置的大小。<br>  7 安卓手机的分水岭4.0-4.3， 4.4</p>\n<h3 id=\"APP调试小结\"><a href=\"#APP调试小结\" class=\"headerlink\" title=\"APP调试小结\"></a>APP调试小结</h3><p>  1 很蠢很方便的方法: alert<br>  2 原生打debug包，然后将手机设置为允许调试状态，那么安卓可以通过<code>chrome://inspect/#devices</code>查看手机上的页面<br>  3 ios有mac就比较方便了，可以在<code>Safari</code>上找到相应的手机，然后找到相应的app<br>  4 比较方便的还是使用<a href=\"https://www.npmjs.com/package/vconsole\" target=\"_blank\" rel=\"noopener\">vConsole</a><br>  使用: 因入库，实例化对象，那么手机手机上就会出现一个悬浮按钮，点击可看一些日志</p>\n<h3 id=\"项目调试遇到的坑\"><a href=\"#项目调试遇到的坑\" class=\"headerlink\" title=\"项目调试遇到的坑\"></a>项目调试遇到的坑</h3><p>  遇到一些网址打不开，或者一些开发的服务连不上，或者一些配置信息没有读到，可以能是一下原因，哭<br>  1 网址不能访问可能是开了翻墙软件<br>  2 开发的服务ping不到可能是开了防火墙<br>  3 node的配置文件死活读不到，可能是文件读错了，可以通过打印信息看一些日志。</p>\n<h3 id=\"redux学习总结\"><a href=\"#redux学习总结\" class=\"headerlink\" title=\"redux学习总结\"></a><a href=\"https://lvsally.github.io/2018/02/01/redux/\" target=\"_blank\" rel=\"noopener\">redux学习总结</a></h3><h3 id=\"单页面思考模块切换\"><a href=\"#单页面思考模块切换\" class=\"headerlink\" title=\"单页面思考模块切换\"></a>单页面思考模块切换</h3><p>  江海：spa+f7，增加了view的概念，可以方便模块切换时保存模块的状态，拥有自己的路由和页面跳转方法<br>  浙商：spa+react 想保存某些模块的内容可能只能存在缓存中（利用闭包）<br>  手淘分享，模块切换的问题多是放在原生解决</p>\n<h3 id=\"开屏广告实现方案\"><a href=\"#开屏广告实现方案\" class=\"headerlink\" title=\"开屏广告实现方案\"></a>开屏广告实现方案</h3><p>  开屏广告实现方案：由于h5接口获取和展示页面可能会导致页面一段时间内白屏，因此放在原生处理，利用客户端缓存上一次的广告页，那么展示的也是上一次的广告</p>\n<h3 id=\"第三方app解决方案\"><a href=\"#第三方app解决方案\" class=\"headerlink\" title=\"第三方app解决方案\"></a>第三方app解决方案</h3><p>  涉及第三方网站和我们app有交互，放弃使用iframe，使用h5+原生，其中原生通过新打开一个webview展示第三方，其中返回我的的页面的时候考虑两种情况： 1 直接关闭新的webview，那么再次进入第三方页面时的页面状态将不会保存。 2 隐藏新的webview，原生端认为实现起来比较麻烦，不能和其他项目统一处理</p>\n"},{"title":"this的工作原理","date":"2017-10-10T17:34:38.000Z","_content":"this有一下五种指向\n1 全局范围内的this，指向全局对象\n2 function中的this，指向全局对象\n3 方法中的this,指向当前对象\n4 通过new关键字生成的，指向新生成的对象\n5 通过call, apply, bind方法时，函数的this指向第一个参数\n\n[参考页面，js秘密花园](http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this)\n","source":"_posts/this的工作原理.md","raw":"---\ntitle: this的工作原理\ndate: 2017-10-10 13:34:38\ncategories: js\ntags: js基础\n---\nthis有一下五种指向\n1 全局范围内的this，指向全局对象\n2 function中的this，指向全局对象\n3 方法中的this,指向当前对象\n4 通过new关键字生成的，指向新生成的对象\n5 通过call, apply, bind方法时，函数的this指向第一个参数\n\n[参考页面，js秘密花园](http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this)\n","slug":"this的工作原理","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3w000uzs8qi4nsaas7","content":"<p>this有一下五种指向<br>1 全局范围内的this，指向全局对象<br>2 function中的this，指向全局对象<br>3 方法中的this,指向当前对象<br>4 通过new关键字生成的，指向新生成的对象<br>5 通过call, apply, bind方法时，函数的this指向第一个参数</p>\n<p><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this\" target=\"_blank\" rel=\"noopener\">参考页面，js秘密花园</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>this有一下五种指向<br>1 全局范围内的this，指向全局对象<br>2 function中的this，指向全局对象<br>3 方法中的this,指向当前对象<br>4 通过new关键字生成的，指向新生成的对象<br>5 通过call, apply, bind方法时，函数的this指向第一个参数</p>\n<p><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this\" target=\"_blank\" rel=\"noopener\">参考页面，js秘密花园</a></p>\n"},{"title":"redux","date":"2018-02-01T15:53:41.000Z","_content":">redux一直没有总结,去看中间件的源码看得更是晕乎乎的，下面的总结是站在大牛的肩膀上看到的远方。\n\n## [Redux](https://redux.js.org/)\n  redux说白了就是一个保存全局变量的东西。当一个项目需要处理一个比较复杂的数据流的时候，可能就会出现各种状态管理工具，redux就是其中之一。\n  可以将redux理解为保存一个可供外部读取和修改的私有变量，利用了闭包的特性。在闭包函数中提供了一些方法：`获取`，`修改`，`订阅更新`  \n\n## [React-Redux](https://github.com/reactjs/react-redux)\n  redux库是独立存在的，在不是react的项目也可以使用，在react使用redux需要引入React-Redux， React-Redux提供了两个重要的功能： <Provider/>, connect()\n  `<Provider/>`接受一个 store 作为 props，它是整个 Redux 应用的顶层组件\n  `connect()` 提供了在整个 React 应用的任意组件中获 取 store 中数据的功能。子组件通过HOC建立与顶层props.store的联系，进而获取数据、修改数据、更新UI。\n\n## [HOC](https://reactjs.org/docs/higher-order-components.html)\n  需要使用一些高级的功能，函数中会有高阶函数，react中也存在高阶组件。高阶组件的实现方式通常分成下面两种：\n  `属性代理`（props proxy）。高阶组件通过被包裹的 React 组件来操作 props。（redux的connect的实现方式）\n  `反向继承`（inheritance inversion）。高阶组件继承于被包裹的 React 组件。\n\n## [Context](https://reactjs.org/docs/context.html)\n  哈哈，把Context比作穿越空间的虫洞很有意思。[React中的“虫洞”](https://segmentfault.com/a/1190000004636213)\n  Context就像javascript中的全局变量，只有真正全局的东西才适合放在context中。\n  比如：`当前用户信息`、 `flux、redux的store` 、`session级别信息（语言，主题等）`\n\n## redux使用场景\n  1 不同组件之间期望不用通过组件代码通信\n  2 复杂数据流存储\n  3 ...(想作为全局数据保存的数据)\n\n## 消息模块redux的使用\n  >消息模块的使用场景\n  由于消息是根据socket实时推送，需要对于下面的数据进行修改。\n  [\n    {name: '', log: '', readMum: ''},\n    {name: '', log: '', readMum: ''},\n    {name: '', log: '', readMum: ''}\n  ]\n  那么可能用到： 数据的获取，修改，渲染\n\n  ### 定义action\n    ```\n    // 获取消息菜单\n    let MESSAGES = [];\n    export function getMsgMenu(menuData, type) {\n      if (type === 0) {\n        // 第一次请求接口加载数据\n        MESSAGES = menuData;\n      } else if (type === 1) {\n        // websocket推送\n        // 处理数据\n        const newMsgType = menuData.type;\n        const newMsgTypeUnReadNum = menuData.num;\n        let breakForLoop = false;\n        for (let i = 0; i < MESSAGES.length; i++) {\n          for (let j = 0; j < MESSAGES[i].childList.length; j++) {\n            if (MESSAGES[i].childList[j].type === newMsgType) {\n              MESSAGES[i].childList[j].unReadNum = newMsgTypeUnReadNum;\n              breakForLoop = true;\n              break;\n            }\n          }\n          if (breakForLoop) break;\n        }\n      } else if (type === 2) {\n        // 点击某一类消息时，把未读消息数置 0\n        // 此时第一个参数为消息类型\n        let breakForLoop = false;\n        for (let i = 0; i < MESSAGES.length; i++) {\n          for (let j = 0; j < MESSAGES[i].childList.length; j++) {\n            if (MESSAGES[i].childList[j].type === menuData) {\n              MESSAGES[i].childList[j].unReadNum = '0';\n              breakForLoop = true;\n              break;\n            }\n          }\n          if (breakForLoop) break;\n        }\n      }\n      return {\n        type: MSG_MENU,\n        payload: MESSAGES\n      };\n    }\n    ```\n  ### 定义reducer\n    ```\n    const MSG_MENU = 'MSG_MENU';\n\n    export default function (state = [], action) {\n      switch (action.type) {\n        case MSG_MENU:\n          return action.payload;\n        default:\n          return state;\n      }\n    }\n    ```\n  ### combineReducers\n    ```\n    import { combineReducers } from 'redux';\n    import appMenuReducer from './app-menu-reducer';\n    import msgMenuReducer from './msg-menu-reducer';\n\n    const rootReducer = combineReducers({\n      appMenu: appMenuReducer,\n      msgMenu: msgMenuReducer\n    });\n\n    export default rootReducer;\n    ```\n  ### 在根元素的位置引入Provider\n    ```\n    const createStoreWithMiddleware = applyMiddleware(promise)(createStore);\n\n    ReactDOM.render(\n      <Provider store={createStoreWithMiddleware(reducers)}>\n        <RouterMap />\n      </Provider>,\n      document.getElementById('root')\n    );\n    ```\n  ### 在组件中使用redux\n    ```\n    import { connect } from 'react-redux';\n    import { bindActionCreators } from 'redux';\n    import { getMsgMenu } from '../actions/index'; // action\n\n    componentDidMount() {\n      // 修改和获取都是通过props完成\n      if (this.props.msgMenu.length === 0) { // 获取store里的数值\n        axios.get('/api/snp/CRH-SNP5103').then((res) => {\n          this.props.getMsgMenu(res.resultList, 0); // dispatch 一个action\n        });\n      }\n    }\n\n    function mapStateToProps({ msgMenu }) {\n      return {\n        msgMenu\n      };\n    }\n\n    function mapDispatchToProps(dispatch) {\n      return bindActionCreators({ getMsgMenu }, dispatch);\n    }\n    // 通过HOC使SpecialMsg具有msgMenu, getMsgMenu(props);\n    export default connect(mapStateToProps, mapDispatchToProps)(SpecialMsg);\n    ```\n\n## 写在最后\n  1 使用redux\n  2 了解redux原理\n  3 了解各个知识点\n  4 进阶了解中间件\n  5 不禁感慨学无止境,,\n\n## 参考资料\n[参考1](https://zhuanlan.zhihu.com/p/26485702)\n[参考2](https://segmentfault.com/a/1190000008648319)\n","source":"_posts/redux.md","raw":"---\ntitle: redux\ndate: 2018-02-01 10:53:41\ncategories: react\ntags: redux\n---\n>redux一直没有总结,去看中间件的源码看得更是晕乎乎的，下面的总结是站在大牛的肩膀上看到的远方。\n\n## [Redux](https://redux.js.org/)\n  redux说白了就是一个保存全局变量的东西。当一个项目需要处理一个比较复杂的数据流的时候，可能就会出现各种状态管理工具，redux就是其中之一。\n  可以将redux理解为保存一个可供外部读取和修改的私有变量，利用了闭包的特性。在闭包函数中提供了一些方法：`获取`，`修改`，`订阅更新`  \n\n## [React-Redux](https://github.com/reactjs/react-redux)\n  redux库是独立存在的，在不是react的项目也可以使用，在react使用redux需要引入React-Redux， React-Redux提供了两个重要的功能： <Provider/>, connect()\n  `<Provider/>`接受一个 store 作为 props，它是整个 Redux 应用的顶层组件\n  `connect()` 提供了在整个 React 应用的任意组件中获 取 store 中数据的功能。子组件通过HOC建立与顶层props.store的联系，进而获取数据、修改数据、更新UI。\n\n## [HOC](https://reactjs.org/docs/higher-order-components.html)\n  需要使用一些高级的功能，函数中会有高阶函数，react中也存在高阶组件。高阶组件的实现方式通常分成下面两种：\n  `属性代理`（props proxy）。高阶组件通过被包裹的 React 组件来操作 props。（redux的connect的实现方式）\n  `反向继承`（inheritance inversion）。高阶组件继承于被包裹的 React 组件。\n\n## [Context](https://reactjs.org/docs/context.html)\n  哈哈，把Context比作穿越空间的虫洞很有意思。[React中的“虫洞”](https://segmentfault.com/a/1190000004636213)\n  Context就像javascript中的全局变量，只有真正全局的东西才适合放在context中。\n  比如：`当前用户信息`、 `flux、redux的store` 、`session级别信息（语言，主题等）`\n\n## redux使用场景\n  1 不同组件之间期望不用通过组件代码通信\n  2 复杂数据流存储\n  3 ...(想作为全局数据保存的数据)\n\n## 消息模块redux的使用\n  >消息模块的使用场景\n  由于消息是根据socket实时推送，需要对于下面的数据进行修改。\n  [\n    {name: '', log: '', readMum: ''},\n    {name: '', log: '', readMum: ''},\n    {name: '', log: '', readMum: ''}\n  ]\n  那么可能用到： 数据的获取，修改，渲染\n\n  ### 定义action\n    ```\n    // 获取消息菜单\n    let MESSAGES = [];\n    export function getMsgMenu(menuData, type) {\n      if (type === 0) {\n        // 第一次请求接口加载数据\n        MESSAGES = menuData;\n      } else if (type === 1) {\n        // websocket推送\n        // 处理数据\n        const newMsgType = menuData.type;\n        const newMsgTypeUnReadNum = menuData.num;\n        let breakForLoop = false;\n        for (let i = 0; i < MESSAGES.length; i++) {\n          for (let j = 0; j < MESSAGES[i].childList.length; j++) {\n            if (MESSAGES[i].childList[j].type === newMsgType) {\n              MESSAGES[i].childList[j].unReadNum = newMsgTypeUnReadNum;\n              breakForLoop = true;\n              break;\n            }\n          }\n          if (breakForLoop) break;\n        }\n      } else if (type === 2) {\n        // 点击某一类消息时，把未读消息数置 0\n        // 此时第一个参数为消息类型\n        let breakForLoop = false;\n        for (let i = 0; i < MESSAGES.length; i++) {\n          for (let j = 0; j < MESSAGES[i].childList.length; j++) {\n            if (MESSAGES[i].childList[j].type === menuData) {\n              MESSAGES[i].childList[j].unReadNum = '0';\n              breakForLoop = true;\n              break;\n            }\n          }\n          if (breakForLoop) break;\n        }\n      }\n      return {\n        type: MSG_MENU,\n        payload: MESSAGES\n      };\n    }\n    ```\n  ### 定义reducer\n    ```\n    const MSG_MENU = 'MSG_MENU';\n\n    export default function (state = [], action) {\n      switch (action.type) {\n        case MSG_MENU:\n          return action.payload;\n        default:\n          return state;\n      }\n    }\n    ```\n  ### combineReducers\n    ```\n    import { combineReducers } from 'redux';\n    import appMenuReducer from './app-menu-reducer';\n    import msgMenuReducer from './msg-menu-reducer';\n\n    const rootReducer = combineReducers({\n      appMenu: appMenuReducer,\n      msgMenu: msgMenuReducer\n    });\n\n    export default rootReducer;\n    ```\n  ### 在根元素的位置引入Provider\n    ```\n    const createStoreWithMiddleware = applyMiddleware(promise)(createStore);\n\n    ReactDOM.render(\n      <Provider store={createStoreWithMiddleware(reducers)}>\n        <RouterMap />\n      </Provider>,\n      document.getElementById('root')\n    );\n    ```\n  ### 在组件中使用redux\n    ```\n    import { connect } from 'react-redux';\n    import { bindActionCreators } from 'redux';\n    import { getMsgMenu } from '../actions/index'; // action\n\n    componentDidMount() {\n      // 修改和获取都是通过props完成\n      if (this.props.msgMenu.length === 0) { // 获取store里的数值\n        axios.get('/api/snp/CRH-SNP5103').then((res) => {\n          this.props.getMsgMenu(res.resultList, 0); // dispatch 一个action\n        });\n      }\n    }\n\n    function mapStateToProps({ msgMenu }) {\n      return {\n        msgMenu\n      };\n    }\n\n    function mapDispatchToProps(dispatch) {\n      return bindActionCreators({ getMsgMenu }, dispatch);\n    }\n    // 通过HOC使SpecialMsg具有msgMenu, getMsgMenu(props);\n    export default connect(mapStateToProps, mapDispatchToProps)(SpecialMsg);\n    ```\n\n## 写在最后\n  1 使用redux\n  2 了解redux原理\n  3 了解各个知识点\n  4 进阶了解中间件\n  5 不禁感慨学无止境,,\n\n## 参考资料\n[参考1](https://zhuanlan.zhihu.com/p/26485702)\n[参考2](https://segmentfault.com/a/1190000008648319)\n","slug":"redux","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3w000xzs8qba8xt8xj","content":"<blockquote>\n<p>redux一直没有总结,去看中间件的源码看得更是晕乎乎的，下面的总结是站在大牛的肩膀上看到的远方。</p>\n</blockquote>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux</a></h2><p>  redux说白了就是一个保存全局变量的东西。当一个项目需要处理一个比较复杂的数据流的时候，可能就会出现各种状态管理工具，redux就是其中之一。<br>  可以将redux理解为保存一个可供外部读取和修改的私有变量，利用了闭包的特性。在闭包函数中提供了一些方法：<code>获取</code>，<code>修改</code>，<code>订阅更新</code>  </p>\n<h2 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a><a href=\"https://github.com/reactjs/react-redux\" target=\"_blank\" rel=\"noopener\">React-Redux</a></h2><p>  redux库是独立存在的，在不是react的项目也可以使用，在react使用redux需要引入React-Redux， React-Redux提供了两个重要的功能： <provider>, connect()<br>  <code>&lt;Provider/&gt;</code>接受一个 store 作为 props，它是整个 Redux 应用的顶层组件<br>  <code>connect()</code> 提供了在整个 React 应用的任意组件中获 取 store 中数据的功能。子组件通过HOC建立与顶层props.store的联系，进而获取数据、修改数据、更新UI。</provider></p>\n<h2 id=\"HOC\"><a href=\"#HOC\" class=\"headerlink\" title=\"HOC\"></a><a href=\"https://reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">HOC</a></h2><p>  需要使用一些高级的功能，函数中会有高阶函数，react中也存在高阶组件。高阶组件的实现方式通常分成下面两种：<br>  <code>属性代理</code>（props proxy）。高阶组件通过被包裹的 React 组件来操作 props。（redux的connect的实现方式）<br>  <code>反向继承</code>（inheritance inversion）。高阶组件继承于被包裹的 React 组件。</p>\n<h2 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a><a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener\">Context</a></h2><p>  哈哈，把Context比作穿越空间的虫洞很有意思。<a href=\"https://segmentfault.com/a/1190000004636213\" target=\"_blank\" rel=\"noopener\">React中的“虫洞”</a><br>  Context就像javascript中的全局变量，只有真正全局的东西才适合放在context中。<br>  比如：<code>当前用户信息</code>、 <code>flux、redux的store</code> 、<code>session级别信息（语言，主题等）</code></p>\n<h2 id=\"redux使用场景\"><a href=\"#redux使用场景\" class=\"headerlink\" title=\"redux使用场景\"></a>redux使用场景</h2><p>  1 不同组件之间期望不用通过组件代码通信<br>  2 复杂数据流存储<br>  3 …(想作为全局数据保存的数据)</p>\n<h2 id=\"消息模块redux的使用\"><a href=\"#消息模块redux的使用\" class=\"headerlink\" title=\"消息模块redux的使用\"></a>消息模块redux的使用</h2><blockquote>\n<p>消息模块的使用场景<br>  由于消息是根据socket实时推送，需要对于下面的数据进行修改。<br>  [<br>    {name: ‘’, log: ‘’, readMum: ‘’},<br>    {name: ‘’, log: ‘’, readMum: ‘’},<br>    {name: ‘’, log: ‘’, readMum: ‘’}<br>  ]<br>  那么可能用到： 数据的获取，修改，渲染</p>\n</blockquote>\n<h3 id=\"定义action\"><a href=\"#定义action\" class=\"headerlink\" title=\"定义action\"></a>定义action</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取消息菜单</span><br><span class=\"line\">let MESSAGES = [];</span><br><span class=\"line\">export function getMsgMenu(menuData, type) &#123;</span><br><span class=\"line\">  if (type === 0) &#123;</span><br><span class=\"line\">    // 第一次请求接口加载数据</span><br><span class=\"line\">    MESSAGES = menuData;</span><br><span class=\"line\">  &#125; else if (type === 1) &#123;</span><br><span class=\"line\">    // websocket推送</span><br><span class=\"line\">    // 处理数据</span><br><span class=\"line\">    const newMsgType = menuData.type;</span><br><span class=\"line\">    const newMsgTypeUnReadNum = menuData.num;</span><br><span class=\"line\">    let breakForLoop = false;</span><br><span class=\"line\">    for (let i = 0; i &lt; MESSAGES.length; i++) &#123;</span><br><span class=\"line\">      for (let j = 0; j &lt; MESSAGES[i].childList.length; j++) &#123;</span><br><span class=\"line\">        if (MESSAGES[i].childList[j].type === newMsgType) &#123;</span><br><span class=\"line\">          MESSAGES[i].childList[j].unReadNum = newMsgTypeUnReadNum;</span><br><span class=\"line\">          breakForLoop = true;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (breakForLoop) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else if (type === 2) &#123;</span><br><span class=\"line\">    // 点击某一类消息时，把未读消息数置 0</span><br><span class=\"line\">    // 此时第一个参数为消息类型</span><br><span class=\"line\">    let breakForLoop = false;</span><br><span class=\"line\">    for (let i = 0; i &lt; MESSAGES.length; i++) &#123;</span><br><span class=\"line\">      for (let j = 0; j &lt; MESSAGES[i].childList.length; j++) &#123;</span><br><span class=\"line\">        if (MESSAGES[i].childList[j].type === menuData) &#123;</span><br><span class=\"line\">          MESSAGES[i].childList[j].unReadNum = &apos;0&apos;;</span><br><span class=\"line\">          breakForLoop = true;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (breakForLoop) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    type: MSG_MENU,</span><br><span class=\"line\">    payload: MESSAGES</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"定义reducer\"><a href=\"#定义reducer\" class=\"headerlink\" title=\"定义reducer\"></a>定义reducer</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MSG_MENU = &apos;MSG_MENU&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function (state = [], action) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case MSG_MENU:</span><br><span class=\"line\">      return action.payload;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"combineReducers\"><a href=\"#combineReducers\" class=\"headerlink\" title=\"combineReducers\"></a>combineReducers</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; combineReducers &#125; from &apos;redux&apos;;</span><br><span class=\"line\">import appMenuReducer from &apos;./app-menu-reducer&apos;;</span><br><span class=\"line\">import msgMenuReducer from &apos;./msg-menu-reducer&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const rootReducer = combineReducers(&#123;</span><br><span class=\"line\">  appMenu: appMenuReducer,</span><br><span class=\"line\">  msgMenu: msgMenuReducer</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">export default rootReducer;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"在根元素的位置引入Provider\"><a href=\"#在根元素的位置引入Provider\" class=\"headerlink\" title=\"在根元素的位置引入Provider\"></a>在根元素的位置引入Provider</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const createStoreWithMiddleware = applyMiddleware(promise)(createStore);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Provider store=&#123;createStoreWithMiddleware(reducers)&#125;&gt;</span><br><span class=\"line\">    &lt;RouterMap /&gt;</span><br><span class=\"line\">  &lt;/Provider&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;root&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"在组件中使用redux\"><a href=\"#在组件中使用redux\" class=\"headerlink\" title=\"在组件中使用redux\"></a>在组件中使用redux</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class=\"line\">import &#123; bindActionCreators &#125; from &apos;redux&apos;;</span><br><span class=\"line\">import &#123; getMsgMenu &#125; from &apos;../actions/index&apos;; // action</span><br><span class=\"line\"></span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  // 修改和获取都是通过props完成</span><br><span class=\"line\">  if (this.props.msgMenu.length === 0) &#123; // 获取store里的数值</span><br><span class=\"line\">    axios.get(&apos;/api/snp/CRH-SNP5103&apos;).then((res) =&gt; &#123;</span><br><span class=\"line\">      this.props.getMsgMenu(res.resultList, 0); // dispatch 一个action</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function mapStateToProps(&#123; msgMenu &#125;) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    msgMenu</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function mapDispatchToProps(dispatch) &#123;</span><br><span class=\"line\">  return bindActionCreators(&#123; getMsgMenu &#125;, dispatch);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 通过HOC使SpecialMsg具有msgMenu, getMsgMenu(props);</span><br><span class=\"line\">export default connect(mapStateToProps, mapDispatchToProps)(SpecialMsg);</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>  1 使用redux<br>  2 了解redux原理<br>  3 了解各个知识点<br>  4 进阶了解中间件<br>  5 不禁感慨学无止境,,</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://zhuanlan.zhihu.com/p/26485702\" target=\"_blank\" rel=\"noopener\">参考1</a><br><a href=\"https://segmentfault.com/a/1190000008648319\" target=\"_blank\" rel=\"noopener\">参考2</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>redux一直没有总结,去看中间件的源码看得更是晕乎乎的，下面的总结是站在大牛的肩膀上看到的远方。</p>\n</blockquote>\n<h2 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a><a href=\"https://redux.js.org/\" target=\"_blank\" rel=\"noopener\">Redux</a></h2><p>  redux说白了就是一个保存全局变量的东西。当一个项目需要处理一个比较复杂的数据流的时候，可能就会出现各种状态管理工具，redux就是其中之一。<br>  可以将redux理解为保存一个可供外部读取和修改的私有变量，利用了闭包的特性。在闭包函数中提供了一些方法：<code>获取</code>，<code>修改</code>，<code>订阅更新</code>  </p>\n<h2 id=\"React-Redux\"><a href=\"#React-Redux\" class=\"headerlink\" title=\"React-Redux\"></a><a href=\"https://github.com/reactjs/react-redux\" target=\"_blank\" rel=\"noopener\">React-Redux</a></h2><p>  redux库是独立存在的，在不是react的项目也可以使用，在react使用redux需要引入React-Redux， React-Redux提供了两个重要的功能： <provider>, connect()<br>  <code>&lt;Provider/&gt;</code>接受一个 store 作为 props，它是整个 Redux 应用的顶层组件<br>  <code>connect()</code> 提供了在整个 React 应用的任意组件中获 取 store 中数据的功能。子组件通过HOC建立与顶层props.store的联系，进而获取数据、修改数据、更新UI。</provider></p>\n<h2 id=\"HOC\"><a href=\"#HOC\" class=\"headerlink\" title=\"HOC\"></a><a href=\"https://reactjs.org/docs/higher-order-components.html\" target=\"_blank\" rel=\"noopener\">HOC</a></h2><p>  需要使用一些高级的功能，函数中会有高阶函数，react中也存在高阶组件。高阶组件的实现方式通常分成下面两种：<br>  <code>属性代理</code>（props proxy）。高阶组件通过被包裹的 React 组件来操作 props。（redux的connect的实现方式）<br>  <code>反向继承</code>（inheritance inversion）。高阶组件继承于被包裹的 React 组件。</p>\n<h2 id=\"Context\"><a href=\"#Context\" class=\"headerlink\" title=\"Context\"></a><a href=\"https://reactjs.org/docs/context.html\" target=\"_blank\" rel=\"noopener\">Context</a></h2><p>  哈哈，把Context比作穿越空间的虫洞很有意思。<a href=\"https://segmentfault.com/a/1190000004636213\" target=\"_blank\" rel=\"noopener\">React中的“虫洞”</a><br>  Context就像javascript中的全局变量，只有真正全局的东西才适合放在context中。<br>  比如：<code>当前用户信息</code>、 <code>flux、redux的store</code> 、<code>session级别信息（语言，主题等）</code></p>\n<h2 id=\"redux使用场景\"><a href=\"#redux使用场景\" class=\"headerlink\" title=\"redux使用场景\"></a>redux使用场景</h2><p>  1 不同组件之间期望不用通过组件代码通信<br>  2 复杂数据流存储<br>  3 …(想作为全局数据保存的数据)</p>\n<h2 id=\"消息模块redux的使用\"><a href=\"#消息模块redux的使用\" class=\"headerlink\" title=\"消息模块redux的使用\"></a>消息模块redux的使用</h2><blockquote>\n<p>消息模块的使用场景<br>  由于消息是根据socket实时推送，需要对于下面的数据进行修改。<br>  [<br>    {name: ‘’, log: ‘’, readMum: ‘’},<br>    {name: ‘’, log: ‘’, readMum: ‘’},<br>    {name: ‘’, log: ‘’, readMum: ‘’}<br>  ]<br>  那么可能用到： 数据的获取，修改，渲染</p>\n</blockquote>\n<h3 id=\"定义action\"><a href=\"#定义action\" class=\"headerlink\" title=\"定义action\"></a>定义action</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取消息菜单</span><br><span class=\"line\">let MESSAGES = [];</span><br><span class=\"line\">export function getMsgMenu(menuData, type) &#123;</span><br><span class=\"line\">  if (type === 0) &#123;</span><br><span class=\"line\">    // 第一次请求接口加载数据</span><br><span class=\"line\">    MESSAGES = menuData;</span><br><span class=\"line\">  &#125; else if (type === 1) &#123;</span><br><span class=\"line\">    // websocket推送</span><br><span class=\"line\">    // 处理数据</span><br><span class=\"line\">    const newMsgType = menuData.type;</span><br><span class=\"line\">    const newMsgTypeUnReadNum = menuData.num;</span><br><span class=\"line\">    let breakForLoop = false;</span><br><span class=\"line\">    for (let i = 0; i &lt; MESSAGES.length; i++) &#123;</span><br><span class=\"line\">      for (let j = 0; j &lt; MESSAGES[i].childList.length; j++) &#123;</span><br><span class=\"line\">        if (MESSAGES[i].childList[j].type === newMsgType) &#123;</span><br><span class=\"line\">          MESSAGES[i].childList[j].unReadNum = newMsgTypeUnReadNum;</span><br><span class=\"line\">          breakForLoop = true;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (breakForLoop) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; else if (type === 2) &#123;</span><br><span class=\"line\">    // 点击某一类消息时，把未读消息数置 0</span><br><span class=\"line\">    // 此时第一个参数为消息类型</span><br><span class=\"line\">    let breakForLoop = false;</span><br><span class=\"line\">    for (let i = 0; i &lt; MESSAGES.length; i++) &#123;</span><br><span class=\"line\">      for (let j = 0; j &lt; MESSAGES[i].childList.length; j++) &#123;</span><br><span class=\"line\">        if (MESSAGES[i].childList[j].type === menuData) &#123;</span><br><span class=\"line\">          MESSAGES[i].childList[j].unReadNum = &apos;0&apos;;</span><br><span class=\"line\">          breakForLoop = true;</span><br><span class=\"line\">          break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      if (breakForLoop) break;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    type: MSG_MENU,</span><br><span class=\"line\">    payload: MESSAGES</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"定义reducer\"><a href=\"#定义reducer\" class=\"headerlink\" title=\"定义reducer\"></a>定义reducer</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const MSG_MENU = &apos;MSG_MENU&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">export default function (state = [], action) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case MSG_MENU:</span><br><span class=\"line\">      return action.payload;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"combineReducers\"><a href=\"#combineReducers\" class=\"headerlink\" title=\"combineReducers\"></a>combineReducers</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; combineReducers &#125; from &apos;redux&apos;;</span><br><span class=\"line\">import appMenuReducer from &apos;./app-menu-reducer&apos;;</span><br><span class=\"line\">import msgMenuReducer from &apos;./msg-menu-reducer&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const rootReducer = combineReducers(&#123;</span><br><span class=\"line\">  appMenu: appMenuReducer,</span><br><span class=\"line\">  msgMenu: msgMenuReducer</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">export default rootReducer;</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"在根元素的位置引入Provider\"><a href=\"#在根元素的位置引入Provider\" class=\"headerlink\" title=\"在根元素的位置引入Provider\"></a>在根元素的位置引入Provider</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const createStoreWithMiddleware = applyMiddleware(promise)(createStore);</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;Provider store=&#123;createStoreWithMiddleware(reducers)&#125;&gt;</span><br><span class=\"line\">    &lt;RouterMap /&gt;</span><br><span class=\"line\">  &lt;/Provider&gt;,</span><br><span class=\"line\">  document.getElementById(&apos;root&apos;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</code></pre><h3 id=\"在组件中使用redux\"><a href=\"#在组件中使用redux\" class=\"headerlink\" title=\"在组件中使用redux\"></a>在组件中使用redux</h3><pre><code><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class=\"line\">import &#123; bindActionCreators &#125; from &apos;redux&apos;;</span><br><span class=\"line\">import &#123; getMsgMenu &#125; from &apos;../actions/index&apos;; // action</span><br><span class=\"line\"></span><br><span class=\"line\">componentDidMount() &#123;</span><br><span class=\"line\">  // 修改和获取都是通过props完成</span><br><span class=\"line\">  if (this.props.msgMenu.length === 0) &#123; // 获取store里的数值</span><br><span class=\"line\">    axios.get(&apos;/api/snp/CRH-SNP5103&apos;).then((res) =&gt; &#123;</span><br><span class=\"line\">      this.props.getMsgMenu(res.resultList, 0); // dispatch 一个action</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function mapStateToProps(&#123; msgMenu &#125;) &#123;</span><br><span class=\"line\">  return &#123;</span><br><span class=\"line\">    msgMenu</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function mapDispatchToProps(dispatch) &#123;</span><br><span class=\"line\">  return bindActionCreators(&#123; getMsgMenu &#125;, dispatch);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 通过HOC使SpecialMsg具有msgMenu, getMsgMenu(props);</span><br><span class=\"line\">export default connect(mapStateToProps, mapDispatchToProps)(SpecialMsg);</span><br></pre></td></tr></table></figure>\n</code></pre><h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>  1 使用redux<br>  2 了解redux原理<br>  3 了解各个知识点<br>  4 进阶了解中间件<br>  5 不禁感慨学无止境,,</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://zhuanlan.zhihu.com/p/26485702\" target=\"_blank\" rel=\"noopener\">参考1</a><br><a href=\"https://segmentfault.com/a/1190000008648319\" target=\"_blank\" rel=\"noopener\">参考2</a></p>\n"},{"title":"vue源码阅读1","date":"2018-11-15T15:44:13.000Z","_content":"\n>3-4月前，在丁香园面试那个架构师就问为什么要阅读源码，我们需要阅读源码吗，当时他给我的结论是是不需要阅读源码，在没有目标时无需跟风去阅读源码，那个时候的收获可能也不会多。这些时间断断续续开始了vue的源码阅读之路，觉得阅读源码还是蛮重要的，感觉分为几个维度：\n1 从init开始阅读了解大型成熟框架的结构，对框架有个整体认识\n2 一行行阅读源码的时候好像在玩游戏，主线是必须走的，有些分支感兴趣想去玩一下可以去看一下，说不定会有意外收获\n3 主要查看部分： 响应式，数据驱动...\n\n>这个阶段大多数是在巩固之前的基础知识\n\n## constructorFn\n  将方法按照功能分类放在不同的函数中，执行函数绑定方法，使结构更加清晰\n\n  ```\n  // 构造函数\n  function Vue() {\n    if (!this instanceof Vue) {\n      console.log('必须使用关键字')\n    }\n    this.name  = '__vue'\n    this._init()\n  }\n  // 给构造函数增加属性或方法\n\n  // 直接添加\n  Vue.prototype.testFn = () => {}\n\n  // 调用函数添加\n  initFn(Vue)\n  otherFn(Vue)\n  function initFn(vue) {\n    vue.prototype._init = function() {\n      console.log('init');\n    }\n  }\n  function otherFn(vue) {\n    vue.prototype._other = function() {\n      console.log('ohter')\n    }\n  }\n\n  // 实例化构造函数\n  var vue = new Vue()\n  Vue.prototype.testFn2 = () => {\n    console.log('testFn2')\n  }\n\n  vue._other()\n  vue.testFn2()\n  console.log(vue.hasOwnProperty('name')) // true\n  console.log(vue.hasOwnProperty('testFn')) // false\n  console.log(vue.hasOwnProperty('otherFn')) // false\n  console.log(vue.hasOwnProperty('testFn2')) // false\n  ```\n## defineProperty\n  阅读js对象是，红宝书用了很多页在描述这个属性，然而自己用不到..\n\n  ```\n  function Vue() {}\n\n  // 给构造函数添加属性(添加静态方法)\n\n  Vue.options = Object.create(null) // 没有继承的属性\n  Vue.options._base = '_base'\n\n  // config\n  const config = {\n    opt1: \"opt1\",\n    opt2: \"opt2\"\n  }\n  const configDef = {}\n  configDef.get = () => config\n  Object.defineProperty(Vue, 'config', configDef) // 通过defineProperty细化的定义属性，给构造原函数定义属性\n  // Object.defineProperty(Vue, 'config', { get: () => config }) // 同上\n  console.log(Vue.options)\n  console.log(Vue.config) // 可以访问只读属性config\n  console.log(Vue) // 变了Vue的属性中不会遍历config\n\n  // 通过defineProperty给实例定义属性\n  let vue = new Vue()\n  Object.defineProperty(vue, 'config', { get: () => '实例' })\n  console.log(vue.config)\n  ```\n## cached\n  这个方法目前还不清楚用来做什么..,使用了闭包将数据保存在内存中,`内部函数可以访问定义它们的外部函数的参数和变量（除了this和arguments之外）`\n  ```\n  function cached (fn) {\n    const cache = Object.create(null)\n    return (function cachedFn (str) {\n      console.log(cache)\n      const hit = cache[str]\n      return hit || (cache[str] = fn(str))\n    })\n  }\n\n  const idToTemplate = cached(id => {\n    debugger\n    return id\n  })\n  console.log(idToTemplate(1))\n  console.log(idToTemplate(12))\n  console.log(idToTemplate(123))\n\n  // 内部函数可以访问定义它们的外部函数的参数和变量（除了this和arguments之外）\n  // 如果需要访问对象的name属性的话，就需要显示的定义一个变量that来引用this，而这个变量此时就指向object对象了。\n  ```\n## mount\n  mount没有关注有什么功劳，但是写法很好玩，先是将原始的prototype.$mount赋值给一个变量，然后重新定义改属性并通过call应用之前的功能实现拓展。\n  ```\n  function Vue() {\n    this.name = 'name'\n  }\n  // 定义静态属性，通过Vue.static_pro访问\n  Vue.static_pro = 'static_pro'\n  Vue.prototype.$mount = function() {\n    console.log('old')\n  }\n  const mount = Vue.prototype.$mount\n  Vue.prototype.$mount = function () {\n    console.log(this.name) // 通this访问当前对象的上的属性\n    console.log('new')\n    return mount.call(this)\n  }\n  const vue = new Vue();\n  console.log(vue.$mount())\n\n  // call使用\n  function Product(name, price) {\n    this.name = name;\n    this.price = price;\n  }\n\n  function Food(name, price) {\n    Product.call(this, name, price);\n    this.category = 'food';\n  }\n\n  console.log(new Food('cheese', 5).name);\n\n  // --------------插曲---------------\n  // 重新赋值\n  let test = {\n    a: 1,\n    b: 2\n  }\n  let test1 = test\n  test1 = {\n    c: 3\n  }\n  console.log(test, test1)\n\n  // 修改引用\n  let test = {\n    a: 1,\n    b: 2\n  }\n  let test1 = test\n  test1.c = 3\n  console.log(test, test1)\n  ```\n## performance\n  好玩的属性出体验--window.performance,之前竟然不知道有这么个检测性能的属性\n  ```\n  // ------------mark,measure定义--------------\n  export let mark\n  export let measure\n\n  if (process.env.NODE_ENV !== 'production') {\n    const perf = inBrowser && window.performance\n    /* istanbul ignore if */\n    if (\n      perf &&\n      perf.mark &&\n      perf.measure &&\n      perf.clearMarks &&\n      perf.clearMeasures\n    ) {\n      mark = tag => perf.mark(tag)\n      measure = (name, startTag, endTag) => {\n        perf.measure(name, startTag, endTag)\n        perf.clearMarks(startTag)\n        perf.clearMarks(endTag)\n        perf.clearMeasures(name)\n      }\n    }\n  }\n\n  // ------------mark,measure使用--------------\n  if (template) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      mark('compile')\n    }\n\n    const { render, staticRenderFns } = compileToFunctions(template, {\n      shouldDecodeNewlines,\n      shouldDecodeNewlinesForHref,\n      delimiters: options.delimiters,\n      comments: options.comments\n    }, this)\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      mark('compile end')\n      measure(`vue ${this._name} compile`, 'compile', 'compile end')\n    }\n  }\n  ```\n\n## `_data`同名属性访问器\n  众多技巧只有，通过this可以方便的访问到data中的属性\n  vue实例之所以能访问`_data`中的同名属性，是因为在对象上添加了同名属性, 添加技巧，通过`Object.defineProperty(obj, key, config)`重写get和set方法实现\n  ```\n  const sharedPropertyDefinition = {\n    enumerable: true,\n    configurable: true,\n    get: () => {},\n    set: () => {}\n  }\n  export function proxy (target: Object, sourceKey: string, key: string) {\n    sharedPropertyDefinition.get = function proxyGetter () {\n      return this[sourceKey][key]\n    }\n    sharedPropertyDefinition.set = function proxySetter (val) {\n      this[sourceKey][key] = val\n    }\n    Object.defineProperty(target, key, sharedPropertyDefinition)\n  }\n  ```\n","source":"_posts/vue源码阅读1.md","raw":"---\ntitle: vue源码阅读1\ndate: 2018-11-15 10:44:13\ncategories: js\ntags: vue\n---\n\n>3-4月前，在丁香园面试那个架构师就问为什么要阅读源码，我们需要阅读源码吗，当时他给我的结论是是不需要阅读源码，在没有目标时无需跟风去阅读源码，那个时候的收获可能也不会多。这些时间断断续续开始了vue的源码阅读之路，觉得阅读源码还是蛮重要的，感觉分为几个维度：\n1 从init开始阅读了解大型成熟框架的结构，对框架有个整体认识\n2 一行行阅读源码的时候好像在玩游戏，主线是必须走的，有些分支感兴趣想去玩一下可以去看一下，说不定会有意外收获\n3 主要查看部分： 响应式，数据驱动...\n\n>这个阶段大多数是在巩固之前的基础知识\n\n## constructorFn\n  将方法按照功能分类放在不同的函数中，执行函数绑定方法，使结构更加清晰\n\n  ```\n  // 构造函数\n  function Vue() {\n    if (!this instanceof Vue) {\n      console.log('必须使用关键字')\n    }\n    this.name  = '__vue'\n    this._init()\n  }\n  // 给构造函数增加属性或方法\n\n  // 直接添加\n  Vue.prototype.testFn = () => {}\n\n  // 调用函数添加\n  initFn(Vue)\n  otherFn(Vue)\n  function initFn(vue) {\n    vue.prototype._init = function() {\n      console.log('init');\n    }\n  }\n  function otherFn(vue) {\n    vue.prototype._other = function() {\n      console.log('ohter')\n    }\n  }\n\n  // 实例化构造函数\n  var vue = new Vue()\n  Vue.prototype.testFn2 = () => {\n    console.log('testFn2')\n  }\n\n  vue._other()\n  vue.testFn2()\n  console.log(vue.hasOwnProperty('name')) // true\n  console.log(vue.hasOwnProperty('testFn')) // false\n  console.log(vue.hasOwnProperty('otherFn')) // false\n  console.log(vue.hasOwnProperty('testFn2')) // false\n  ```\n## defineProperty\n  阅读js对象是，红宝书用了很多页在描述这个属性，然而自己用不到..\n\n  ```\n  function Vue() {}\n\n  // 给构造函数添加属性(添加静态方法)\n\n  Vue.options = Object.create(null) // 没有继承的属性\n  Vue.options._base = '_base'\n\n  // config\n  const config = {\n    opt1: \"opt1\",\n    opt2: \"opt2\"\n  }\n  const configDef = {}\n  configDef.get = () => config\n  Object.defineProperty(Vue, 'config', configDef) // 通过defineProperty细化的定义属性，给构造原函数定义属性\n  // Object.defineProperty(Vue, 'config', { get: () => config }) // 同上\n  console.log(Vue.options)\n  console.log(Vue.config) // 可以访问只读属性config\n  console.log(Vue) // 变了Vue的属性中不会遍历config\n\n  // 通过defineProperty给实例定义属性\n  let vue = new Vue()\n  Object.defineProperty(vue, 'config', { get: () => '实例' })\n  console.log(vue.config)\n  ```\n## cached\n  这个方法目前还不清楚用来做什么..,使用了闭包将数据保存在内存中,`内部函数可以访问定义它们的外部函数的参数和变量（除了this和arguments之外）`\n  ```\n  function cached (fn) {\n    const cache = Object.create(null)\n    return (function cachedFn (str) {\n      console.log(cache)\n      const hit = cache[str]\n      return hit || (cache[str] = fn(str))\n    })\n  }\n\n  const idToTemplate = cached(id => {\n    debugger\n    return id\n  })\n  console.log(idToTemplate(1))\n  console.log(idToTemplate(12))\n  console.log(idToTemplate(123))\n\n  // 内部函数可以访问定义它们的外部函数的参数和变量（除了this和arguments之外）\n  // 如果需要访问对象的name属性的话，就需要显示的定义一个变量that来引用this，而这个变量此时就指向object对象了。\n  ```\n## mount\n  mount没有关注有什么功劳，但是写法很好玩，先是将原始的prototype.$mount赋值给一个变量，然后重新定义改属性并通过call应用之前的功能实现拓展。\n  ```\n  function Vue() {\n    this.name = 'name'\n  }\n  // 定义静态属性，通过Vue.static_pro访问\n  Vue.static_pro = 'static_pro'\n  Vue.prototype.$mount = function() {\n    console.log('old')\n  }\n  const mount = Vue.prototype.$mount\n  Vue.prototype.$mount = function () {\n    console.log(this.name) // 通this访问当前对象的上的属性\n    console.log('new')\n    return mount.call(this)\n  }\n  const vue = new Vue();\n  console.log(vue.$mount())\n\n  // call使用\n  function Product(name, price) {\n    this.name = name;\n    this.price = price;\n  }\n\n  function Food(name, price) {\n    Product.call(this, name, price);\n    this.category = 'food';\n  }\n\n  console.log(new Food('cheese', 5).name);\n\n  // --------------插曲---------------\n  // 重新赋值\n  let test = {\n    a: 1,\n    b: 2\n  }\n  let test1 = test\n  test1 = {\n    c: 3\n  }\n  console.log(test, test1)\n\n  // 修改引用\n  let test = {\n    a: 1,\n    b: 2\n  }\n  let test1 = test\n  test1.c = 3\n  console.log(test, test1)\n  ```\n## performance\n  好玩的属性出体验--window.performance,之前竟然不知道有这么个检测性能的属性\n  ```\n  // ------------mark,measure定义--------------\n  export let mark\n  export let measure\n\n  if (process.env.NODE_ENV !== 'production') {\n    const perf = inBrowser && window.performance\n    /* istanbul ignore if */\n    if (\n      perf &&\n      perf.mark &&\n      perf.measure &&\n      perf.clearMarks &&\n      perf.clearMeasures\n    ) {\n      mark = tag => perf.mark(tag)\n      measure = (name, startTag, endTag) => {\n        perf.measure(name, startTag, endTag)\n        perf.clearMarks(startTag)\n        perf.clearMarks(endTag)\n        perf.clearMeasures(name)\n      }\n    }\n  }\n\n  // ------------mark,measure使用--------------\n  if (template) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      mark('compile')\n    }\n\n    const { render, staticRenderFns } = compileToFunctions(template, {\n      shouldDecodeNewlines,\n      shouldDecodeNewlinesForHref,\n      delimiters: options.delimiters,\n      comments: options.comments\n    }, this)\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      mark('compile end')\n      measure(`vue ${this._name} compile`, 'compile', 'compile end')\n    }\n  }\n  ```\n\n## `_data`同名属性访问器\n  众多技巧只有，通过this可以方便的访问到data中的属性\n  vue实例之所以能访问`_data`中的同名属性，是因为在对象上添加了同名属性, 添加技巧，通过`Object.defineProperty(obj, key, config)`重写get和set方法实现\n  ```\n  const sharedPropertyDefinition = {\n    enumerable: true,\n    configurable: true,\n    get: () => {},\n    set: () => {}\n  }\n  export function proxy (target: Object, sourceKey: string, key: string) {\n    sharedPropertyDefinition.get = function proxyGetter () {\n      return this[sourceKey][key]\n    }\n    sharedPropertyDefinition.set = function proxySetter (val) {\n      this[sourceKey][key] = val\n    }\n    Object.defineProperty(target, key, sharedPropertyDefinition)\n  }\n  ```\n","slug":"vue源码阅读1","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3x000zzs8qigkn1bmg","content":"<blockquote>\n<p>3-4月前，在丁香园面试那个架构师就问为什么要阅读源码，我们需要阅读源码吗，当时他给我的结论是是不需要阅读源码，在没有目标时无需跟风去阅读源码，那个时候的收获可能也不会多。这些时间断断续续开始了vue的源码阅读之路，觉得阅读源码还是蛮重要的，感觉分为几个维度：<br>1 从init开始阅读了解大型成熟框架的结构，对框架有个整体认识<br>2 一行行阅读源码的时候好像在玩游戏，主线是必须走的，有些分支感兴趣想去玩一下可以去看一下，说不定会有意外收获<br>3 主要查看部分： 响应式，数据驱动…</p>\n</blockquote>\n<blockquote>\n<p>这个阶段大多数是在巩固之前的基础知识</p>\n</blockquote>\n<h2 id=\"constructorFn\"><a href=\"#constructorFn\" class=\"headerlink\" title=\"constructorFn\"></a>constructorFn</h2><p>  将方法按照功能分类放在不同的函数中，执行函数绑定方法，使结构更加清晰</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造函数</span><br><span class=\"line\">function Vue() &#123;</span><br><span class=\"line\">  if (!this instanceof Vue) &#123;</span><br><span class=\"line\">    console.log(&apos;必须使用关键字&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.name  = &apos;__vue&apos;</span><br><span class=\"line\">  this._init()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 给构造函数增加属性或方法</span><br><span class=\"line\"></span><br><span class=\"line\">// 直接添加</span><br><span class=\"line\">Vue.prototype.testFn = () =&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用函数添加</span><br><span class=\"line\">initFn(Vue)</span><br><span class=\"line\">otherFn(Vue)</span><br><span class=\"line\">function initFn(vue) &#123;</span><br><span class=\"line\">  vue.prototype._init = function() &#123;</span><br><span class=\"line\">    console.log(&apos;init&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function otherFn(vue) &#123;</span><br><span class=\"line\">  vue.prototype._other = function() &#123;</span><br><span class=\"line\">    console.log(&apos;ohter&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 实例化构造函数</span><br><span class=\"line\">var vue = new Vue()</span><br><span class=\"line\">Vue.prototype.testFn2 = () =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;testFn2&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vue._other()</span><br><span class=\"line\">vue.testFn2()</span><br><span class=\"line\">console.log(vue.hasOwnProperty(&apos;name&apos;)) // true</span><br><span class=\"line\">console.log(vue.hasOwnProperty(&apos;testFn&apos;)) // false</span><br><span class=\"line\">console.log(vue.hasOwnProperty(&apos;otherFn&apos;)) // false</span><br><span class=\"line\">console.log(vue.hasOwnProperty(&apos;testFn2&apos;)) // false</span><br></pre></td></tr></table></figure>\n<h2 id=\"defineProperty\"><a href=\"#defineProperty\" class=\"headerlink\" title=\"defineProperty\"></a>defineProperty</h2><p>  阅读js对象是，红宝书用了很多页在描述这个属性，然而自己用不到..</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Vue() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 给构造函数添加属性(添加静态方法)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.options = Object.create(null) // 没有继承的属性</span><br><span class=\"line\">Vue.options._base = &apos;_base&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// config</span><br><span class=\"line\">const config = &#123;</span><br><span class=\"line\">  opt1: &quot;opt1&quot;,</span><br><span class=\"line\">  opt2: &quot;opt2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const configDef = &#123;&#125;</span><br><span class=\"line\">configDef.get = () =&gt; config</span><br><span class=\"line\">Object.defineProperty(Vue, &apos;config&apos;, configDef) // 通过defineProperty细化的定义属性，给构造原函数定义属性</span><br><span class=\"line\">// Object.defineProperty(Vue, &apos;config&apos;, &#123; get: () =&gt; config &#125;) // 同上</span><br><span class=\"line\">console.log(Vue.options)</span><br><span class=\"line\">console.log(Vue.config) // 可以访问只读属性config</span><br><span class=\"line\">console.log(Vue) // 变了Vue的属性中不会遍历config</span><br><span class=\"line\"></span><br><span class=\"line\">// 通过defineProperty给实例定义属性</span><br><span class=\"line\">let vue = new Vue()</span><br><span class=\"line\">Object.defineProperty(vue, &apos;config&apos;, &#123; get: () =&gt; &apos;实例&apos; &#125;)</span><br><span class=\"line\">console.log(vue.config)</span><br></pre></td></tr></table></figure>\n<h2 id=\"cached\"><a href=\"#cached\" class=\"headerlink\" title=\"cached\"></a>cached</h2><p>  这个方法目前还不清楚用来做什么..,使用了闭包将数据保存在内存中,<code>内部函数可以访问定义它们的外部函数的参数和变量（除了this和arguments之外）</code><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function cached (fn) &#123;</span><br><span class=\"line\">  const cache = Object.create(null)</span><br><span class=\"line\">  return (function cachedFn (str) &#123;</span><br><span class=\"line\">    console.log(cache)</span><br><span class=\"line\">    const hit = cache[str]</span><br><span class=\"line\">    return hit || (cache[str] = fn(str))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const idToTemplate = cached(id =&gt; &#123;</span><br><span class=\"line\">  debugger</span><br><span class=\"line\">  return id</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(idToTemplate(1))</span><br><span class=\"line\">console.log(idToTemplate(12))</span><br><span class=\"line\">console.log(idToTemplate(123))</span><br><span class=\"line\"></span><br><span class=\"line\">// 内部函数可以访问定义它们的外部函数的参数和变量（除了this和arguments之外）</span><br><span class=\"line\">// 如果需要访问对象的name属性的话，就需要显示的定义一个变量that来引用this，而这个变量此时就指向object对象了。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"mount\"></a>mount</h2><p>  mount没有关注有什么功劳，但是写法很好玩，先是将原始的prototype.$mount赋值给一个变量，然后重新定义改属性并通过call应用之前的功能实现拓展。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Vue() &#123;</span><br><span class=\"line\">  this.name = &apos;name&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 定义静态属性，通过Vue.static_pro访问</span><br><span class=\"line\">Vue.static_pro = &apos;static_pro&apos;</span><br><span class=\"line\">Vue.prototype.$mount = function() &#123;</span><br><span class=\"line\">  console.log(&apos;old&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const mount = Vue.prototype.$mount</span><br><span class=\"line\">Vue.prototype.$mount = function () &#123;</span><br><span class=\"line\">  console.log(this.name) // 通this访问当前对象的上的属性</span><br><span class=\"line\">  console.log(&apos;new&apos;)</span><br><span class=\"line\">  return mount.call(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const vue = new Vue();</span><br><span class=\"line\">console.log(vue.$mount())</span><br><span class=\"line\"></span><br><span class=\"line\">// call使用</span><br><span class=\"line\">function Product(name, price) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.price = price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Food(name, price) &#123;</span><br><span class=\"line\">  Product.call(this, name, price);</span><br><span class=\"line\">  this.category = &apos;food&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(new Food(&apos;cheese&apos;, 5).name);</span><br><span class=\"line\"></span><br><span class=\"line\">// --------------插曲---------------</span><br><span class=\"line\">// 重新赋值</span><br><span class=\"line\">let test = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let test1 = test</span><br><span class=\"line\">test1 = &#123;</span><br><span class=\"line\">  c: 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(test, test1)</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改引用</span><br><span class=\"line\">let test = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let test1 = test</span><br><span class=\"line\">test1.c = 3</span><br><span class=\"line\">console.log(test, test1)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h2><p>  好玩的属性出体验–window.performance,之前竟然不知道有这么个检测性能的属性<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ------------mark,measure定义--------------</span><br><span class=\"line\">export let mark</span><br><span class=\"line\">export let measure</span><br><span class=\"line\"></span><br><span class=\"line\">if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">  const perf = inBrowser &amp;&amp; window.performance</span><br><span class=\"line\">  /* istanbul ignore if */</span><br><span class=\"line\">  if (</span><br><span class=\"line\">    perf &amp;&amp;</span><br><span class=\"line\">    perf.mark &amp;&amp;</span><br><span class=\"line\">    perf.measure &amp;&amp;</span><br><span class=\"line\">    perf.clearMarks &amp;&amp;</span><br><span class=\"line\">    perf.clearMeasures</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    mark = tag =&gt; perf.mark(tag)</span><br><span class=\"line\">    measure = (name, startTag, endTag) =&gt; &#123;</span><br><span class=\"line\">      perf.measure(name, startTag, endTag)</span><br><span class=\"line\">      perf.clearMarks(startTag)</span><br><span class=\"line\">      perf.clearMarks(endTag)</span><br><span class=\"line\">      perf.clearMeasures(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ------------mark,measure使用--------------</span><br><span class=\"line\">if (template) &#123;</span><br><span class=\"line\">  /* istanbul ignore if */</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">    mark(&apos;compile&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class=\"line\">    shouldDecodeNewlines,</span><br><span class=\"line\">    shouldDecodeNewlinesForHref,</span><br><span class=\"line\">    delimiters: options.delimiters,</span><br><span class=\"line\">    comments: options.comments</span><br><span class=\"line\">  &#125;, this)</span><br><span class=\"line\">  options.render = render</span><br><span class=\"line\">  options.staticRenderFns = staticRenderFns</span><br><span class=\"line\"></span><br><span class=\"line\">  /* istanbul ignore if */</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">    mark(&apos;compile end&apos;)</span><br><span class=\"line\">    measure(`vue $&#123;this._name&#125; compile`, &apos;compile&apos;, &apos;compile end&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"data同名属性访问器\"><a href=\"#data同名属性访问器\" class=\"headerlink\" title=\"_data同名属性访问器\"></a><code>_data</code>同名属性访问器</h2><p>  众多技巧只有，通过this可以方便的访问到data中的属性<br>  vue实例之所以能访问<code>_data</code>中的同名属性，是因为在对象上添加了同名属性, 添加技巧，通过<code>Object.defineProperty(obj, key, config)</code>重写get和set方法实现<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sharedPropertyDefinition = &#123;</span><br><span class=\"line\">  enumerable: true,</span><br><span class=\"line\">  configurable: true,</span><br><span class=\"line\">  get: () =&gt; &#123;&#125;,</span><br><span class=\"line\">  set: () =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export function proxy (target: Object, sourceKey: string, key: string) &#123;</span><br><span class=\"line\">  sharedPropertyDefinition.get = function proxyGetter () &#123;</span><br><span class=\"line\">    return this[sourceKey][key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sharedPropertyDefinition.set = function proxySetter (val) &#123;</span><br><span class=\"line\">    this[sourceKey][key] = val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Object.defineProperty(target, key, sharedPropertyDefinition)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>3-4月前，在丁香园面试那个架构师就问为什么要阅读源码，我们需要阅读源码吗，当时他给我的结论是是不需要阅读源码，在没有目标时无需跟风去阅读源码，那个时候的收获可能也不会多。这些时间断断续续开始了vue的源码阅读之路，觉得阅读源码还是蛮重要的，感觉分为几个维度：<br>1 从init开始阅读了解大型成熟框架的结构，对框架有个整体认识<br>2 一行行阅读源码的时候好像在玩游戏，主线是必须走的，有些分支感兴趣想去玩一下可以去看一下，说不定会有意外收获<br>3 主要查看部分： 响应式，数据驱动…</p>\n</blockquote>\n<blockquote>\n<p>这个阶段大多数是在巩固之前的基础知识</p>\n</blockquote>\n<h2 id=\"constructorFn\"><a href=\"#constructorFn\" class=\"headerlink\" title=\"constructorFn\"></a>constructorFn</h2><p>  将方法按照功能分类放在不同的函数中，执行函数绑定方法，使结构更加清晰</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 构造函数</span><br><span class=\"line\">function Vue() &#123;</span><br><span class=\"line\">  if (!this instanceof Vue) &#123;</span><br><span class=\"line\">    console.log(&apos;必须使用关键字&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  this.name  = &apos;__vue&apos;</span><br><span class=\"line\">  this._init()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 给构造函数增加属性或方法</span><br><span class=\"line\"></span><br><span class=\"line\">// 直接添加</span><br><span class=\"line\">Vue.prototype.testFn = () =&gt; &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 调用函数添加</span><br><span class=\"line\">initFn(Vue)</span><br><span class=\"line\">otherFn(Vue)</span><br><span class=\"line\">function initFn(vue) &#123;</span><br><span class=\"line\">  vue.prototype._init = function() &#123;</span><br><span class=\"line\">    console.log(&apos;init&apos;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function otherFn(vue) &#123;</span><br><span class=\"line\">  vue.prototype._other = function() &#123;</span><br><span class=\"line\">    console.log(&apos;ohter&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 实例化构造函数</span><br><span class=\"line\">var vue = new Vue()</span><br><span class=\"line\">Vue.prototype.testFn2 = () =&gt; &#123;</span><br><span class=\"line\">  console.log(&apos;testFn2&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vue._other()</span><br><span class=\"line\">vue.testFn2()</span><br><span class=\"line\">console.log(vue.hasOwnProperty(&apos;name&apos;)) // true</span><br><span class=\"line\">console.log(vue.hasOwnProperty(&apos;testFn&apos;)) // false</span><br><span class=\"line\">console.log(vue.hasOwnProperty(&apos;otherFn&apos;)) // false</span><br><span class=\"line\">console.log(vue.hasOwnProperty(&apos;testFn2&apos;)) // false</span><br></pre></td></tr></table></figure>\n<h2 id=\"defineProperty\"><a href=\"#defineProperty\" class=\"headerlink\" title=\"defineProperty\"></a>defineProperty</h2><p>  阅读js对象是，红宝书用了很多页在描述这个属性，然而自己用不到..</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Vue() &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 给构造函数添加属性(添加静态方法)</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.options = Object.create(null) // 没有继承的属性</span><br><span class=\"line\">Vue.options._base = &apos;_base&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">// config</span><br><span class=\"line\">const config = &#123;</span><br><span class=\"line\">  opt1: &quot;opt1&quot;,</span><br><span class=\"line\">  opt2: &quot;opt2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const configDef = &#123;&#125;</span><br><span class=\"line\">configDef.get = () =&gt; config</span><br><span class=\"line\">Object.defineProperty(Vue, &apos;config&apos;, configDef) // 通过defineProperty细化的定义属性，给构造原函数定义属性</span><br><span class=\"line\">// Object.defineProperty(Vue, &apos;config&apos;, &#123; get: () =&gt; config &#125;) // 同上</span><br><span class=\"line\">console.log(Vue.options)</span><br><span class=\"line\">console.log(Vue.config) // 可以访问只读属性config</span><br><span class=\"line\">console.log(Vue) // 变了Vue的属性中不会遍历config</span><br><span class=\"line\"></span><br><span class=\"line\">// 通过defineProperty给实例定义属性</span><br><span class=\"line\">let vue = new Vue()</span><br><span class=\"line\">Object.defineProperty(vue, &apos;config&apos;, &#123; get: () =&gt; &apos;实例&apos; &#125;)</span><br><span class=\"line\">console.log(vue.config)</span><br></pre></td></tr></table></figure>\n<h2 id=\"cached\"><a href=\"#cached\" class=\"headerlink\" title=\"cached\"></a>cached</h2><p>  这个方法目前还不清楚用来做什么..,使用了闭包将数据保存在内存中,<code>内部函数可以访问定义它们的外部函数的参数和变量（除了this和arguments之外）</code><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function cached (fn) &#123;</span><br><span class=\"line\">  const cache = Object.create(null)</span><br><span class=\"line\">  return (function cachedFn (str) &#123;</span><br><span class=\"line\">    console.log(cache)</span><br><span class=\"line\">    const hit = cache[str]</span><br><span class=\"line\">    return hit || (cache[str] = fn(str))</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const idToTemplate = cached(id =&gt; &#123;</span><br><span class=\"line\">  debugger</span><br><span class=\"line\">  return id</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(idToTemplate(1))</span><br><span class=\"line\">console.log(idToTemplate(12))</span><br><span class=\"line\">console.log(idToTemplate(123))</span><br><span class=\"line\"></span><br><span class=\"line\">// 内部函数可以访问定义它们的外部函数的参数和变量（除了this和arguments之外）</span><br><span class=\"line\">// 如果需要访问对象的name属性的话，就需要显示的定义一个变量that来引用this，而这个变量此时就指向object对象了。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"mount\"></a>mount</h2><p>  mount没有关注有什么功劳，但是写法很好玩，先是将原始的prototype.$mount赋值给一个变量，然后重新定义改属性并通过call应用之前的功能实现拓展。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Vue() &#123;</span><br><span class=\"line\">  this.name = &apos;name&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 定义静态属性，通过Vue.static_pro访问</span><br><span class=\"line\">Vue.static_pro = &apos;static_pro&apos;</span><br><span class=\"line\">Vue.prototype.$mount = function() &#123;</span><br><span class=\"line\">  console.log(&apos;old&apos;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const mount = Vue.prototype.$mount</span><br><span class=\"line\">Vue.prototype.$mount = function () &#123;</span><br><span class=\"line\">  console.log(this.name) // 通this访问当前对象的上的属性</span><br><span class=\"line\">  console.log(&apos;new&apos;)</span><br><span class=\"line\">  return mount.call(this)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const vue = new Vue();</span><br><span class=\"line\">console.log(vue.$mount())</span><br><span class=\"line\"></span><br><span class=\"line\">// call使用</span><br><span class=\"line\">function Product(name, price) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.price = price;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function Food(name, price) &#123;</span><br><span class=\"line\">  Product.call(this, name, price);</span><br><span class=\"line\">  this.category = &apos;food&apos;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(new Food(&apos;cheese&apos;, 5).name);</span><br><span class=\"line\"></span><br><span class=\"line\">// --------------插曲---------------</span><br><span class=\"line\">// 重新赋值</span><br><span class=\"line\">let test = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let test1 = test</span><br><span class=\"line\">test1 = &#123;</span><br><span class=\"line\">  c: 3</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(test, test1)</span><br><span class=\"line\"></span><br><span class=\"line\">// 修改引用</span><br><span class=\"line\">let test = &#123;</span><br><span class=\"line\">  a: 1,</span><br><span class=\"line\">  b: 2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">let test1 = test</span><br><span class=\"line\">test1.c = 3</span><br><span class=\"line\">console.log(test, test1)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h2><p>  好玩的属性出体验–window.performance,之前竟然不知道有这么个检测性能的属性<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ------------mark,measure定义--------------</span><br><span class=\"line\">export let mark</span><br><span class=\"line\">export let measure</span><br><span class=\"line\"></span><br><span class=\"line\">if (process.env.NODE_ENV !== &apos;production&apos;) &#123;</span><br><span class=\"line\">  const perf = inBrowser &amp;&amp; window.performance</span><br><span class=\"line\">  /* istanbul ignore if */</span><br><span class=\"line\">  if (</span><br><span class=\"line\">    perf &amp;&amp;</span><br><span class=\"line\">    perf.mark &amp;&amp;</span><br><span class=\"line\">    perf.measure &amp;&amp;</span><br><span class=\"line\">    perf.clearMarks &amp;&amp;</span><br><span class=\"line\">    perf.clearMeasures</span><br><span class=\"line\">  ) &#123;</span><br><span class=\"line\">    mark = tag =&gt; perf.mark(tag)</span><br><span class=\"line\">    measure = (name, startTag, endTag) =&gt; &#123;</span><br><span class=\"line\">      perf.measure(name, startTag, endTag)</span><br><span class=\"line\">      perf.clearMarks(startTag)</span><br><span class=\"line\">      perf.clearMarks(endTag)</span><br><span class=\"line\">      perf.clearMeasures(name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// ------------mark,measure使用--------------</span><br><span class=\"line\">if (template) &#123;</span><br><span class=\"line\">  /* istanbul ignore if */</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">    mark(&apos;compile&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  const &#123; render, staticRenderFns &#125; = compileToFunctions(template, &#123;</span><br><span class=\"line\">    shouldDecodeNewlines,</span><br><span class=\"line\">    shouldDecodeNewlinesForHref,</span><br><span class=\"line\">    delimiters: options.delimiters,</span><br><span class=\"line\">    comments: options.comments</span><br><span class=\"line\">  &#125;, this)</span><br><span class=\"line\">  options.render = render</span><br><span class=\"line\">  options.staticRenderFns = staticRenderFns</span><br><span class=\"line\"></span><br><span class=\"line\">  /* istanbul ignore if */</span><br><span class=\"line\">  if (process.env.NODE_ENV !== &apos;production&apos; &amp;&amp; config.performance &amp;&amp; mark) &#123;</span><br><span class=\"line\">    mark(&apos;compile end&apos;)</span><br><span class=\"line\">    measure(`vue $&#123;this._name&#125; compile`, &apos;compile&apos;, &apos;compile end&apos;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"data同名属性访问器\"><a href=\"#data同名属性访问器\" class=\"headerlink\" title=\"_data同名属性访问器\"></a><code>_data</code>同名属性访问器</h2><p>  众多技巧只有，通过this可以方便的访问到data中的属性<br>  vue实例之所以能访问<code>_data</code>中的同名属性，是因为在对象上添加了同名属性, 添加技巧，通过<code>Object.defineProperty(obj, key, config)</code>重写get和set方法实现<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const sharedPropertyDefinition = &#123;</span><br><span class=\"line\">  enumerable: true,</span><br><span class=\"line\">  configurable: true,</span><br><span class=\"line\">  get: () =&gt; &#123;&#125;,</span><br><span class=\"line\">  set: () =&gt; &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export function proxy (target: Object, sourceKey: string, key: string) &#123;</span><br><span class=\"line\">  sharedPropertyDefinition.get = function proxyGetter () &#123;</span><br><span class=\"line\">    return this[sourceKey][key]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  sharedPropertyDefinition.set = function proxySetter (val) &#123;</span><br><span class=\"line\">    this[sourceKey][key] = val</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Object.defineProperty(target, key, sharedPropertyDefinition)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"创建对象","date":"2017-09-29T17:09:17.000Z","_content":"\n  ![](/img/创建对象.png)\n  对象描述： 无序的key,value键值对\n\n  >整个对象发展的过程：\n    ——》先是有个new一个对象的写法\n      简化写法\n    ——》对象字面量（可以使用对象写法）\n      批量生产\n    ——》工厂模式（new Object）\n      区别自定义对象类型\n    ——》构造函数类型（可以new 自定义类型, 构造函数定义来了）\n      解决函数类型实例化造成的空间浪费\n    ——》原型模式（出现原型对象）\n      原型对象为实例共享，引用类型修改时会对其它实例造成影响\n    ——》组合使用构造函数原型模式（1+1 = ？）\n    ...\n  一系列的相关的问题\n  this指向，改变this指向的途径，作用域，识别实例来自哪个构造函数，对象看成一个key,value列表因此出现元素遍历,区别实例属性原型链属相->for in->..\n\n## 创建自定义对象\n  对象字面量\n  ```\n  var person = {\n    name: 'aa',\n    age: 18\n  }\n\n  Object实例创建\n  var person = new Object();\n  person.name = 'aa';\n  person.age = 18;\n  ```\n\n## 属性\n  数据属性\n  访问器属性： 封装一些组件时一些高级用法时使用\n\n## 工厂模式\n  ```\n  function createPerson(name, age) {\n    var o =  new Object();\n    o.name = name;\n    o.age = age;\n    return o;\n  }\n\n  var p1 = createPerson('abc', '16');\n  ```\n  解决构造函数或者对象字面量重复的问题，就好比一个蛋糕模子，每次创造出一模一样的东西，缺点：无法区别这些蛋糕（没有解决对象的识别问题）\n\n## 构造函数模式\n  ![](/img/构造函数执行过程.png)\n  与工厂模式比较有点是可以将实例识别为某一种特定的类型\n  为了区别构造函数和普通函数构造函数首字符大写，构造函数本质就是普通函数，当使用关键字new的时候会产生神奇的变化\n  1 创建新对象\n  2 将构造函数的作用域赋值给新对象（this指向改变）\n  3 执行构造函数的代码（为新对象添加属性）\n  4 返回新对象\n\n  ```\n  function Person(name, age) {\n    this.name = name;\n    this.age = age;\n    console.log(1);\n  }\n  var p1 = new Person();\n  ```\n  缺点：属性为function类型时，多次创建实例的同时也会创建多个function实例\n\n## 原型模式\n  原型模式需要理清 构造函数，实例，原型对象之间的关系\n  ### 1 理解原型对象\n  每个函数都有prototype属性，存储了原型对象。创建原型对象后会自动获取constructor属相，其余属性都是从Object上继承而来\n  方法：\n  ```\n  function Person() {}\n  Person.prototype.name = 'name';\n  Person.prototype.age = 'agePro';\n  var person1 = new Person();\n  person1.age = 'age';\n\n  Person.prototype.isPrototypeOf(person1)// true;\n\n  // 返回原型链上的值\n  Object.getPrototypeOf(person1);\n\n  // 使用delete可以删除实例属性，那么就可以正常获取原型属性了\n  delete person1.age\n\n  // hasOwnProperty,判断属相是否为实例属性\n  person1.hasOwnProperty('age') //boolean\n  ```\n\n  ### 原型与in操作符\n  in 两种使用方式 单独使用/ for in 循环\n  for in循环可以遍历可枚举的属性，因此位于原型或者实例的都可以扫描到\n  in 使用\n  ```\n  \"age\" in person1\n  // 判断属相属于实例还是原型：\n  function hasPrototypePropertype(obj, name) {\n    return !obj.hasOwnProperty(name) && (name in obj);\n  }\n\n  // Object添加keys()属性，返回所有可枚举的属性（字符串数组）\n  Object.keys(person1)\n  // 返回所有属性，包括不可以枚举属性\n  Object.getOwnPropertyNames(person1)\n  Object.getOwnPropertyNames(Person.prototype)\n\n  ```\n  ### 更简单的原型语法\n  ```\n  function Person() {}\n  Person.prototype = {\n    constructor: Person, // 需要添加这个，否则constructor指针将不指向person，重新设置constructor属性会导致该属性标记为可枚举类型，不过可以重新定义为definePropoty(Person.prototype, 'constructor', {\n      enumerable: false,\n      value: Person\n      })\n    name: 'name',\n    age: 'age'\n  }\n  ```\n\n  ### 原型的动态性\n  ```\n  function Person() {}\n  var p2 = new Person();\n  Person.prototype = {\n    constructor: Person,\n    name: 'name',\n    age: 'age'\n  }\n  p2.age // undefined\n\n  function Person() {}\n  var person1 = new Person();\n  Person.prototype.name = 'name';\n  Person.prototype.age = 'agePro';\n  person1.age; // agePro\n  ```\n\n  ### 原生对象的原型\n  所有原生的引用类型都是通过原型模式创建的，他们都在构造函数的原型上添加了方法，因此可以给这些原生对象添加原型属性，这样不好，，\n\n  ### 原型对象的问题\n  实例可以更改引用类型的属性，导致其他的实例受影响\n\n## 组合使用构造函数原型模式\n  没啥好说的，结合了两种模式的优点，是使用最广泛的模式了\n\n## 动态原型模式\n  模仿其他oop语言，将所有信息封装在构造函数中。增加`if`判断语句，在执行构造函数时初始化实例方法。\n\n## 寄生构造函数模式\n  和工厂模式一样，除了实例化时使用了new关键字调用构造函数,在某些特殊情况使用，比如创建一个具有额外方法的数组。\n  ```\n  function createPerson(name, age) {\n    var o =  new Object();\n    o.name = name;\n    o.age = age;\n    return o;\n  }\n\n  var p1 = new createPerson('abc', '16');\n  ```\n\n## 稳妥构造函数模式\n  和寄生构造函数类似，不同的是： 1 构造函数中不能使用`this`；2 不能用`new`关键字调用构造函数； 3 可以定义私有变量，不能通过实例直接访问属性，有点像oop中的`私有属性`，哭，，\n  ```\n  function createPerson(name) {\n    var o =  new Object();\n    // 可以定义私有变量\n    o.sayName = function() {\n      alert(name)\n    }\n    return o;\n  }\n\n  var p1 = createPerson('abc');\n  p1.sayName();// 只能通过调用sayName方法访问属性。\n  ```\n\n## 问题\n  [操作符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete) `in` `typeof` `instanceof` `delete`\n  [Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object) 好神奇\n  [Function.prototype](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call).[call|aplly|bind|isGenerator|toSource|toString]\n\n  bind：改变this指向，不执行函数体，返回改变this后的函数引用\n  call,apply: 改变this指向，执行函数体，返回执行结果\n  ```\n  this.x=10;\n  var obj = {\n    x: 100,\n    num: function(desc) {\n      console.log(desc+this.x)\n    }\n  }\n\n  obj.x; // 100\n  obj.num('d'); // 100\n  var b = obj.num;// 此刻的this为函数的this，指向全局\n  b('e'); // 10\n  var b2 = b.bind(obj,'a');\n  b2('f'); // 100\n  var b3 = b.call(obj, 'b') // 100\n  var b3 = b.apply(obj, ['c']) // 100\n  ```\n\n  this指向\n  new一个对象都做了什么\n  constructor属性指向构造函数,作用？ https://segmentfault.com/q/1010000000347868\n  函数作用域，函数的this指向\n  作用域（函数作用域，全局作用域，es6块作用域）\n  好像没有删除原型属性的方法\n  [参考网站](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n","source":"_posts/创建对象.md","raw":"---\ntitle: 创建对象\ndate: 2017-09-29 13:09:17\ncategories: js\ntags: js基础\n---\n\n  ![](/img/创建对象.png)\n  对象描述： 无序的key,value键值对\n\n  >整个对象发展的过程：\n    ——》先是有个new一个对象的写法\n      简化写法\n    ——》对象字面量（可以使用对象写法）\n      批量生产\n    ——》工厂模式（new Object）\n      区别自定义对象类型\n    ——》构造函数类型（可以new 自定义类型, 构造函数定义来了）\n      解决函数类型实例化造成的空间浪费\n    ——》原型模式（出现原型对象）\n      原型对象为实例共享，引用类型修改时会对其它实例造成影响\n    ——》组合使用构造函数原型模式（1+1 = ？）\n    ...\n  一系列的相关的问题\n  this指向，改变this指向的途径，作用域，识别实例来自哪个构造函数，对象看成一个key,value列表因此出现元素遍历,区别实例属性原型链属相->for in->..\n\n## 创建自定义对象\n  对象字面量\n  ```\n  var person = {\n    name: 'aa',\n    age: 18\n  }\n\n  Object实例创建\n  var person = new Object();\n  person.name = 'aa';\n  person.age = 18;\n  ```\n\n## 属性\n  数据属性\n  访问器属性： 封装一些组件时一些高级用法时使用\n\n## 工厂模式\n  ```\n  function createPerson(name, age) {\n    var o =  new Object();\n    o.name = name;\n    o.age = age;\n    return o;\n  }\n\n  var p1 = createPerson('abc', '16');\n  ```\n  解决构造函数或者对象字面量重复的问题，就好比一个蛋糕模子，每次创造出一模一样的东西，缺点：无法区别这些蛋糕（没有解决对象的识别问题）\n\n## 构造函数模式\n  ![](/img/构造函数执行过程.png)\n  与工厂模式比较有点是可以将实例识别为某一种特定的类型\n  为了区别构造函数和普通函数构造函数首字符大写，构造函数本质就是普通函数，当使用关键字new的时候会产生神奇的变化\n  1 创建新对象\n  2 将构造函数的作用域赋值给新对象（this指向改变）\n  3 执行构造函数的代码（为新对象添加属性）\n  4 返回新对象\n\n  ```\n  function Person(name, age) {\n    this.name = name;\n    this.age = age;\n    console.log(1);\n  }\n  var p1 = new Person();\n  ```\n  缺点：属性为function类型时，多次创建实例的同时也会创建多个function实例\n\n## 原型模式\n  原型模式需要理清 构造函数，实例，原型对象之间的关系\n  ### 1 理解原型对象\n  每个函数都有prototype属性，存储了原型对象。创建原型对象后会自动获取constructor属相，其余属性都是从Object上继承而来\n  方法：\n  ```\n  function Person() {}\n  Person.prototype.name = 'name';\n  Person.prototype.age = 'agePro';\n  var person1 = new Person();\n  person1.age = 'age';\n\n  Person.prototype.isPrototypeOf(person1)// true;\n\n  // 返回原型链上的值\n  Object.getPrototypeOf(person1);\n\n  // 使用delete可以删除实例属性，那么就可以正常获取原型属性了\n  delete person1.age\n\n  // hasOwnProperty,判断属相是否为实例属性\n  person1.hasOwnProperty('age') //boolean\n  ```\n\n  ### 原型与in操作符\n  in 两种使用方式 单独使用/ for in 循环\n  for in循环可以遍历可枚举的属性，因此位于原型或者实例的都可以扫描到\n  in 使用\n  ```\n  \"age\" in person1\n  // 判断属相属于实例还是原型：\n  function hasPrototypePropertype(obj, name) {\n    return !obj.hasOwnProperty(name) && (name in obj);\n  }\n\n  // Object添加keys()属性，返回所有可枚举的属性（字符串数组）\n  Object.keys(person1)\n  // 返回所有属性，包括不可以枚举属性\n  Object.getOwnPropertyNames(person1)\n  Object.getOwnPropertyNames(Person.prototype)\n\n  ```\n  ### 更简单的原型语法\n  ```\n  function Person() {}\n  Person.prototype = {\n    constructor: Person, // 需要添加这个，否则constructor指针将不指向person，重新设置constructor属性会导致该属性标记为可枚举类型，不过可以重新定义为definePropoty(Person.prototype, 'constructor', {\n      enumerable: false,\n      value: Person\n      })\n    name: 'name',\n    age: 'age'\n  }\n  ```\n\n  ### 原型的动态性\n  ```\n  function Person() {}\n  var p2 = new Person();\n  Person.prototype = {\n    constructor: Person,\n    name: 'name',\n    age: 'age'\n  }\n  p2.age // undefined\n\n  function Person() {}\n  var person1 = new Person();\n  Person.prototype.name = 'name';\n  Person.prototype.age = 'agePro';\n  person1.age; // agePro\n  ```\n\n  ### 原生对象的原型\n  所有原生的引用类型都是通过原型模式创建的，他们都在构造函数的原型上添加了方法，因此可以给这些原生对象添加原型属性，这样不好，，\n\n  ### 原型对象的问题\n  实例可以更改引用类型的属性，导致其他的实例受影响\n\n## 组合使用构造函数原型模式\n  没啥好说的，结合了两种模式的优点，是使用最广泛的模式了\n\n## 动态原型模式\n  模仿其他oop语言，将所有信息封装在构造函数中。增加`if`判断语句，在执行构造函数时初始化实例方法。\n\n## 寄生构造函数模式\n  和工厂模式一样，除了实例化时使用了new关键字调用构造函数,在某些特殊情况使用，比如创建一个具有额外方法的数组。\n  ```\n  function createPerson(name, age) {\n    var o =  new Object();\n    o.name = name;\n    o.age = age;\n    return o;\n  }\n\n  var p1 = new createPerson('abc', '16');\n  ```\n\n## 稳妥构造函数模式\n  和寄生构造函数类似，不同的是： 1 构造函数中不能使用`this`；2 不能用`new`关键字调用构造函数； 3 可以定义私有变量，不能通过实例直接访问属性，有点像oop中的`私有属性`，哭，，\n  ```\n  function createPerson(name) {\n    var o =  new Object();\n    // 可以定义私有变量\n    o.sayName = function() {\n      alert(name)\n    }\n    return o;\n  }\n\n  var p1 = createPerson('abc');\n  p1.sayName();// 只能通过调用sayName方法访问属性。\n  ```\n\n## 问题\n  [操作符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete) `in` `typeof` `instanceof` `delete`\n  [Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object) 好神奇\n  [Function.prototype](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call).[call|aplly|bind|isGenerator|toSource|toString]\n\n  bind：改变this指向，不执行函数体，返回改变this后的函数引用\n  call,apply: 改变this指向，执行函数体，返回执行结果\n  ```\n  this.x=10;\n  var obj = {\n    x: 100,\n    num: function(desc) {\n      console.log(desc+this.x)\n    }\n  }\n\n  obj.x; // 100\n  obj.num('d'); // 100\n  var b = obj.num;// 此刻的this为函数的this，指向全局\n  b('e'); // 10\n  var b2 = b.bind(obj,'a');\n  b2('f'); // 100\n  var b3 = b.call(obj, 'b') // 100\n  var b3 = b.apply(obj, ['c']) // 100\n  ```\n\n  this指向\n  new一个对象都做了什么\n  constructor属性指向构造函数,作用？ https://segmentfault.com/q/1010000000347868\n  函数作用域，函数的this指向\n  作用域（函数作用域，全局作用域，es6块作用域）\n  好像没有删除原型属性的方法\n  [参考网站](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n","slug":"创建对象","published":1,"updated":"2023-04-11T20:38:06.525Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3x0014zs8qixlwm07t","content":"<p>  <img src=\"/img/创建对象.png\" alt><br>  对象描述： 无序的key,value键值对</p>\n<blockquote>\n<p>整个对象发展的过程：<br>    ——》先是有个new一个对象的写法<br>      简化写法<br>    ——》对象字面量（可以使用对象写法）<br>      批量生产<br>    ——》工厂模式（new Object）<br>      区别自定义对象类型<br>    ——》构造函数类型（可以new 自定义类型, 构造函数定义来了）<br>      解决函数类型实例化造成的空间浪费<br>    ——》原型模式（出现原型对象）<br>      原型对象为实例共享，引用类型修改时会对其它实例造成影响<br>    ——》组合使用构造函数原型模式（1+1 = ？）<br>    …<br>  一系列的相关的问题<br>  this指向，改变this指向的途径，作用域，识别实例来自哪个构造函数，对象看成一个key,value列表因此出现元素遍历,区别实例属性原型链属相-&gt;for in-&gt;..</p>\n</blockquote>\n<h2 id=\"创建自定义对象\"><a href=\"#创建自定义对象\" class=\"headerlink\" title=\"创建自定义对象\"></a>创建自定义对象</h2><p>  对象字面量<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">  name: &apos;aa&apos;,</span><br><span class=\"line\">  age: 18</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Object实例创建</span><br><span class=\"line\">var person = new Object();</span><br><span class=\"line\">person.name = &apos;aa&apos;;</span><br><span class=\"line\">person.age = 18;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>  数据属性<br>  访问器属性： 封装一些组件时一些高级用法时使用</p>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age) &#123;</span><br><span class=\"line\">  var o =  new Object();</span><br><span class=\"line\">  o.name = name;</span><br><span class=\"line\">  o.age = age;</span><br><span class=\"line\">  return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1 = createPerson(&apos;abc&apos;, &apos;16&apos;);</span><br></pre></td></tr></table></figure>\n<p>  解决构造函数或者对象字面量重复的问题，就好比一个蛋糕模子，每次创造出一模一样的东西，缺点：无法区别这些蛋糕（没有解决对象的识别问题）</p>\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><p>  <img src=\"/img/构造函数执行过程.png\" alt><br>  与工厂模式比较有点是可以将实例识别为某一种特定的类型<br>  为了区别构造函数和普通函数构造函数首字符大写，构造函数本质就是普通函数，当使用关键字new的时候会产生神奇的变化<br>  1 创建新对象<br>  2 将构造函数的作用域赋值给新对象（this指向改变）<br>  3 执行构造函数的代码（为新对象添加属性）<br>  4 返回新对象</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">  console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var p1 = new Person();</span><br></pre></td></tr></table></figure>\n<p>  缺点：属性为function类型时，多次创建实例的同时也会创建多个function实例</p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>  原型模式需要理清 构造函数，实例，原型对象之间的关系</p>\n<h3 id=\"1-理解原型对象\"><a href=\"#1-理解原型对象\" class=\"headerlink\" title=\"1 理解原型对象\"></a>1 理解原型对象</h3><p>  每个函数都有prototype属性，存储了原型对象。创建原型对象后会自动获取constructor属相，其余属性都是从Object上继承而来<br>  方法：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &apos;name&apos;;</span><br><span class=\"line\">Person.prototype.age = &apos;agePro&apos;;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">person1.age = &apos;age&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.isPrototypeOf(person1)// true;</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回原型链上的值</span><br><span class=\"line\">Object.getPrototypeOf(person1);</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用delete可以删除实例属性，那么就可以正常获取原型属性了</span><br><span class=\"line\">delete person1.age</span><br><span class=\"line\"></span><br><span class=\"line\">// hasOwnProperty,判断属相是否为实例属性</span><br><span class=\"line\">person1.hasOwnProperty(&apos;age&apos;) //boolean</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h3><p>  in 两种使用方式 单独使用/ for in 循环<br>  for in循环可以遍历可枚举的属性，因此位于原型或者实例的都可以扫描到<br>  in 使用<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;age&quot; in person1</span><br><span class=\"line\">// 判断属相属于实例还是原型：</span><br><span class=\"line\">function hasPrototypePropertype(obj, name) &#123;</span><br><span class=\"line\">  return !obj.hasOwnProperty(name) &amp;&amp; (name in obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Object添加keys()属性，返回所有可枚举的属性（字符串数组）</span><br><span class=\"line\">Object.keys(person1)</span><br><span class=\"line\">// 返回所有属性，包括不可以枚举属性</span><br><span class=\"line\">Object.getOwnPropertyNames(person1)</span><br><span class=\"line\">Object.getOwnPropertyNames(Person.prototype)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  constructor: Person, // 需要添加这个，否则constructor指针将不指向person，重新设置constructor属性会导致该属性标记为可枚举类型，不过可以重新定义为definePropoty(Person.prototype, &apos;constructor&apos;, &#123;</span><br><span class=\"line\">    enumerable: false,</span><br><span class=\"line\">    value: Person</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  name: &apos;name&apos;,</span><br><span class=\"line\">  age: &apos;age&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"原型的动态性\"><a href=\"#原型的动态性\" class=\"headerlink\" title=\"原型的动态性\"></a>原型的动态性</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\">var p2 = new Person();</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  constructor: Person,</span><br><span class=\"line\">  name: &apos;name&apos;,</span><br><span class=\"line\">  age: &apos;age&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p2.age // undefined</span><br><span class=\"line\"></span><br><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">Person.prototype.name = &apos;name&apos;;</span><br><span class=\"line\">Person.prototype.age = &apos;agePro&apos;;</span><br><span class=\"line\">person1.age; // agePro</span><br></pre></td></tr></table></figure>\n<h3 id=\"原生对象的原型\"><a href=\"#原生对象的原型\" class=\"headerlink\" title=\"原生对象的原型\"></a>原生对象的原型</h3><p>  所有原生的引用类型都是通过原型模式创建的，他们都在构造函数的原型上添加了方法，因此可以给这些原生对象添加原型属性，这样不好，，</p>\n<h3 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h3><p>  实例可以更改引用类型的属性，导致其他的实例受影响</p>\n<h2 id=\"组合使用构造函数原型模式\"><a href=\"#组合使用构造函数原型模式\" class=\"headerlink\" title=\"组合使用构造函数原型模式\"></a>组合使用构造函数原型模式</h2><p>  没啥好说的，结合了两种模式的优点，是使用最广泛的模式了</p>\n<h2 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h2><p>  模仿其他oop语言，将所有信息封装在构造函数中。增加<code>if</code>判断语句，在执行构造函数时初始化实例方法。</p>\n<h2 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h2><p>  和工厂模式一样，除了实例化时使用了new关键字调用构造函数,在某些特殊情况使用，比如创建一个具有额外方法的数组。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age) &#123;</span><br><span class=\"line\">  var o =  new Object();</span><br><span class=\"line\">  o.name = name;</span><br><span class=\"line\">  o.age = age;</span><br><span class=\"line\">  return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1 = new createPerson(&apos;abc&apos;, &apos;16&apos;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h2><p>  和寄生构造函数类似，不同的是： 1 构造函数中不能使用<code>this</code>；2 不能用<code>new</code>关键字调用构造函数； 3 可以定义私有变量，不能通过实例直接访问属性，有点像oop中的<code>私有属性</code>，哭，，<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name) &#123;</span><br><span class=\"line\">  var o =  new Object();</span><br><span class=\"line\">  // 可以定义私有变量</span><br><span class=\"line\">  o.sayName = function() &#123;</span><br><span class=\"line\">    alert(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1 = createPerson(&apos;abc&apos;);</span><br><span class=\"line\">p1.sayName();// 只能通过调用sayName方法访问属性。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\" target=\"_blank\" rel=\"noopener\">操作符</a> <code>in</code> <code>typeof</code> <code>instanceof</code> <code>delete</code><br>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a> 好神奇<br>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\">Function.prototype</a>.[call|aplly|bind|isGenerator|toSource|toString]</p>\n<p>  bind：改变this指向，不执行函数体，返回改变this后的函数引用<br>  call,apply: 改变this指向，执行函数体，返回执行结果<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.x=10;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  x: 100,</span><br><span class=\"line\">  num: function(desc) &#123;</span><br><span class=\"line\">    console.log(desc+this.x)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.x; // 100</span><br><span class=\"line\">obj.num(&apos;d&apos;); // 100</span><br><span class=\"line\">var b = obj.num;// 此刻的this为函数的this，指向全局</span><br><span class=\"line\">b(&apos;e&apos;); // 10</span><br><span class=\"line\">var b2 = b.bind(obj,&apos;a&apos;);</span><br><span class=\"line\">b2(&apos;f&apos;); // 100</span><br><span class=\"line\">var b3 = b.call(obj, &apos;b&apos;) // 100</span><br><span class=\"line\">var b3 = b.apply(obj, [&apos;c&apos;]) // 100</span><br></pre></td></tr></table></figure></p>\n<p>  this指向<br>  new一个对象都做了什么<br>  constructor属性指向构造函数,作用？ <a href=\"https://segmentfault.com/q/1010000000347868\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000000347868</a><br>  函数作用域，函数的this指向<br>  作用域（函数作用域，全局作用域，es6块作用域）<br>  好像没有删除原型属性的方法<br>  <a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"noopener\">参考网站</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>  <img src=\"/img/创建对象.png\" alt><br>  对象描述： 无序的key,value键值对</p>\n<blockquote>\n<p>整个对象发展的过程：<br>    ——》先是有个new一个对象的写法<br>      简化写法<br>    ——》对象字面量（可以使用对象写法）<br>      批量生产<br>    ——》工厂模式（new Object）<br>      区别自定义对象类型<br>    ——》构造函数类型（可以new 自定义类型, 构造函数定义来了）<br>      解决函数类型实例化造成的空间浪费<br>    ——》原型模式（出现原型对象）<br>      原型对象为实例共享，引用类型修改时会对其它实例造成影响<br>    ——》组合使用构造函数原型模式（1+1 = ？）<br>    …<br>  一系列的相关的问题<br>  this指向，改变this指向的途径，作用域，识别实例来自哪个构造函数，对象看成一个key,value列表因此出现元素遍历,区别实例属性原型链属相-&gt;for in-&gt;..</p>\n</blockquote>\n<h2 id=\"创建自定义对象\"><a href=\"#创建自定义对象\" class=\"headerlink\" title=\"创建自定义对象\"></a>创建自定义对象</h2><p>  对象字面量<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">  name: &apos;aa&apos;,</span><br><span class=\"line\">  age: 18</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Object实例创建</span><br><span class=\"line\">var person = new Object();</span><br><span class=\"line\">person.name = &apos;aa&apos;;</span><br><span class=\"line\">person.age = 18;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>  数据属性<br>  访问器属性： 封装一些组件时一些高级用法时使用</p>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age) &#123;</span><br><span class=\"line\">  var o =  new Object();</span><br><span class=\"line\">  o.name = name;</span><br><span class=\"line\">  o.age = age;</span><br><span class=\"line\">  return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1 = createPerson(&apos;abc&apos;, &apos;16&apos;);</span><br></pre></td></tr></table></figure>\n<p>  解决构造函数或者对象字面量重复的问题，就好比一个蛋糕模子，每次创造出一模一样的东西，缺点：无法区别这些蛋糕（没有解决对象的识别问题）</p>\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><p>  <img src=\"/img/构造函数执行过程.png\" alt><br>  与工厂模式比较有点是可以将实例识别为某一种特定的类型<br>  为了区别构造函数和普通函数构造函数首字符大写，构造函数本质就是普通函数，当使用关键字new的时候会产生神奇的变化<br>  1 创建新对象<br>  2 将构造函数的作用域赋值给新对象（this指向改变）<br>  3 执行构造函数的代码（为新对象添加属性）<br>  4 返回新对象</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person(name, age) &#123;</span><br><span class=\"line\">  this.name = name;</span><br><span class=\"line\">  this.age = age;</span><br><span class=\"line\">  console.log(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var p1 = new Person();</span><br></pre></td></tr></table></figure>\n<p>  缺点：属性为function类型时，多次创建实例的同时也会创建多个function实例</p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>  原型模式需要理清 构造函数，实例，原型对象之间的关系</p>\n<h3 id=\"1-理解原型对象\"><a href=\"#1-理解原型对象\" class=\"headerlink\" title=\"1 理解原型对象\"></a>1 理解原型对象</h3><p>  每个函数都有prototype属性，存储了原型对象。创建原型对象后会自动获取constructor属相，其余属性都是从Object上继承而来<br>  方法：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\">Person.prototype.name = &apos;name&apos;;</span><br><span class=\"line\">Person.prototype.age = &apos;agePro&apos;;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">person1.age = &apos;age&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">Person.prototype.isPrototypeOf(person1)// true;</span><br><span class=\"line\"></span><br><span class=\"line\">// 返回原型链上的值</span><br><span class=\"line\">Object.getPrototypeOf(person1);</span><br><span class=\"line\"></span><br><span class=\"line\">// 使用delete可以删除实例属性，那么就可以正常获取原型属性了</span><br><span class=\"line\">delete person1.age</span><br><span class=\"line\"></span><br><span class=\"line\">// hasOwnProperty,判断属相是否为实例属性</span><br><span class=\"line\">person1.hasOwnProperty(&apos;age&apos;) //boolean</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h3><p>  in 两种使用方式 单独使用/ for in 循环<br>  for in循环可以遍历可枚举的属性，因此位于原型或者实例的都可以扫描到<br>  in 使用<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;age&quot; in person1</span><br><span class=\"line\">// 判断属相属于实例还是原型：</span><br><span class=\"line\">function hasPrototypePropertype(obj, name) &#123;</span><br><span class=\"line\">  return !obj.hasOwnProperty(name) &amp;&amp; (name in obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// Object添加keys()属性，返回所有可枚举的属性（字符串数组）</span><br><span class=\"line\">Object.keys(person1)</span><br><span class=\"line\">// 返回所有属性，包括不可以枚举属性</span><br><span class=\"line\">Object.getOwnPropertyNames(person1)</span><br><span class=\"line\">Object.getOwnPropertyNames(Person.prototype)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  constructor: Person, // 需要添加这个，否则constructor指针将不指向person，重新设置constructor属性会导致该属性标记为可枚举类型，不过可以重新定义为definePropoty(Person.prototype, &apos;constructor&apos;, &#123;</span><br><span class=\"line\">    enumerable: false,</span><br><span class=\"line\">    value: Person</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  name: &apos;name&apos;,</span><br><span class=\"line\">  age: &apos;age&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"原型的动态性\"><a href=\"#原型的动态性\" class=\"headerlink\" title=\"原型的动态性\"></a>原型的动态性</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\">var p2 = new Person();</span><br><span class=\"line\">Person.prototype = &#123;</span><br><span class=\"line\">  constructor: Person,</span><br><span class=\"line\">  name: &apos;name&apos;,</span><br><span class=\"line\">  age: &apos;age&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p2.age // undefined</span><br><span class=\"line\"></span><br><span class=\"line\">function Person() &#123;&#125;</span><br><span class=\"line\">var person1 = new Person();</span><br><span class=\"line\">Person.prototype.name = &apos;name&apos;;</span><br><span class=\"line\">Person.prototype.age = &apos;agePro&apos;;</span><br><span class=\"line\">person1.age; // agePro</span><br></pre></td></tr></table></figure>\n<h3 id=\"原生对象的原型\"><a href=\"#原生对象的原型\" class=\"headerlink\" title=\"原生对象的原型\"></a>原生对象的原型</h3><p>  所有原生的引用类型都是通过原型模式创建的，他们都在构造函数的原型上添加了方法，因此可以给这些原生对象添加原型属性，这样不好，，</p>\n<h3 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h3><p>  实例可以更改引用类型的属性，导致其他的实例受影响</p>\n<h2 id=\"组合使用构造函数原型模式\"><a href=\"#组合使用构造函数原型模式\" class=\"headerlink\" title=\"组合使用构造函数原型模式\"></a>组合使用构造函数原型模式</h2><p>  没啥好说的，结合了两种模式的优点，是使用最广泛的模式了</p>\n<h2 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h2><p>  模仿其他oop语言，将所有信息封装在构造函数中。增加<code>if</code>判断语句，在执行构造函数时初始化实例方法。</p>\n<h2 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h2><p>  和工厂模式一样，除了实例化时使用了new关键字调用构造函数,在某些特殊情况使用，比如创建一个具有额外方法的数组。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name, age) &#123;</span><br><span class=\"line\">  var o =  new Object();</span><br><span class=\"line\">  o.name = name;</span><br><span class=\"line\">  o.age = age;</span><br><span class=\"line\">  return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1 = new createPerson(&apos;abc&apos;, &apos;16&apos;);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h2><p>  和寄生构造函数类似，不同的是： 1 构造函数中不能使用<code>this</code>；2 不能用<code>new</code>关键字调用构造函数； 3 可以定义私有变量，不能通过实例直接访问属性，有点像oop中的<code>私有属性</code>，哭，，<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name) &#123;</span><br><span class=\"line\">  var o =  new Object();</span><br><span class=\"line\">  // 可以定义私有变量</span><br><span class=\"line\">  o.sayName = function() &#123;</span><br><span class=\"line\">    alert(name)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1 = createPerson(&apos;abc&apos;);</span><br><span class=\"line\">p1.sayName();// 只能通过调用sayName方法访问属性。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\" target=\"_blank\" rel=\"noopener\">操作符</a> <code>in</code> <code>typeof</code> <code>instanceof</code> <code>delete</code><br>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a> 好神奇<br>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"noopener\">Function.prototype</a>.[call|aplly|bind|isGenerator|toSource|toString]</p>\n<p>  bind：改变this指向，不执行函数体，返回改变this后的函数引用<br>  call,apply: 改变this指向，执行函数体，返回执行结果<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.x=10;</span><br><span class=\"line\">var obj = &#123;</span><br><span class=\"line\">  x: 100,</span><br><span class=\"line\">  num: function(desc) &#123;</span><br><span class=\"line\">    console.log(desc+this.x)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.x; // 100</span><br><span class=\"line\">obj.num(&apos;d&apos;); // 100</span><br><span class=\"line\">var b = obj.num;// 此刻的this为函数的this，指向全局</span><br><span class=\"line\">b(&apos;e&apos;); // 10</span><br><span class=\"line\">var b2 = b.bind(obj,&apos;a&apos;);</span><br><span class=\"line\">b2(&apos;f&apos;); // 100</span><br><span class=\"line\">var b3 = b.call(obj, &apos;b&apos;) // 100</span><br><span class=\"line\">var b3 = b.apply(obj, [&apos;c&apos;]) // 100</span><br></pre></td></tr></table></figure></p>\n<p>  this指向<br>  new一个对象都做了什么<br>  constructor属性指向构造函数,作用？ <a href=\"https://segmentfault.com/q/1010000000347868\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/q/1010000000347868</a><br>  函数作用域，函数的this指向<br>  作用域（函数作用域，全局作用域，es6块作用域）<br>  好像没有删除原型属性的方法<br>  <a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"noopener\">参考网站</a></p>\n"},{"title":"初识MongoDB","date":"2018-03-23T13:35:47.000Z","_content":"\n## 初识mongo\n  >认识\n  1 非关系型数据库，缺点是当两张表需要建立连接的时候处理起来比较麻烦\n  2 以集合的方式操作和保存数据\n  3 非常轻量，和node搭配实现了前端可以方便对数据进行存取，让前端找到了存在感..\n\n## 安装和使用\n  >1 [下载](https://www.mongodb.com/download-center#community)\n  2 在mac中直接解压，进入二进制文件夹`bin`目录\n  3 启动数据库，并制定数据存放位置\n  ```\n  cd Applications/mongodb/bin\n  ./mongod --dbpath /Users/lvjingjing/mongo-data\n  ```\n  >4 在可视化工具(`robo 3T`)中查看数据. [下载](https://robomongo.org/download) [基本使用](https://www.cnblogs.com/dacongge/p/7346037.html)\n\n## 方法封装\n  - 通过下面的封装方法记录mongo基本的增删改查,以及node中如何引入mongodb\n  ```\n  /**\n   * Created by Danny on 2015/9/25 9:31.\n   */\n  //这个模块里面封装了所有对数据库的常用操作\n  var MongoClient = require('mongodb').MongoClient;\n  var settings = require(\"../settings.js\");\n  //不管数据库什么操作，都是先连接数据库，所以我们可以把连接数据库\n  //封装成为内部函数\n  function _connectDB(callback) {\n      // \"dburl\" : \"mongodb://localhost:27017/test\", test对应的数据库\n      var url = settings.dburl;   //从settings文件中，都数据库地址\n      //连接数据库\n      MongoClient.connect(url, function (err, db) {\n          if (err) {\n              callback(err, null);\n              return;\n          }\n          callback(err, db);\n      });\n  }\n\n  init();\n\n  function init(){\n      //对数据库进行一个初始化\n      _connectDB(function(err, db){\n          if (err) {\n              console.log(err);\n              return;\n          }\n          db.collection('users').createIndex(\n              { \"username\": 1},\n              null,\n              function(err, results) {\n                  if (err) {\n                      console.log(err);\n                      return;\n                  }\n                  console.log(\"索引建立成功\");\n              }\n          );\n      });\n  }\n\n  //插入数据\n  exports.insertOne = function (collectionName, json, callback) {\n      _connectDB(function (err, db) {\n          db.collection(collectionName).insertOne(json, function (err, result) {\n              callback(err, result);\n              db.close(); //关闭数据库\n          })\n      })\n  };\n\n  //查找数据，找到所有数据。args是个对象{\"pageamount\":10,\"page\":10}\n  exports.find = function (collectionName, json, C, D) {\n      var result = [];    //结果数组\n      if (arguments.length == 3) {\n          //那么参数C就是callback，参数D没有传。\n          var callback = C;\n          var skipnumber = 0;\n          //数目限制\n          var limit = 0;\n      } else if (arguments.length == 4) {\n          var callback = D;\n          var args = C;\n          //应该省略的条数\n          var skipnumber = args.pageamount * args.page || 0;\n          //数目限制\n          var limit = args.pageamount || 0;\n          //排序方式\n          var sort = args.sort || {};\n      } else {\n          throw new Error(\"find函数的参数个数，必须是3个，或者4个。\");\n          return;\n      }\n\n      //连接数据库，连接之后查找所有\n      _connectDB(function (err, db) {\n          var cursor = db.collection(collectionName).find(json).skip(skipnumber).limit(limit).sort(sort);\n          cursor.each(function (err, doc) {\n              if (err) {\n                  callback(err, null);\n                  db.close(); //关闭数据库\n                  return;\n              }\n              if (doc != null) {\n                  result.push(doc);   //放入结果数组\n              } else {\n                  //遍历结束，没有更多的文档了\n                  callback(null, result);\n                  db.close(); //关闭数据库\n              }\n          });\n      });\n  }\n\n  //删除\n  exports.deleteMany = function (collectionName, json, callback) {\n      _connectDB(function (err, db) {\n          //删除\n          db.collection(collectionName).deleteMany(\n              json,\n              function (err, results) {\n                  callback(err, results);\n                  db.close(); //关闭数据库\n              }\n          );\n      });\n  }\n\n  //修改\n  exports.updateMany = function (collectionName, json1, json2, callback) {\n      _connectDB(function (err, db) {\n          db.collection(collectionName).updateMany(\n              json1,\n              json2,\n              function (err, results) {\n                  callback(err, results);\n                  db.close();\n              });\n      })\n  }\n\n  //得到总数量\n  exports.getAllCount = function (collectionName,callback) {\n      _connectDB(function (err, db) {\n          db.collection(collectionName).count({}).then(function(count) {\n              callback(count);\n              db.close();\n          });\n      })\n  }\n\n  ```\n","source":"_posts/初识MongoDB.md","raw":"---\ntitle: 初识MongoDB\ndate: 2018-03-23 09:35:47\ncategories: 服务端\ntags: mongo\n---\n\n## 初识mongo\n  >认识\n  1 非关系型数据库，缺点是当两张表需要建立连接的时候处理起来比较麻烦\n  2 以集合的方式操作和保存数据\n  3 非常轻量，和node搭配实现了前端可以方便对数据进行存取，让前端找到了存在感..\n\n## 安装和使用\n  >1 [下载](https://www.mongodb.com/download-center#community)\n  2 在mac中直接解压，进入二进制文件夹`bin`目录\n  3 启动数据库，并制定数据存放位置\n  ```\n  cd Applications/mongodb/bin\n  ./mongod --dbpath /Users/lvjingjing/mongo-data\n  ```\n  >4 在可视化工具(`robo 3T`)中查看数据. [下载](https://robomongo.org/download) [基本使用](https://www.cnblogs.com/dacongge/p/7346037.html)\n\n## 方法封装\n  - 通过下面的封装方法记录mongo基本的增删改查,以及node中如何引入mongodb\n  ```\n  /**\n   * Created by Danny on 2015/9/25 9:31.\n   */\n  //这个模块里面封装了所有对数据库的常用操作\n  var MongoClient = require('mongodb').MongoClient;\n  var settings = require(\"../settings.js\");\n  //不管数据库什么操作，都是先连接数据库，所以我们可以把连接数据库\n  //封装成为内部函数\n  function _connectDB(callback) {\n      // \"dburl\" : \"mongodb://localhost:27017/test\", test对应的数据库\n      var url = settings.dburl;   //从settings文件中，都数据库地址\n      //连接数据库\n      MongoClient.connect(url, function (err, db) {\n          if (err) {\n              callback(err, null);\n              return;\n          }\n          callback(err, db);\n      });\n  }\n\n  init();\n\n  function init(){\n      //对数据库进行一个初始化\n      _connectDB(function(err, db){\n          if (err) {\n              console.log(err);\n              return;\n          }\n          db.collection('users').createIndex(\n              { \"username\": 1},\n              null,\n              function(err, results) {\n                  if (err) {\n                      console.log(err);\n                      return;\n                  }\n                  console.log(\"索引建立成功\");\n              }\n          );\n      });\n  }\n\n  //插入数据\n  exports.insertOne = function (collectionName, json, callback) {\n      _connectDB(function (err, db) {\n          db.collection(collectionName).insertOne(json, function (err, result) {\n              callback(err, result);\n              db.close(); //关闭数据库\n          })\n      })\n  };\n\n  //查找数据，找到所有数据。args是个对象{\"pageamount\":10,\"page\":10}\n  exports.find = function (collectionName, json, C, D) {\n      var result = [];    //结果数组\n      if (arguments.length == 3) {\n          //那么参数C就是callback，参数D没有传。\n          var callback = C;\n          var skipnumber = 0;\n          //数目限制\n          var limit = 0;\n      } else if (arguments.length == 4) {\n          var callback = D;\n          var args = C;\n          //应该省略的条数\n          var skipnumber = args.pageamount * args.page || 0;\n          //数目限制\n          var limit = args.pageamount || 0;\n          //排序方式\n          var sort = args.sort || {};\n      } else {\n          throw new Error(\"find函数的参数个数，必须是3个，或者4个。\");\n          return;\n      }\n\n      //连接数据库，连接之后查找所有\n      _connectDB(function (err, db) {\n          var cursor = db.collection(collectionName).find(json).skip(skipnumber).limit(limit).sort(sort);\n          cursor.each(function (err, doc) {\n              if (err) {\n                  callback(err, null);\n                  db.close(); //关闭数据库\n                  return;\n              }\n              if (doc != null) {\n                  result.push(doc);   //放入结果数组\n              } else {\n                  //遍历结束，没有更多的文档了\n                  callback(null, result);\n                  db.close(); //关闭数据库\n              }\n          });\n      });\n  }\n\n  //删除\n  exports.deleteMany = function (collectionName, json, callback) {\n      _connectDB(function (err, db) {\n          //删除\n          db.collection(collectionName).deleteMany(\n              json,\n              function (err, results) {\n                  callback(err, results);\n                  db.close(); //关闭数据库\n              }\n          );\n      });\n  }\n\n  //修改\n  exports.updateMany = function (collectionName, json1, json2, callback) {\n      _connectDB(function (err, db) {\n          db.collection(collectionName).updateMany(\n              json1,\n              json2,\n              function (err, results) {\n                  callback(err, results);\n                  db.close();\n              });\n      })\n  }\n\n  //得到总数量\n  exports.getAllCount = function (collectionName,callback) {\n      _connectDB(function (err, db) {\n          db.collection(collectionName).count({}).then(function(count) {\n              callback(count);\n              db.close();\n          });\n      })\n  }\n\n  ```\n","slug":"初识MongoDB","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3y0016zs8qhr1d1zmv","content":"<h2 id=\"初识mongo\"><a href=\"#初识mongo\" class=\"headerlink\" title=\"初识mongo\"></a>初识mongo</h2><blockquote>\n<p>认识<br>  1 非关系型数据库，缺点是当两张表需要建立连接的时候处理起来比较麻烦<br>  2 以集合的方式操作和保存数据<br>  3 非常轻量，和node搭配实现了前端可以方便对数据进行存取，让前端找到了存在感..</p>\n</blockquote>\n<h2 id=\"安装和使用\"><a href=\"#安装和使用\" class=\"headerlink\" title=\"安装和使用\"></a>安装和使用</h2><blockquote>\n<p>1 <a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"noopener\">下载</a><br>  2 在mac中直接解压，进入二进制文件夹<code>bin</code>目录<br>  3 启动数据库，并制定数据存放位置<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Applications/mongodb/bin</span><br><span class=\"line\">./mongod --dbpath /Users/lvjingjing/mongo-data</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>4 在可视化工具(<code>robo 3T</code>)中查看数据. <a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">下载</a> <a href=\"https://www.cnblogs.com/dacongge/p/7346037.html\" target=\"_blank\" rel=\"noopener\">基本使用</a></p>\n</blockquote>\n<h2 id=\"方法封装\"><a href=\"#方法封装\" class=\"headerlink\" title=\"方法封装\"></a>方法封装</h2><ul>\n<li>通过下面的封装方法记录mongo基本的增删改查,以及node中如何引入mongodb<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by Danny on 2015/9/25 9:31.</span><br><span class=\"line\"> */</span><br><span class=\"line\">//这个模块里面封装了所有对数据库的常用操作</span><br><span class=\"line\">var MongoClient = require(&apos;mongodb&apos;).MongoClient;</span><br><span class=\"line\">var settings = require(&quot;../settings.js&quot;);</span><br><span class=\"line\">//不管数据库什么操作，都是先连接数据库，所以我们可以把连接数据库</span><br><span class=\"line\">//封装成为内部函数</span><br><span class=\"line\">function _connectDB(callback) &#123;</span><br><span class=\"line\">    // &quot;dburl&quot; : &quot;mongodb://localhost:27017/test&quot;, test对应的数据库</span><br><span class=\"line\">    var url = settings.dburl;   //从settings文件中，都数据库地址</span><br><span class=\"line\">    //连接数据库</span><br><span class=\"line\">    MongoClient.connect(url, function (err, db) &#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            callback(err, null);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(err, db);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">init();</span><br><span class=\"line\"></span><br><span class=\"line\">function init()&#123;</span><br><span class=\"line\">    //对数据库进行一个初始化</span><br><span class=\"line\">    _connectDB(function(err, db)&#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(err);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        db.collection(&apos;users&apos;).createIndex(</span><br><span class=\"line\">            &#123; &quot;username&quot;: 1&#125;,</span><br><span class=\"line\">            null,</span><br><span class=\"line\">            function(err, results) &#123;</span><br><span class=\"line\">                if (err) &#123;</span><br><span class=\"line\">                    console.log(err);</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                console.log(&quot;索引建立成功&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//插入数据</span><br><span class=\"line\">exports.insertOne = function (collectionName, json, callback) &#123;</span><br><span class=\"line\">    _connectDB(function (err, db) &#123;</span><br><span class=\"line\">        db.collection(collectionName).insertOne(json, function (err, result) &#123;</span><br><span class=\"line\">            callback(err, result);</span><br><span class=\"line\">            db.close(); //关闭数据库</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//查找数据，找到所有数据。args是个对象&#123;&quot;pageamount&quot;:10,&quot;page&quot;:10&#125;</span><br><span class=\"line\">exports.find = function (collectionName, json, C, D) &#123;</span><br><span class=\"line\">    var result = [];    //结果数组</span><br><span class=\"line\">    if (arguments.length == 3) &#123;</span><br><span class=\"line\">        //那么参数C就是callback，参数D没有传。</span><br><span class=\"line\">        var callback = C;</span><br><span class=\"line\">        var skipnumber = 0;</span><br><span class=\"line\">        //数目限制</span><br><span class=\"line\">        var limit = 0;</span><br><span class=\"line\">    &#125; else if (arguments.length == 4) &#123;</span><br><span class=\"line\">        var callback = D;</span><br><span class=\"line\">        var args = C;</span><br><span class=\"line\">        //应该省略的条数</span><br><span class=\"line\">        var skipnumber = args.pageamount * args.page || 0;</span><br><span class=\"line\">        //数目限制</span><br><span class=\"line\">        var limit = args.pageamount || 0;</span><br><span class=\"line\">        //排序方式</span><br><span class=\"line\">        var sort = args.sort || &#123;&#125;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new Error(&quot;find函数的参数个数，必须是3个，或者4个。&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //连接数据库，连接之后查找所有</span><br><span class=\"line\">    _connectDB(function (err, db) &#123;</span><br><span class=\"line\">        var cursor = db.collection(collectionName).find(json).skip(skipnumber).limit(limit).sort(sort);</span><br><span class=\"line\">        cursor.each(function (err, doc) &#123;</span><br><span class=\"line\">            if (err) &#123;</span><br><span class=\"line\">                callback(err, null);</span><br><span class=\"line\">                db.close(); //关闭数据库</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (doc != null) &#123;</span><br><span class=\"line\">                result.push(doc);   //放入结果数组</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                //遍历结束，没有更多的文档了</span><br><span class=\"line\">                callback(null, result);</span><br><span class=\"line\">                db.close(); //关闭数据库</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//删除</span><br><span class=\"line\">exports.deleteMany = function (collectionName, json, callback) &#123;</span><br><span class=\"line\">    _connectDB(function (err, db) &#123;</span><br><span class=\"line\">        //删除</span><br><span class=\"line\">        db.collection(collectionName).deleteMany(</span><br><span class=\"line\">            json,</span><br><span class=\"line\">            function (err, results) &#123;</span><br><span class=\"line\">                callback(err, results);</span><br><span class=\"line\">                db.close(); //关闭数据库</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//修改</span><br><span class=\"line\">exports.updateMany = function (collectionName, json1, json2, callback) &#123;</span><br><span class=\"line\">    _connectDB(function (err, db) &#123;</span><br><span class=\"line\">        db.collection(collectionName).updateMany(</span><br><span class=\"line\">            json1,</span><br><span class=\"line\">            json2,</span><br><span class=\"line\">            function (err, results) &#123;</span><br><span class=\"line\">                callback(err, results);</span><br><span class=\"line\">                db.close();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//得到总数量</span><br><span class=\"line\">exports.getAllCount = function (collectionName,callback) &#123;</span><br><span class=\"line\">    _connectDB(function (err, db) &#123;</span><br><span class=\"line\">        db.collection(collectionName).count(&#123;&#125;).then(function(count) &#123;</span><br><span class=\"line\">            callback(count);</span><br><span class=\"line\">            db.close();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"初识mongo\"><a href=\"#初识mongo\" class=\"headerlink\" title=\"初识mongo\"></a>初识mongo</h2><blockquote>\n<p>认识<br>  1 非关系型数据库，缺点是当两张表需要建立连接的时候处理起来比较麻烦<br>  2 以集合的方式操作和保存数据<br>  3 非常轻量，和node搭配实现了前端可以方便对数据进行存取，让前端找到了存在感..</p>\n</blockquote>\n<h2 id=\"安装和使用\"><a href=\"#安装和使用\" class=\"headerlink\" title=\"安装和使用\"></a>安装和使用</h2><blockquote>\n<p>1 <a href=\"https://www.mongodb.com/download-center#community\" target=\"_blank\" rel=\"noopener\">下载</a><br>  2 在mac中直接解压，进入二进制文件夹<code>bin</code>目录<br>  3 启动数据库，并制定数据存放位置<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd Applications/mongodb/bin</span><br><span class=\"line\">./mongod --dbpath /Users/lvjingjing/mongo-data</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>4 在可视化工具(<code>robo 3T</code>)中查看数据. <a href=\"https://robomongo.org/download\" target=\"_blank\" rel=\"noopener\">下载</a> <a href=\"https://www.cnblogs.com/dacongge/p/7346037.html\" target=\"_blank\" rel=\"noopener\">基本使用</a></p>\n</blockquote>\n<h2 id=\"方法封装\"><a href=\"#方法封装\" class=\"headerlink\" title=\"方法封装\"></a>方法封装</h2><ul>\n<li>通过下面的封装方法记录mongo基本的增删改查,以及node中如何引入mongodb<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * Created by Danny on 2015/9/25 9:31.</span><br><span class=\"line\"> */</span><br><span class=\"line\">//这个模块里面封装了所有对数据库的常用操作</span><br><span class=\"line\">var MongoClient = require(&apos;mongodb&apos;).MongoClient;</span><br><span class=\"line\">var settings = require(&quot;../settings.js&quot;);</span><br><span class=\"line\">//不管数据库什么操作，都是先连接数据库，所以我们可以把连接数据库</span><br><span class=\"line\">//封装成为内部函数</span><br><span class=\"line\">function _connectDB(callback) &#123;</span><br><span class=\"line\">    // &quot;dburl&quot; : &quot;mongodb://localhost:27017/test&quot;, test对应的数据库</span><br><span class=\"line\">    var url = settings.dburl;   //从settings文件中，都数据库地址</span><br><span class=\"line\">    //连接数据库</span><br><span class=\"line\">    MongoClient.connect(url, function (err, db) &#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            callback(err, null);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        callback(err, db);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">init();</span><br><span class=\"line\"></span><br><span class=\"line\">function init()&#123;</span><br><span class=\"line\">    //对数据库进行一个初始化</span><br><span class=\"line\">    _connectDB(function(err, db)&#123;</span><br><span class=\"line\">        if (err) &#123;</span><br><span class=\"line\">            console.log(err);</span><br><span class=\"line\">            return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        db.collection(&apos;users&apos;).createIndex(</span><br><span class=\"line\">            &#123; &quot;username&quot;: 1&#125;,</span><br><span class=\"line\">            null,</span><br><span class=\"line\">            function(err, results) &#123;</span><br><span class=\"line\">                if (err) &#123;</span><br><span class=\"line\">                    console.log(err);</span><br><span class=\"line\">                    return;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                console.log(&quot;索引建立成功&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//插入数据</span><br><span class=\"line\">exports.insertOne = function (collectionName, json, callback) &#123;</span><br><span class=\"line\">    _connectDB(function (err, db) &#123;</span><br><span class=\"line\">        db.collection(collectionName).insertOne(json, function (err, result) &#123;</span><br><span class=\"line\">            callback(err, result);</span><br><span class=\"line\">            db.close(); //关闭数据库</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//查找数据，找到所有数据。args是个对象&#123;&quot;pageamount&quot;:10,&quot;page&quot;:10&#125;</span><br><span class=\"line\">exports.find = function (collectionName, json, C, D) &#123;</span><br><span class=\"line\">    var result = [];    //结果数组</span><br><span class=\"line\">    if (arguments.length == 3) &#123;</span><br><span class=\"line\">        //那么参数C就是callback，参数D没有传。</span><br><span class=\"line\">        var callback = C;</span><br><span class=\"line\">        var skipnumber = 0;</span><br><span class=\"line\">        //数目限制</span><br><span class=\"line\">        var limit = 0;</span><br><span class=\"line\">    &#125; else if (arguments.length == 4) &#123;</span><br><span class=\"line\">        var callback = D;</span><br><span class=\"line\">        var args = C;</span><br><span class=\"line\">        //应该省略的条数</span><br><span class=\"line\">        var skipnumber = args.pageamount * args.page || 0;</span><br><span class=\"line\">        //数目限制</span><br><span class=\"line\">        var limit = args.pageamount || 0;</span><br><span class=\"line\">        //排序方式</span><br><span class=\"line\">        var sort = args.sort || &#123;&#125;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        throw new Error(&quot;find函数的参数个数，必须是3个，或者4个。&quot;);</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //连接数据库，连接之后查找所有</span><br><span class=\"line\">    _connectDB(function (err, db) &#123;</span><br><span class=\"line\">        var cursor = db.collection(collectionName).find(json).skip(skipnumber).limit(limit).sort(sort);</span><br><span class=\"line\">        cursor.each(function (err, doc) &#123;</span><br><span class=\"line\">            if (err) &#123;</span><br><span class=\"line\">                callback(err, null);</span><br><span class=\"line\">                db.close(); //关闭数据库</span><br><span class=\"line\">                return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (doc != null) &#123;</span><br><span class=\"line\">                result.push(doc);   //放入结果数组</span><br><span class=\"line\">            &#125; else &#123;</span><br><span class=\"line\">                //遍历结束，没有更多的文档了</span><br><span class=\"line\">                callback(null, result);</span><br><span class=\"line\">                db.close(); //关闭数据库</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//删除</span><br><span class=\"line\">exports.deleteMany = function (collectionName, json, callback) &#123;</span><br><span class=\"line\">    _connectDB(function (err, db) &#123;</span><br><span class=\"line\">        //删除</span><br><span class=\"line\">        db.collection(collectionName).deleteMany(</span><br><span class=\"line\">            json,</span><br><span class=\"line\">            function (err, results) &#123;</span><br><span class=\"line\">                callback(err, results);</span><br><span class=\"line\">                db.close(); //关闭数据库</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//修改</span><br><span class=\"line\">exports.updateMany = function (collectionName, json1, json2, callback) &#123;</span><br><span class=\"line\">    _connectDB(function (err, db) &#123;</span><br><span class=\"line\">        db.collection(collectionName).updateMany(</span><br><span class=\"line\">            json1,</span><br><span class=\"line\">            json2,</span><br><span class=\"line\">            function (err, results) &#123;</span><br><span class=\"line\">                callback(err, results);</span><br><span class=\"line\">                db.close();</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//得到总数量</span><br><span class=\"line\">exports.getAllCount = function (collectionName,callback) &#123;</span><br><span class=\"line\">    _connectDB(function (err, db) &#123;</span><br><span class=\"line\">        db.collection(collectionName).count(&#123;&#125;).then(function(count) &#123;</span><br><span class=\"line\">            callback(count);</span><br><span class=\"line\">            db.close();</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n"},{"title":"动画基础","date":"2018-10-19T21:44:57.000Z","_content":"\n![](/img/动画基础.png)\n[图片地址](https://www.processon.com/mindmap/5bc9a911e4b0bd4db96c4994)\n\n>学习动画模块我企图分为两部分，`1`动画基础；`2`查看大型框架对动画应用。很显然第二部分力不存心，这是一份拖了很久的动画总结\n`隐式过渡`: 通常我们修改元素样式反生改变我们称为隐式过渡，因为转变的完成由浏览器决定。\n`css transition`: 现在我们加入动画，那么可以决定哪些属性发生动画效果 (property)，何时开始 (delay），持续多久 (duration) 以及如何动画 (定义timing funtion)。\n\n## 动画的基本使用\n### transition\n  ```\n  <body>\n    <div class=\"box\" click=\"\">\n      盒子\n    </div>\n  </body>\n  <style>\n    .box {\n      border: 1px solid;\n      width: 100px;\n      height: 100px;\n      transition: 1s;\n    }\n    .box.move {\n      transform: translate(200px, 200px);\n    }\n  </style>\n  <script type=\"text/javascript\">\n  const box = document.querySelector('.box')\n  box.addEventListener('click', function() {\n    box.classList.toggle('move')\n  })\n  </script>\n  ```\n### animation\n  ```\n  <body>\n    <div class=\"box\">\n      盒子\n    </div>\n    <p>Move your mouse over the grey box</p>\n    <div class=\"demo\">\n      <div class=\"grows\">This just grows</div>\n      <div class=\"growsandstays\">This grows and stays big</div>\n    </div>\n  </body>\n  <style>\n    .box {\n      border: 1px solid;\n      width: 100px;\n      height: 100px;\n      animation-name: moveBox;\n      animation-duration: 1300ms;\n      animation-iteration-count: infinite;\n      animation-direction: alternate;\n    }\n    @keyframes moveBox {\n      0% {\n        transform: translate(0, 0);\n        opacity: 0.1;\n      }\n      25% {\n        opacity: 0.3\n        transform: translate(100px, 100px);\n      }\n      50% {\n        opacity: 0.6\n        transform: translate(200px, 200px);\n      }\n      100% {\n        opacity: 0.9;\n        transform: translate(300px, 300px);\n      }\n    }\n\n    .demo {\n      border-top: 100px solid #ccc;\n      height: 300px;\n      font-family: sans-serif;\n      font-size: 14px;\n    }\n    /* @keyframes grow {\n        0% { font-size: 0 }\n        100% { font-size: 40px }\n    } */\n    /* .demo:hover .grows {\n        animation-name: grow;\n        animation-duration: 3s;\n    } */\n    /* .demo:hover .growsandstays {\n        animation-name: grow;\n        animation-duration: 3s;\n        animation-fill-mode: both;\n    } */\n    @keyframes slidein {\n      from { transform: scaleX(0); }\n      to   { transform: scaleX(1); }\n    }\n    .demo:hover .grows {\n        animation: running slidein 3s ease-in 1s infinite reverse both;\n    }\n  </style>\n  ```\n### web animation API\n  ```\n  <body>\n    <div class=\"box\">\n      盒子\n    </div>\n  </body>\n  <style>\n    .box {\n      border: 1px solid;\n      width: 100px;\n      height: 100px;\n    }\n  </style>\n  <script type=\"text/javascript\">\n    const box = document.querySelector('.box')\n    let player = box.animate([\n      { transform: 'translate(0)' },\n      { transform: 'translate(200px, 200px)' }\n    ], 500)\n    box.addEventListener('click', () => {\n      player.play()\n    })\n\n    player.addEventListener('finish', function() {\n      box.style.transform = 'translate(100px, 100px)';\n      console.log(player)\n    });\n  </script>\n  ```\n### 简单的案例\n  ```\n  <body>\n    <div class=\"container\">\n      <div class=\"view list\">\n        <span class=\"detail-btn\">detail</span>\n        <span class=\"show-modeal\">show-modeal</span>\n      </div>\n      <div class=\"view details\">\n        <span class=\"back-btn\">back</span>\n      </div>\n    </div>\n    <div class=\"modal\"></div>\n  </body>\n  <style>\n  body {\n    margin: 0;\n  }\n  .container {\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n    position: relative;\n  }\n  .view {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    background: #ccc;\n    transition: transform 0.3s cubic-bezier(0.465, 0.183, 0.153, 0.946);\n\n    /*\n      [will-change]:(https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change)\n      let the browser know we plan to animate each view in and out\n    */\n    will-change: transform;\n  }\n\n  .details {\n    background: green;\n    transform: translateX(100%);\n  }\n  .view-change .list {\n    transform: translateX(-100%);\n  }\n  .view-change .details {\n    transform: translateX(0);\n  }\n\n  .modal {\n    position: fixed;\n    top: 100px;\n    left: 100px;\n    width: 100px;\n    height: 100px;\n    background: red;\n    z-index: 100;\n    pointer-events: none;\n\n    opacity: 0;\n    transform: scale(1.15);\n    transition:\n      transform 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946),\n      opacity 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946);\n\n    will-change: transform, opacity;\n  }\n  .modal.visible {\n    pointer-events: auto;\n    transform: scale(1);\n    opacity: 1;\n  }\n  </style>\n  <script type=\"text/javascript\">\n    const detailBtn = document.querySelector('.detail-btn')\n    const backBtn = document.querySelector('.back-btn')\n    const container = document.querySelector('.container')\n    const showModeal = document.querySelector('.show-modeal')\n    const modal = document.querySelector('.modal')\n    detailBtn.addEventListener('click', () => {\n      container.classList.toggle('view-change')\n    })\n    backBtn.addEventListener('click', () => {\n      container.classList.toggle('view-change')\n    })\n    showModeal.addEventListener('click', () => {\n      modal.classList.toggle('visible')\n    })\n    modal.addEventListener('click', () => {\n      modal.classList.toggle('visible')\n    })\n  </script>\n  ```\n\n## 其他\n>动画用法比起其他的样式属性稍稍多了一些，动画在在页面展示中还是比较重要的。比如当一个alert弹窗出现时，`迅速弹出让用户感觉比较快的响应，稍稍慢一些关闭给人一种缓和的感觉，这样播放动画会给人一种比较友好的感觉`。现在的开发中多数被封装在了框架中，我们可以轻松的实现动画。\n\n[贝塞尔曲线介绍](http://www.html-js.com/article/1628)\n[transition](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions)\n[animation](https://developer.mozilla.org/en-US/docs/Web/CSS/animation)\n[动画详解](https://developers.google.cn/web/fundamentals/design-and-ux/animations/)\n[动画性能](https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/)\n[缓动函数](https://easings.net/zh-cn)\n","source":"_posts/动画基础.md","raw":"---\ntitle: 动画基础\ndate: 2018-10-19 17:44:57\ncategories: 基础\ntags: 动画\n---\n\n![](/img/动画基础.png)\n[图片地址](https://www.processon.com/mindmap/5bc9a911e4b0bd4db96c4994)\n\n>学习动画模块我企图分为两部分，`1`动画基础；`2`查看大型框架对动画应用。很显然第二部分力不存心，这是一份拖了很久的动画总结\n`隐式过渡`: 通常我们修改元素样式反生改变我们称为隐式过渡，因为转变的完成由浏览器决定。\n`css transition`: 现在我们加入动画，那么可以决定哪些属性发生动画效果 (property)，何时开始 (delay），持续多久 (duration) 以及如何动画 (定义timing funtion)。\n\n## 动画的基本使用\n### transition\n  ```\n  <body>\n    <div class=\"box\" click=\"\">\n      盒子\n    </div>\n  </body>\n  <style>\n    .box {\n      border: 1px solid;\n      width: 100px;\n      height: 100px;\n      transition: 1s;\n    }\n    .box.move {\n      transform: translate(200px, 200px);\n    }\n  </style>\n  <script type=\"text/javascript\">\n  const box = document.querySelector('.box')\n  box.addEventListener('click', function() {\n    box.classList.toggle('move')\n  })\n  </script>\n  ```\n### animation\n  ```\n  <body>\n    <div class=\"box\">\n      盒子\n    </div>\n    <p>Move your mouse over the grey box</p>\n    <div class=\"demo\">\n      <div class=\"grows\">This just grows</div>\n      <div class=\"growsandstays\">This grows and stays big</div>\n    </div>\n  </body>\n  <style>\n    .box {\n      border: 1px solid;\n      width: 100px;\n      height: 100px;\n      animation-name: moveBox;\n      animation-duration: 1300ms;\n      animation-iteration-count: infinite;\n      animation-direction: alternate;\n    }\n    @keyframes moveBox {\n      0% {\n        transform: translate(0, 0);\n        opacity: 0.1;\n      }\n      25% {\n        opacity: 0.3\n        transform: translate(100px, 100px);\n      }\n      50% {\n        opacity: 0.6\n        transform: translate(200px, 200px);\n      }\n      100% {\n        opacity: 0.9;\n        transform: translate(300px, 300px);\n      }\n    }\n\n    .demo {\n      border-top: 100px solid #ccc;\n      height: 300px;\n      font-family: sans-serif;\n      font-size: 14px;\n    }\n    /* @keyframes grow {\n        0% { font-size: 0 }\n        100% { font-size: 40px }\n    } */\n    /* .demo:hover .grows {\n        animation-name: grow;\n        animation-duration: 3s;\n    } */\n    /* .demo:hover .growsandstays {\n        animation-name: grow;\n        animation-duration: 3s;\n        animation-fill-mode: both;\n    } */\n    @keyframes slidein {\n      from { transform: scaleX(0); }\n      to   { transform: scaleX(1); }\n    }\n    .demo:hover .grows {\n        animation: running slidein 3s ease-in 1s infinite reverse both;\n    }\n  </style>\n  ```\n### web animation API\n  ```\n  <body>\n    <div class=\"box\">\n      盒子\n    </div>\n  </body>\n  <style>\n    .box {\n      border: 1px solid;\n      width: 100px;\n      height: 100px;\n    }\n  </style>\n  <script type=\"text/javascript\">\n    const box = document.querySelector('.box')\n    let player = box.animate([\n      { transform: 'translate(0)' },\n      { transform: 'translate(200px, 200px)' }\n    ], 500)\n    box.addEventListener('click', () => {\n      player.play()\n    })\n\n    player.addEventListener('finish', function() {\n      box.style.transform = 'translate(100px, 100px)';\n      console.log(player)\n    });\n  </script>\n  ```\n### 简单的案例\n  ```\n  <body>\n    <div class=\"container\">\n      <div class=\"view list\">\n        <span class=\"detail-btn\">detail</span>\n        <span class=\"show-modeal\">show-modeal</span>\n      </div>\n      <div class=\"view details\">\n        <span class=\"back-btn\">back</span>\n      </div>\n    </div>\n    <div class=\"modal\"></div>\n  </body>\n  <style>\n  body {\n    margin: 0;\n  }\n  .container {\n    width: 100%;\n    height: 100vh;\n    overflow: hidden;\n    position: relative;\n  }\n  .view {\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    background: #ccc;\n    transition: transform 0.3s cubic-bezier(0.465, 0.183, 0.153, 0.946);\n\n    /*\n      [will-change]:(https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change)\n      let the browser know we plan to animate each view in and out\n    */\n    will-change: transform;\n  }\n\n  .details {\n    background: green;\n    transform: translateX(100%);\n  }\n  .view-change .list {\n    transform: translateX(-100%);\n  }\n  .view-change .details {\n    transform: translateX(0);\n  }\n\n  .modal {\n    position: fixed;\n    top: 100px;\n    left: 100px;\n    width: 100px;\n    height: 100px;\n    background: red;\n    z-index: 100;\n    pointer-events: none;\n\n    opacity: 0;\n    transform: scale(1.15);\n    transition:\n      transform 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946),\n      opacity 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946);\n\n    will-change: transform, opacity;\n  }\n  .modal.visible {\n    pointer-events: auto;\n    transform: scale(1);\n    opacity: 1;\n  }\n  </style>\n  <script type=\"text/javascript\">\n    const detailBtn = document.querySelector('.detail-btn')\n    const backBtn = document.querySelector('.back-btn')\n    const container = document.querySelector('.container')\n    const showModeal = document.querySelector('.show-modeal')\n    const modal = document.querySelector('.modal')\n    detailBtn.addEventListener('click', () => {\n      container.classList.toggle('view-change')\n    })\n    backBtn.addEventListener('click', () => {\n      container.classList.toggle('view-change')\n    })\n    showModeal.addEventListener('click', () => {\n      modal.classList.toggle('visible')\n    })\n    modal.addEventListener('click', () => {\n      modal.classList.toggle('visible')\n    })\n  </script>\n  ```\n\n## 其他\n>动画用法比起其他的样式属性稍稍多了一些，动画在在页面展示中还是比较重要的。比如当一个alert弹窗出现时，`迅速弹出让用户感觉比较快的响应，稍稍慢一些关闭给人一种缓和的感觉，这样播放动画会给人一种比较友好的感觉`。现在的开发中多数被封装在了框架中，我们可以轻松的实现动画。\n\n[贝塞尔曲线介绍](http://www.html-js.com/article/1628)\n[transition](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions)\n[animation](https://developer.mozilla.org/en-US/docs/Web/CSS/animation)\n[动画详解](https://developers.google.cn/web/fundamentals/design-and-ux/animations/)\n[动画性能](https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/)\n[缓动函数](https://easings.net/zh-cn)\n","slug":"动画基础","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3y0019zs8qgbhq563y","content":"<p><img src=\"/img/动画基础.png\" alt><br><a href=\"https://www.processon.com/mindmap/5bc9a911e4b0bd4db96c4994\" target=\"_blank\" rel=\"noopener\">图片地址</a></p>\n<blockquote>\n<p>学习动画模块我企图分为两部分，<code>1</code>动画基础；<code>2</code>查看大型框架对动画应用。很显然第二部分力不存心，这是一份拖了很久的动画总结<br><code>隐式过渡</code>: 通常我们修改元素样式反生改变我们称为隐式过渡，因为转变的完成由浏览器决定。<br><code>css transition</code>: 现在我们加入动画，那么可以决定哪些属性发生动画效果 (property)，何时开始 (delay），持续多久 (duration) 以及如何动画 (定义timing funtion)。</p>\n</blockquote>\n<h2 id=\"动画的基本使用\"><a href=\"#动画的基本使用\" class=\"headerlink\" title=\"动画的基本使用\"></a>动画的基本使用</h2><h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot; click=&quot;&quot;&gt;</span><br><span class=\"line\">    盒子</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    border: 1px solid;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    transition: 1s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .box.move &#123;</span><br><span class=\"line\">    transform: translate(200px, 200px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">const box = document.querySelector(&apos;.box&apos;)</span><br><span class=\"line\">box.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">  box.classList.toggle(&apos;move&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    盒子</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;p&gt;Move your mouse over the grey box&lt;/p&gt;</span><br><span class=\"line\">  &lt;div class=&quot;demo&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;grows&quot;&gt;This just grows&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;growsandstays&quot;&gt;This grows and stays big&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    border: 1px solid;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    animation-name: moveBox;</span><br><span class=\"line\">    animation-duration: 1300ms;</span><br><span class=\"line\">    animation-iteration-count: infinite;</span><br><span class=\"line\">    animation-direction: alternate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @keyframes moveBox &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">      transform: translate(0, 0);</span><br><span class=\"line\">      opacity: 0.1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    25% &#123;</span><br><span class=\"line\">      opacity: 0.3</span><br><span class=\"line\">      transform: translate(100px, 100px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    50% &#123;</span><br><span class=\"line\">      opacity: 0.6</span><br><span class=\"line\">      transform: translate(200px, 200px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">      opacity: 0.9;</span><br><span class=\"line\">      transform: translate(300px, 300px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .demo &#123;</span><br><span class=\"line\">    border-top: 100px solid #ccc;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">    font-family: sans-serif;</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /* @keyframes grow &#123;</span><br><span class=\"line\">      0% &#123; font-size: 0 &#125;</span><br><span class=\"line\">      100% &#123; font-size: 40px &#125;</span><br><span class=\"line\">  &#125; */</span><br><span class=\"line\">  /* .demo:hover .grows &#123;</span><br><span class=\"line\">      animation-name: grow;</span><br><span class=\"line\">      animation-duration: 3s;</span><br><span class=\"line\">  &#125; */</span><br><span class=\"line\">  /* .demo:hover .growsandstays &#123;</span><br><span class=\"line\">      animation-name: grow;</span><br><span class=\"line\">      animation-duration: 3s;</span><br><span class=\"line\">      animation-fill-mode: both;</span><br><span class=\"line\">  &#125; */</span><br><span class=\"line\">  @keyframes slidein &#123;</span><br><span class=\"line\">    from &#123; transform: scaleX(0); &#125;</span><br><span class=\"line\">    to   &#123; transform: scaleX(1); &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .demo:hover .grows &#123;</span><br><span class=\"line\">      animation: running slidein 3s ease-in 1s infinite reverse both;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"web-animation-API\"><a href=\"#web-animation-API\" class=\"headerlink\" title=\"web animation API\"></a>web animation API</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    盒子</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    border: 1px solid;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  const box = document.querySelector(&apos;.box&apos;)</span><br><span class=\"line\">  let player = box.animate([</span><br><span class=\"line\">    &#123; transform: &apos;translate(0)&apos; &#125;,</span><br><span class=\"line\">    &#123; transform: &apos;translate(200px, 200px)&apos; &#125;</span><br><span class=\"line\">  ], 500)</span><br><span class=\"line\">  box.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    player.play()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  player.addEventListener(&apos;finish&apos;, function() &#123;</span><br><span class=\"line\">    box.style.transform = &apos;translate(100px, 100px)&apos;;</span><br><span class=\"line\">    console.log(player)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单的案例\"><a href=\"#简单的案例\" class=\"headerlink\" title=\"简单的案例\"></a>简单的案例</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;view list&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;detail-btn&quot;&gt;detail&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;show-modeal&quot;&gt;show-modeal&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;view details&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;back-btn&quot;&gt;back&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;modal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 100vh;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.view &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  background: #ccc;</span><br><span class=\"line\">  transition: transform 0.3s cubic-bezier(0.465, 0.183, 0.153, 0.946);</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">    [will-change]:(https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change)</span><br><span class=\"line\">    let the browser know we plan to animate each view in and out</span><br><span class=\"line\">  */</span><br><span class=\"line\">  will-change: transform;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.details &#123;</span><br><span class=\"line\">  background: green;</span><br><span class=\"line\">  transform: translateX(100%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.view-change .list &#123;</span><br><span class=\"line\">  transform: translateX(-100%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.view-change .details &#123;</span><br><span class=\"line\">  transform: translateX(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.modal &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  top: 100px;</span><br><span class=\"line\">  left: 100px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  z-index: 100;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\"></span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">  transform: scale(1.15);</span><br><span class=\"line\">  transition:</span><br><span class=\"line\">    transform 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946),</span><br><span class=\"line\">    opacity 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946);</span><br><span class=\"line\"></span><br><span class=\"line\">  will-change: transform, opacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.modal.visible &#123;</span><br><span class=\"line\">  pointer-events: auto;</span><br><span class=\"line\">  transform: scale(1);</span><br><span class=\"line\">  opacity: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  const detailBtn = document.querySelector(&apos;.detail-btn&apos;)</span><br><span class=\"line\">  const backBtn = document.querySelector(&apos;.back-btn&apos;)</span><br><span class=\"line\">  const container = document.querySelector(&apos;.container&apos;)</span><br><span class=\"line\">  const showModeal = document.querySelector(&apos;.show-modeal&apos;)</span><br><span class=\"line\">  const modal = document.querySelector(&apos;.modal&apos;)</span><br><span class=\"line\">  detailBtn.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    container.classList.toggle(&apos;view-change&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  backBtn.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    container.classList.toggle(&apos;view-change&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  showModeal.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    modal.classList.toggle(&apos;visible&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  modal.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    modal.classList.toggle(&apos;visible&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><blockquote>\n<p>动画用法比起其他的样式属性稍稍多了一些，动画在在页面展示中还是比较重要的。比如当一个alert弹窗出现时，<code>迅速弹出让用户感觉比较快的响应，稍稍慢一些关闭给人一种缓和的感觉，这样播放动画会给人一种比较友好的感觉</code>。现在的开发中多数被封装在了框架中，我们可以轻松的实现动画。</p>\n</blockquote>\n<p><a href=\"http://www.html-js.com/article/1628\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线介绍</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions\" target=\"_blank\" rel=\"noopener\">transition</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation\" target=\"_blank\" rel=\"noopener\">animation</a><br><a href=\"https://developers.google.cn/web/fundamentals/design-and-ux/animations/\" target=\"_blank\" rel=\"noopener\">动画详解</a><br><a href=\"https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/\" target=\"_blank\" rel=\"noopener\">动画性能</a><br><a href=\"https://easings.net/zh-cn\" target=\"_blank\" rel=\"noopener\">缓动函数</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/动画基础.png\" alt><br><a href=\"https://www.processon.com/mindmap/5bc9a911e4b0bd4db96c4994\" target=\"_blank\" rel=\"noopener\">图片地址</a></p>\n<blockquote>\n<p>学习动画模块我企图分为两部分，<code>1</code>动画基础；<code>2</code>查看大型框架对动画应用。很显然第二部分力不存心，这是一份拖了很久的动画总结<br><code>隐式过渡</code>: 通常我们修改元素样式反生改变我们称为隐式过渡，因为转变的完成由浏览器决定。<br><code>css transition</code>: 现在我们加入动画，那么可以决定哪些属性发生动画效果 (property)，何时开始 (delay），持续多久 (duration) 以及如何动画 (定义timing funtion)。</p>\n</blockquote>\n<h2 id=\"动画的基本使用\"><a href=\"#动画的基本使用\" class=\"headerlink\" title=\"动画的基本使用\"></a>动画的基本使用</h2><h3 id=\"transition\"><a href=\"#transition\" class=\"headerlink\" title=\"transition\"></a>transition</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot; click=&quot;&quot;&gt;</span><br><span class=\"line\">    盒子</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    border: 1px solid;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    transition: 1s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .box.move &#123;</span><br><span class=\"line\">    transform: translate(200px, 200px);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">const box = document.querySelector(&apos;.box&apos;)</span><br><span class=\"line\">box.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">  box.classList.toggle(&apos;move&apos;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"animation\"><a href=\"#animation\" class=\"headerlink\" title=\"animation\"></a>animation</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    盒子</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;p&gt;Move your mouse over the grey box&lt;/p&gt;</span><br><span class=\"line\">  &lt;div class=&quot;demo&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;grows&quot;&gt;This just grows&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;growsandstays&quot;&gt;This grows and stays big&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    border: 1px solid;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">    animation-name: moveBox;</span><br><span class=\"line\">    animation-duration: 1300ms;</span><br><span class=\"line\">    animation-iteration-count: infinite;</span><br><span class=\"line\">    animation-direction: alternate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @keyframes moveBox &#123;</span><br><span class=\"line\">    0% &#123;</span><br><span class=\"line\">      transform: translate(0, 0);</span><br><span class=\"line\">      opacity: 0.1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    25% &#123;</span><br><span class=\"line\">      opacity: 0.3</span><br><span class=\"line\">      transform: translate(100px, 100px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    50% &#123;</span><br><span class=\"line\">      opacity: 0.6</span><br><span class=\"line\">      transform: translate(200px, 200px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    100% &#123;</span><br><span class=\"line\">      opacity: 0.9;</span><br><span class=\"line\">      transform: translate(300px, 300px);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  .demo &#123;</span><br><span class=\"line\">    border-top: 100px solid #ccc;</span><br><span class=\"line\">    height: 300px;</span><br><span class=\"line\">    font-family: sans-serif;</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /* @keyframes grow &#123;</span><br><span class=\"line\">      0% &#123; font-size: 0 &#125;</span><br><span class=\"line\">      100% &#123; font-size: 40px &#125;</span><br><span class=\"line\">  &#125; */</span><br><span class=\"line\">  /* .demo:hover .grows &#123;</span><br><span class=\"line\">      animation-name: grow;</span><br><span class=\"line\">      animation-duration: 3s;</span><br><span class=\"line\">  &#125; */</span><br><span class=\"line\">  /* .demo:hover .growsandstays &#123;</span><br><span class=\"line\">      animation-name: grow;</span><br><span class=\"line\">      animation-duration: 3s;</span><br><span class=\"line\">      animation-fill-mode: both;</span><br><span class=\"line\">  &#125; */</span><br><span class=\"line\">  @keyframes slidein &#123;</span><br><span class=\"line\">    from &#123; transform: scaleX(0); &#125;</span><br><span class=\"line\">    to   &#123; transform: scaleX(1); &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .demo:hover .grows &#123;</span><br><span class=\"line\">      animation: running slidein 3s ease-in 1s infinite reverse both;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"web-animation-API\"><a href=\"#web-animation-API\" class=\"headerlink\" title=\"web animation API\"></a>web animation API</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;box&quot;&gt;</span><br><span class=\"line\">    盒子</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">  .box &#123;</span><br><span class=\"line\">    border: 1px solid;</span><br><span class=\"line\">    width: 100px;</span><br><span class=\"line\">    height: 100px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  const box = document.querySelector(&apos;.box&apos;)</span><br><span class=\"line\">  let player = box.animate([</span><br><span class=\"line\">    &#123; transform: &apos;translate(0)&apos; &#125;,</span><br><span class=\"line\">    &#123; transform: &apos;translate(200px, 200px)&apos; &#125;</span><br><span class=\"line\">  ], 500)</span><br><span class=\"line\">  box.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    player.play()</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  player.addEventListener(&apos;finish&apos;, function() &#123;</span><br><span class=\"line\">    box.style.transform = &apos;translate(100px, 100px)&apos;;</span><br><span class=\"line\">    console.log(player)</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"简单的案例\"><a href=\"#简单的案例\" class=\"headerlink\" title=\"简单的案例\"></a>简单的案例</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">  &lt;div class=&quot;container&quot;&gt;</span><br><span class=\"line\">    &lt;div class=&quot;view list&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;detail-btn&quot;&gt;detail&lt;/span&gt;</span><br><span class=\"line\">      &lt;span class=&quot;show-modeal&quot;&gt;show-modeal&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;view details&quot;&gt;</span><br><span class=\"line\">      &lt;span class=&quot;back-btn&quot;&gt;back&lt;/span&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;div class=&quot;modal&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">body &#123;</span><br><span class=\"line\">  margin: 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.container &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 100vh;</span><br><span class=\"line\">  overflow: hidden;</span><br><span class=\"line\">  position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.view &#123;</span><br><span class=\"line\">  width: 100%;</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  background: #ccc;</span><br><span class=\"line\">  transition: transform 0.3s cubic-bezier(0.465, 0.183, 0.153, 0.946);</span><br><span class=\"line\"></span><br><span class=\"line\">  /*</span><br><span class=\"line\">    [will-change]:(https://developer.mozilla.org/zh-CN/docs/Web/CSS/will-change)</span><br><span class=\"line\">    let the browser know we plan to animate each view in and out</span><br><span class=\"line\">  */</span><br><span class=\"line\">  will-change: transform;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.details &#123;</span><br><span class=\"line\">  background: green;</span><br><span class=\"line\">  transform: translateX(100%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.view-change .list &#123;</span><br><span class=\"line\">  transform: translateX(-100%);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.view-change .details &#123;</span><br><span class=\"line\">  transform: translateX(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.modal &#123;</span><br><span class=\"line\">  position: fixed;</span><br><span class=\"line\">  top: 100px;</span><br><span class=\"line\">  left: 100px;</span><br><span class=\"line\">  width: 100px;</span><br><span class=\"line\">  height: 100px;</span><br><span class=\"line\">  background: red;</span><br><span class=\"line\">  z-index: 100;</span><br><span class=\"line\">  pointer-events: none;</span><br><span class=\"line\"></span><br><span class=\"line\">  opacity: 0;</span><br><span class=\"line\">  transform: scale(1.15);</span><br><span class=\"line\">  transition:</span><br><span class=\"line\">    transform 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946),</span><br><span class=\"line\">    opacity 0.1s cubic-bezier(0.465, 0.183, 0.153, 0.946);</span><br><span class=\"line\"></span><br><span class=\"line\">  will-change: transform, opacity;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.modal.visible &#123;</span><br><span class=\"line\">  pointer-events: auto;</span><br><span class=\"line\">  transform: scale(1);</span><br><span class=\"line\">  opacity: 1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  const detailBtn = document.querySelector(&apos;.detail-btn&apos;)</span><br><span class=\"line\">  const backBtn = document.querySelector(&apos;.back-btn&apos;)</span><br><span class=\"line\">  const container = document.querySelector(&apos;.container&apos;)</span><br><span class=\"line\">  const showModeal = document.querySelector(&apos;.show-modeal&apos;)</span><br><span class=\"line\">  const modal = document.querySelector(&apos;.modal&apos;)</span><br><span class=\"line\">  detailBtn.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    container.classList.toggle(&apos;view-change&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  backBtn.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    container.classList.toggle(&apos;view-change&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  showModeal.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    modal.classList.toggle(&apos;visible&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  modal.addEventListener(&apos;click&apos;, () =&gt; &#123;</span><br><span class=\"line\">    modal.classList.toggle(&apos;visible&apos;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><blockquote>\n<p>动画用法比起其他的样式属性稍稍多了一些，动画在在页面展示中还是比较重要的。比如当一个alert弹窗出现时，<code>迅速弹出让用户感觉比较快的响应，稍稍慢一些关闭给人一种缓和的感觉，这样播放动画会给人一种比较友好的感觉</code>。现在的开发中多数被封装在了框架中，我们可以轻松的实现动画。</p>\n</blockquote>\n<p><a href=\"http://www.html-js.com/article/1628\" target=\"_blank\" rel=\"noopener\">贝塞尔曲线介绍</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions\" target=\"_blank\" rel=\"noopener\">transition</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/animation\" target=\"_blank\" rel=\"noopener\">animation</a><br><a href=\"https://developers.google.cn/web/fundamentals/design-and-ux/animations/\" target=\"_blank\" rel=\"noopener\">动画详解</a><br><a href=\"https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/\" target=\"_blank\" rel=\"noopener\">动画性能</a><br><a href=\"https://easings.net/zh-cn\" target=\"_blank\" rel=\"noopener\">缓动函数</a></p>\n"},{"title":"原型，原型链笔记","date":"2017-06-30T19:43:40.000Z","_content":"\n![](/img/javascript 原型及原型链.png)\n  `了解原型，原型链需要了解 原型对象 构造函数 实例三者之间的关系`\n\n  ### `原型` \n  >每个对象(Person)都会有一个原型对象，对象的实例(p1)包含一个隐式的指针指向原型对象\n  p1.__propo__  ===     Person.prototype  \n\n  ### `原型链`  \n  >如图所示 存在一个对象Student，想拥有Person的一些属性和方法，那么Student.proportype = new Person();那么new Student（）的实例就会存在Student 存在一个隐士指针指向Student的原型对象，而Student的原型指向了person的原型，由于所有自定义对象都是从Object对象继承来的，那么person的原型有指向了Object的原型\n\n  ### 总结（摘自红宝书，第6章）\n  1 原型链之间为引用关系，因此对象实例共享所有的属性和方法，在原型链中的引用类型，因此不适宜单独使用，解决这个问题是利用构造函数，在子类构造函数的内部调用超类的构造函数(Person.call(this, name,,))，这样可以做到每个实例都具有自己的属性，同时还能保证只是用构造函数模式来定义类型。 \n  2 对象可以在编码执行过程中创建和增强，因此具有动态性而非严格定义的实体。\n  ```javascript\n    function object(o) {\n      function f() {};\n      f.prototype = o;\n      return new f();\n    }\n\n    function inher(sub,sup){\n      var prototype = object(sup.prototype); // 创建对象\n      prototype.constructor = sub; // 增强对象\n      sub.prototype = prototype; // 指定对象\n    }\n\n    function sup(name) {\n      this.name = name;\n      this.color = ['blue','red']\n    }\n    sup.prototype.sayName = function() {\n      console.log(this.name)\n    }\n\n    function sub(name,age) {\n      sup.call(this, name);\n      this.age = age;\n    }    \n\n    inher(sub,sup);\n\n    sub.prototype.sayAge = function() {\n      console.log(this.age);\n    }\n\n    var s1 = new sub()\n  ```\n\n### 其它\n一个不错的在线编辑绘制图片工具：[processon](http://processon.com/)\n在问答网站回答问题可以促使去各处查资料，优化表达，学习更全面的知识","source":"_posts/原型，原型链笔记.md","raw":"---\ntitle: 原型，原型链笔记\ndate: 2017-06-30 15:43:40\ncategories: js\ntags: js基础\n---\n\n![](/img/javascript 原型及原型链.png)\n  `了解原型，原型链需要了解 原型对象 构造函数 实例三者之间的关系`\n\n  ### `原型` \n  >每个对象(Person)都会有一个原型对象，对象的实例(p1)包含一个隐式的指针指向原型对象\n  p1.__propo__  ===     Person.prototype  \n\n  ### `原型链`  \n  >如图所示 存在一个对象Student，想拥有Person的一些属性和方法，那么Student.proportype = new Person();那么new Student（）的实例就会存在Student 存在一个隐士指针指向Student的原型对象，而Student的原型指向了person的原型，由于所有自定义对象都是从Object对象继承来的，那么person的原型有指向了Object的原型\n\n  ### 总结（摘自红宝书，第6章）\n  1 原型链之间为引用关系，因此对象实例共享所有的属性和方法，在原型链中的引用类型，因此不适宜单独使用，解决这个问题是利用构造函数，在子类构造函数的内部调用超类的构造函数(Person.call(this, name,,))，这样可以做到每个实例都具有自己的属性，同时还能保证只是用构造函数模式来定义类型。 \n  2 对象可以在编码执行过程中创建和增强，因此具有动态性而非严格定义的实体。\n  ```javascript\n    function object(o) {\n      function f() {};\n      f.prototype = o;\n      return new f();\n    }\n\n    function inher(sub,sup){\n      var prototype = object(sup.prototype); // 创建对象\n      prototype.constructor = sub; // 增强对象\n      sub.prototype = prototype; // 指定对象\n    }\n\n    function sup(name) {\n      this.name = name;\n      this.color = ['blue','red']\n    }\n    sup.prototype.sayName = function() {\n      console.log(this.name)\n    }\n\n    function sub(name,age) {\n      sup.call(this, name);\n      this.age = age;\n    }    \n\n    inher(sub,sup);\n\n    sub.prototype.sayAge = function() {\n      console.log(this.age);\n    }\n\n    var s1 = new sub()\n  ```\n\n### 其它\n一个不错的在线编辑绘制图片工具：[processon](http://processon.com/)\n在问答网站回答问题可以促使去各处查资料，优化表达，学习更全面的知识","slug":"原型，原型链笔记","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3y001dzs8q90l1c1xd","content":"<p><img src=\"/img/javascript 原型及原型链.png\" alt><br>  <code>了解原型，原型链需要了解 原型对象 构造函数 实例三者之间的关系</code></p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a><code>原型</code></h3><blockquote>\n<p>每个对象(Person)都会有一个原型对象，对象的实例(p1)包含一个隐式的指针指向原型对象<br>  p1.<strong>propo</strong>  ===     Person.prototype  </p>\n</blockquote>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a><code>原型链</code></h3><blockquote>\n<p>如图所示 存在一个对象Student，想拥有Person的一些属性和方法，那么Student.proportype = new Person();那么new Student（）的实例就会存在Student 存在一个隐士指针指向Student的原型对象，而Student的原型指向了person的原型，由于所有自定义对象都是从Object对象继承来的，那么person的原型有指向了Object的原型</p>\n</blockquote>\n<h3 id=\"总结（摘自红宝书，第6章）\"><a href=\"#总结（摘自红宝书，第6章）\" class=\"headerlink\" title=\"总结（摘自红宝书，第6章）\"></a>总结（摘自红宝书，第6章）</h3><p>  1 原型链之间为引用关系，因此对象实例共享所有的属性和方法，在原型链中的引用类型，因此不适宜单独使用，解决这个问题是利用构造函数，在子类构造函数的内部调用超类的构造函数(Person.call(this, name,,))，这样可以做到每个实例都具有自己的属性，同时还能保证只是用构造函数模式来定义类型。<br>  2 对象可以在编码执行过程中创建和增强，因此具有动态性而非严格定义的实体。<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  f.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> f();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inher</span>(<span class=\"params\">sub,sup</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prototype = object(sup.prototype); <span class=\"comment\">// 创建对象</span></span><br><span class=\"line\">  prototype.constructor = sub; <span class=\"comment\">// 增强对象</span></span><br><span class=\"line\">  sub.prototype = prototype; <span class=\"comment\">// 指定对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sup</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = [<span class=\"string\">'blue'</span>,<span class=\"string\">'red'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sup.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sub</span>(<span class=\"params\">name,age</span>) </span>&#123;</span><br><span class=\"line\">  sup.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">inher(sub,sup);</span><br><span class=\"line\"></span><br><span class=\"line\">sub.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> sub()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>一个不错的在线编辑绘制图片工具：<a href=\"http://processon.com/\" target=\"_blank\" rel=\"noopener\">processon</a><br>在问答网站回答问题可以促使去各处查资料，优化表达，学习更全面的知识</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/javascript 原型及原型链.png\" alt><br>  <code>了解原型，原型链需要了解 原型对象 构造函数 实例三者之间的关系</code></p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a><code>原型</code></h3><blockquote>\n<p>每个对象(Person)都会有一个原型对象，对象的实例(p1)包含一个隐式的指针指向原型对象<br>  p1.<strong>propo</strong>  ===     Person.prototype  </p>\n</blockquote>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a><code>原型链</code></h3><blockquote>\n<p>如图所示 存在一个对象Student，想拥有Person的一些属性和方法，那么Student.proportype = new Person();那么new Student（）的实例就会存在Student 存在一个隐士指针指向Student的原型对象，而Student的原型指向了person的原型，由于所有自定义对象都是从Object对象继承来的，那么person的原型有指向了Object的原型</p>\n</blockquote>\n<h3 id=\"总结（摘自红宝书，第6章）\"><a href=\"#总结（摘自红宝书，第6章）\" class=\"headerlink\" title=\"总结（摘自红宝书，第6章）\"></a>总结（摘自红宝书，第6章）</h3><p>  1 原型链之间为引用关系，因此对象实例共享所有的属性和方法，在原型链中的引用类型，因此不适宜单独使用，解决这个问题是利用构造函数，在子类构造函数的内部调用超类的构造函数(Person.call(this, name,,))，这样可以做到每个实例都具有自己的属性，同时还能保证只是用构造函数模式来定义类型。<br>  2 对象可以在编码执行过程中创建和增强，因此具有动态性而非严格定义的实体。<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  f.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> f();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inher</span>(<span class=\"params\">sub,sup</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> prototype = object(sup.prototype); <span class=\"comment\">// 创建对象</span></span><br><span class=\"line\">  prototype.constructor = sub; <span class=\"comment\">// 增强对象</span></span><br><span class=\"line\">  sub.prototype = prototype; <span class=\"comment\">// 指定对象</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sup</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = [<span class=\"string\">'blue'</span>,<span class=\"string\">'red'</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sup.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sub</span>(<span class=\"params\">name,age</span>) </span>&#123;</span><br><span class=\"line\">  sup.call(<span class=\"keyword\">this</span>, name);</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">inher(sub,sup);</span><br><span class=\"line\"></span><br><span class=\"line\">sub.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> sub()</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>一个不错的在线编辑绘制图片工具：<a href=\"http://processon.com/\" target=\"_blank\" rel=\"noopener\">processon</a><br>在问答网站回答问题可以促使去各处查资料，优化表达，学习更全面的知识</p>\n"},{"title":"国金项目总结","date":"2017-08-24T20:30:50.000Z","_content":"\n# node地址转发\n>方案一种使用由于请求地址不同源存在跨域问题，因此使用使用node地址进行了一次转发\n\n```javascript\n  'use strict';\n\n  const path = require('path');\n  const express = require('express');\n  const proxy = require('express-http-proxy');\n  const proxyUrl = 'https://webapps.yongjinbao.com.cn';\n\n  const app = express();\n  app.use(express.static(__dirname));\n\n\n  app.use('/api', proxy(proxyUrl, { // 当访问含有/api的地址时做转发处理\n    proxyReqPathResolver: (req) => {\n      return require('url').parse(req.url).path;\n    }\n  }));\n\n  app.use('*', function (req, res){// 项目启动后加载的页面\n    res.sendFile(path.resolve(__dirname, 'fund.html'));\n  });\n\n  app.listen(8880, () => {\n    console.log('App is running on port 8880');\n  });\n```\n\n# 数据逻辑处理（同步以及异步处理）\n>方案二，由于客户端不能对接口进行转发，数据仅存在服务器的静态文件中，使用了一种类似于jsonp的请求方式，但不是jsonp,即在静态文件中将所有的数据放在一个变量中。前端通过动态的add `<script>`标签的方式获取在静态文件中定义的变量取值。\n数据分四次获取，每个文件50条，滚动分页的方式加载数据，每次加载10条\n实现思路\n将异步和同步数据的处理逻辑分开写。可能遇到的滚动时获取异步数据时可能取不到，需要添加一个flag标志，当数据获取以后再去做数据渲染\n\n```javascript\n  // 动态加载script\n  function loadScript(url,callback) {\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = 'async';\n    script.src = url;\n    document.body.appendChild(script);\n    script.onload = function(){\n      callback();\n    }\n  }\n\n  // 分情况加载数据\n  function getNews(news_page_num, page_num, isGetScript) {\n    newsLoading = false;\n    var newsData = [];\n    if (isGetScript) {\n      loadScript('https://devtest.yjbtest.com/gjzqwxtest3g/information/data/newsData'+news_page_num+'.json', function() {\n        newsLoading = true;\n        switch (news_page_num) {\n          case 1:\n            newsData = window.newsData1;\n            break;\n          case 2:\n            newsData = window.newsData2;\n            break;\n          case 3:\n            newsData = window.newsData3;\n            break;\n          default:\n            newsData = window.newsData0;\n            break;\n        }\n        renderNews(newsData.slice(0,10));\n      });\n    } else {\n      newsLoading = true;\n      var data = [];\n      switch (news_page_num) {\n        case 1:\n          newsData = window.newsData1;\n          break;\n        case 2:\n          newsData = window.newsData2;\n          break;\n        case 3:\n          newsData = window.newsData3;\n          break;\n        default:\n          newsData = window.newsData0;\n          break;\n      }\n      switch (page_num%5) {\n        case 2:\n          data = newsData.slice(10,20);\n          break;\n        case 3:\n          data = newsData.slice(20,30);\n          break;\n        case 4:\n          data = newsData.slice(30,40);\n          break;\n        case 0:\n          data = newsData.slice(40,50);\n          break;\n      }\n      renderNews(data);\n    }\n  }\n```\n# 无限滚动\n>监听window的scroll事件，在页面的底部放一个loading的div，当滚动事件触发的时候判断loading div据顶部高度是否小于当前文档的高度，如果小于那么loading div就已经展示在页面中了，那么去进行数据获取\n防止数据请求过于频繁添加了一个定时器\n在页面数据加载完成的时候移除滚动事件\n\n```javascript\nwindow.addEventListener('scroll', scrollLoad, false);\nfunction scrollLoad() {\n  if (scrollTimer) {\n    setTimeout(scrollTimer);\n  }\n\n  scrollTimer = setTimeout(function(){\n    var loadingDom = document.querySelector('.scroll-stance-element');\n    var loadingDomTop = loadingDom.getBoundingClientRect().top;\n    var windowHeight = window.innerHeight;\n    if (loadingDomTop && loadingDomTop < windowHeight) {\n      if ($('.new-con-tpl .block').length < 200) {\n        if (!newsLoading) {\n          return;\n        }\n        if (pageNum%5 == 0) {\n          newsPageNum++;\n        }\n        pageNum++;\n        if (pageNum%5 == 1) {\n          getNews(newsPageNum, pageNum, true);\n        } else {\n          getNews(newsPageNum, pageNum);\n        }\n      } else {\n        $('.scroll-stance-element').addClass('hidden');\n        $('.new-nomore').removeClass('hidden');\n        window.removeEventListener('scroll', scrollLoad, false);\n      }\n    }\n  }, 100);\n\n}\n```\n# 根据屏幕宽度对字符串动态进行截取\n>截取字符串\n计算文档的宽度\n获取当前的字号\n计算当前可以容纳的字数\n\n# 进入其他项目咨询页面配置页面路由\n>由于需要跳转至另一个framework7项目中，因此配置了相关的进入页面的路由\n\n```javascript\n  // 获取url里的信息\n  function getQueryValue(name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n    var r = window.location.search.substr(1).match(reg);\n    if (r != null)return unescape(r[2]);\n    return null;\n  }\n```\n# jsonp和直接引入静态js文件(理解jsonp)\n本次中由于只有静态文件，本次以引入文件的方式，在文件加载完成的时候获取约定的变量的方式获取和引入本地文件一样的道理\n比较通俗易懂的方式理解jsonp: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n\n# 其它\n文档加载的两个函数`DOMContentLoaded`， `load`\n\n>在chrome network面板中可以很清新的看到`DOMContentLoaded`页面基本结构加载完成后显示完成时间。和jquery中的$(function(){})一致\n当初始HTML文档已完全加载和解析时，将触发DOMContentLoaded事件，而无需等待样式表，图像和子框架完成加载。——MDN\nhttps://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\n\n```javascript\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n   // ...代码...\n}, false);\n// DOMContentLoaded\n$(document).ready(function() {\n    // ...代码...\n});\n```\n\n`load`页面完全加载显示完成时间\n>当一个资源及其依赖资源已完成加载时，将触发load事件。 ——MDN\n\n```javascript\n  window.addEventListener(\"load\", function() {\n      // ...代码...\n  }, false);\n  $(document).load(function() {\n      // ...代码...\n  });\n```\n","source":"_posts/国金项目总结.md","raw":"---\ntitle: 国金项目总结\ndate: 2017-08-24 16:30:50\ncategories: js\ntags: 工作总结\n---\n\n# node地址转发\n>方案一种使用由于请求地址不同源存在跨域问题，因此使用使用node地址进行了一次转发\n\n```javascript\n  'use strict';\n\n  const path = require('path');\n  const express = require('express');\n  const proxy = require('express-http-proxy');\n  const proxyUrl = 'https://webapps.yongjinbao.com.cn';\n\n  const app = express();\n  app.use(express.static(__dirname));\n\n\n  app.use('/api', proxy(proxyUrl, { // 当访问含有/api的地址时做转发处理\n    proxyReqPathResolver: (req) => {\n      return require('url').parse(req.url).path;\n    }\n  }));\n\n  app.use('*', function (req, res){// 项目启动后加载的页面\n    res.sendFile(path.resolve(__dirname, 'fund.html'));\n  });\n\n  app.listen(8880, () => {\n    console.log('App is running on port 8880');\n  });\n```\n\n# 数据逻辑处理（同步以及异步处理）\n>方案二，由于客户端不能对接口进行转发，数据仅存在服务器的静态文件中，使用了一种类似于jsonp的请求方式，但不是jsonp,即在静态文件中将所有的数据放在一个变量中。前端通过动态的add `<script>`标签的方式获取在静态文件中定义的变量取值。\n数据分四次获取，每个文件50条，滚动分页的方式加载数据，每次加载10条\n实现思路\n将异步和同步数据的处理逻辑分开写。可能遇到的滚动时获取异步数据时可能取不到，需要添加一个flag标志，当数据获取以后再去做数据渲染\n\n```javascript\n  // 动态加载script\n  function loadScript(url,callback) {\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = 'async';\n    script.src = url;\n    document.body.appendChild(script);\n    script.onload = function(){\n      callback();\n    }\n  }\n\n  // 分情况加载数据\n  function getNews(news_page_num, page_num, isGetScript) {\n    newsLoading = false;\n    var newsData = [];\n    if (isGetScript) {\n      loadScript('https://devtest.yjbtest.com/gjzqwxtest3g/information/data/newsData'+news_page_num+'.json', function() {\n        newsLoading = true;\n        switch (news_page_num) {\n          case 1:\n            newsData = window.newsData1;\n            break;\n          case 2:\n            newsData = window.newsData2;\n            break;\n          case 3:\n            newsData = window.newsData3;\n            break;\n          default:\n            newsData = window.newsData0;\n            break;\n        }\n        renderNews(newsData.slice(0,10));\n      });\n    } else {\n      newsLoading = true;\n      var data = [];\n      switch (news_page_num) {\n        case 1:\n          newsData = window.newsData1;\n          break;\n        case 2:\n          newsData = window.newsData2;\n          break;\n        case 3:\n          newsData = window.newsData3;\n          break;\n        default:\n          newsData = window.newsData0;\n          break;\n      }\n      switch (page_num%5) {\n        case 2:\n          data = newsData.slice(10,20);\n          break;\n        case 3:\n          data = newsData.slice(20,30);\n          break;\n        case 4:\n          data = newsData.slice(30,40);\n          break;\n        case 0:\n          data = newsData.slice(40,50);\n          break;\n      }\n      renderNews(data);\n    }\n  }\n```\n# 无限滚动\n>监听window的scroll事件，在页面的底部放一个loading的div，当滚动事件触发的时候判断loading div据顶部高度是否小于当前文档的高度，如果小于那么loading div就已经展示在页面中了，那么去进行数据获取\n防止数据请求过于频繁添加了一个定时器\n在页面数据加载完成的时候移除滚动事件\n\n```javascript\nwindow.addEventListener('scroll', scrollLoad, false);\nfunction scrollLoad() {\n  if (scrollTimer) {\n    setTimeout(scrollTimer);\n  }\n\n  scrollTimer = setTimeout(function(){\n    var loadingDom = document.querySelector('.scroll-stance-element');\n    var loadingDomTop = loadingDom.getBoundingClientRect().top;\n    var windowHeight = window.innerHeight;\n    if (loadingDomTop && loadingDomTop < windowHeight) {\n      if ($('.new-con-tpl .block').length < 200) {\n        if (!newsLoading) {\n          return;\n        }\n        if (pageNum%5 == 0) {\n          newsPageNum++;\n        }\n        pageNum++;\n        if (pageNum%5 == 1) {\n          getNews(newsPageNum, pageNum, true);\n        } else {\n          getNews(newsPageNum, pageNum);\n        }\n      } else {\n        $('.scroll-stance-element').addClass('hidden');\n        $('.new-nomore').removeClass('hidden');\n        window.removeEventListener('scroll', scrollLoad, false);\n      }\n    }\n  }, 100);\n\n}\n```\n# 根据屏幕宽度对字符串动态进行截取\n>截取字符串\n计算文档的宽度\n获取当前的字号\n计算当前可以容纳的字数\n\n# 进入其他项目咨询页面配置页面路由\n>由于需要跳转至另一个framework7项目中，因此配置了相关的进入页面的路由\n\n```javascript\n  // 获取url里的信息\n  function getQueryValue(name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n    var r = window.location.search.substr(1).match(reg);\n    if (r != null)return unescape(r[2]);\n    return null;\n  }\n```\n# jsonp和直接引入静态js文件(理解jsonp)\n本次中由于只有静态文件，本次以引入文件的方式，在文件加载完成的时候获取约定的变量的方式获取和引入本地文件一样的道理\n比较通俗易懂的方式理解jsonp: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n\n# 其它\n文档加载的两个函数`DOMContentLoaded`， `load`\n\n>在chrome network面板中可以很清新的看到`DOMContentLoaded`页面基本结构加载完成后显示完成时间。和jquery中的$(function(){})一致\n当初始HTML文档已完全加载和解析时，将触发DOMContentLoaded事件，而无需等待样式表，图像和子框架完成加载。——MDN\nhttps://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\n\n```javascript\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n   // ...代码...\n}, false);\n// DOMContentLoaded\n$(document).ready(function() {\n    // ...代码...\n});\n```\n\n`load`页面完全加载显示完成时间\n>当一个资源及其依赖资源已完成加载时，将触发load事件。 ——MDN\n\n```javascript\n  window.addEventListener(\"load\", function() {\n      // ...代码...\n  }, false);\n  $(document).load(function() {\n      // ...代码...\n  });\n```\n","slug":"国金项目总结","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3z001gzs8qc6o55yr3","content":"<h1 id=\"node地址转发\"><a href=\"#node地址转发\" class=\"headerlink\" title=\"node地址转发\"></a>node地址转发</h1><blockquote>\n<p>方案一种使用由于请求地址不同源存在跨域问题，因此使用使用node地址进行了一次转发</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">'express-http-proxy'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxyUrl = <span class=\"string\">'https://webapps.yongjinbao.com.cn'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\">app.use(express.static(__dirname));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, proxy(proxyUrl, &#123; <span class=\"comment\">// 当访问含有/api的地址时做转发处理</span></span><br><span class=\"line\">  proxyReqPathResolver: <span class=\"function\">(<span class=\"params\">req</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(req.url).path;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;<span class=\"comment\">// 项目启动后加载的页面</span></span><br><span class=\"line\">  res.sendFile(path.resolve(__dirname, <span class=\"string\">'fund.html'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">8880</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'App is running on port 8880'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据逻辑处理（同步以及异步处理）\"><a href=\"#数据逻辑处理（同步以及异步处理）\" class=\"headerlink\" title=\"数据逻辑处理（同步以及异步处理）\"></a>数据逻辑处理（同步以及异步处理）</h1><blockquote>\n<p>方案二，由于客户端不能对接口进行转发，数据仅存在服务器的静态文件中，使用了一种类似于jsonp的请求方式，但不是jsonp,即在静态文件中将所有的数据放在一个变量中。前端通过动态的add <code>&lt;script&gt;</code>标签的方式获取在静态文件中定义的变量取值。<br>数据分四次获取，每个文件50条，滚动分页的方式加载数据，每次加载10条<br>实现思路<br>将异步和同步数据的处理逻辑分开写。可能遇到的滚动时获取异步数据时可能取不到，需要添加一个flag标志，当数据获取以后再去做数据渲染</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态加载script</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url,callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">  script.async = <span class=\"string\">'async'</span>;</span><br><span class=\"line\">  script.src = url;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script);</span><br><span class=\"line\">  script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分情况加载数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNews</span>(<span class=\"params\">news_page_num, page_num, isGetScript</span>) </span>&#123;</span><br><span class=\"line\">  newsLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newsData = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isGetScript) &#123;</span><br><span class=\"line\">    loadScript(<span class=\"string\">'https://devtest.yjbtest.com/gjzqwxtest3g/information/data/newsData'</span>+news_page_num+<span class=\"string\">'.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      newsLoading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (news_page_num) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData1;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData2;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData3;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData0;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      renderNews(newsData.slice(<span class=\"number\">0</span>,<span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    newsLoading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (news_page_num) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData1;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData2;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData3;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData0;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (page_num%<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        data = newsData.slice(<span class=\"number\">10</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        data = newsData.slice(<span class=\"number\">20</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        data = newsData.slice(<span class=\"number\">30</span>,<span class=\"number\">40</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        data = newsData.slice(<span class=\"number\">40</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    renderNews(data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"无限滚动\"><a href=\"#无限滚动\" class=\"headerlink\" title=\"无限滚动\"></a>无限滚动</h1><blockquote>\n<p>监听window的scroll事件，在页面的底部放一个loading的div，当滚动事件触发的时候判断loading div据顶部高度是否小于当前文档的高度，如果小于那么loading div就已经展示在页面中了，那么去进行数据获取<br>防止数据请求过于频繁添加了一个定时器<br>在页面数据加载完成的时候移除滚动事件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, scrollLoad, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scrollLoad</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (scrollTimer) &#123;</span><br><span class=\"line\">    setTimeout(scrollTimer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  scrollTimer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loadingDom = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.scroll-stance-element'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loadingDomTop = loadingDom.getBoundingClientRect().top;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> windowHeight = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadingDomTop &amp;&amp; loadingDomTop &lt; windowHeight) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(<span class=\"string\">'.new-con-tpl .block'</span>).length &lt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!newsLoading) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pageNum%<span class=\"number\">5</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          newsPageNum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pageNum++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pageNum%<span class=\"number\">5</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          getNews(newsPageNum, pageNum, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          getNews(newsPageNum, pageNum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.scroll-stance-element'</span>).addClass(<span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'.new-nomore'</span>).removeClass(<span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>, scrollLoad, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"根据屏幕宽度对字符串动态进行截取\"><a href=\"#根据屏幕宽度对字符串动态进行截取\" class=\"headerlink\" title=\"根据屏幕宽度对字符串动态进行截取\"></a>根据屏幕宽度对字符串动态进行截取</h1><blockquote>\n<p>截取字符串<br>计算文档的宽度<br>获取当前的字号<br>计算当前可以容纳的字数</p>\n</blockquote>\n<h1 id=\"进入其他项目咨询页面配置页面路由\"><a href=\"#进入其他项目咨询页面配置页面路由\" class=\"headerlink\" title=\"进入其他项目咨询页面配置页面路由\"></a>进入其他项目咨询页面配置页面路由</h1><blockquote>\n<p>由于需要跳转至另一个framework7项目中，因此配置了相关的进入页面的路由</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取url里的信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryValue</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r = <span class=\"built_in\">window</span>.location.search.substr(<span class=\"number\">1</span>).match(reg);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>)<span class=\"keyword\">return</span> <span class=\"built_in\">unescape</span>(r[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"jsonp和直接引入静态js文件-理解jsonp\"><a href=\"#jsonp和直接引入静态js文件-理解jsonp\" class=\"headerlink\" title=\"jsonp和直接引入静态js文件(理解jsonp)\"></a>jsonp和直接引入静态js文件(理解jsonp)</h1><p>本次中由于只有静态文件，本次以引入文件的方式，在文件加载完成的时候获取约定的变量的方式获取和引入本地文件一样的道理<br>比较通俗易懂的方式理解jsonp: <a href=\"http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html</a></p>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><p>文档加载的两个函数<code>DOMContentLoaded</code>， <code>load</code></p>\n<blockquote>\n<p>在chrome network面板中可以很清新的看到<code>DOMContentLoaded</code>页面基本结构加载完成后显示完成时间。和jquery中的$(function(){})一致<br>当初始HTML文档已完全加载和解析时，将触发DOMContentLoaded事件，而无需等待样式表，图像和子框架完成加载。——MDN<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// DOMContentLoaded</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>load</code>页面完全加载显示完成时间</p>\n<blockquote>\n<p>当一个资源及其依赖资源已完成加载时，将触发load事件。 ——MDN</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"node地址转发\"><a href=\"#node地址转发\" class=\"headerlink\" title=\"node地址转发\"></a>node地址转发</h1><blockquote>\n<p>方案一种使用由于请求地址不同源存在跨域问题，因此使用使用node地址进行了一次转发</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">'use strict'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">'express-http-proxy'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> proxyUrl = <span class=\"string\">'https://webapps.yongjinbao.com.cn'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express();</span><br><span class=\"line\">app.use(express.static(__dirname));</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'/api'</span>, proxy(proxyUrl, &#123; <span class=\"comment\">// 当访问含有/api的地址时做转发处理</span></span><br><span class=\"line\">  proxyReqPathResolver: <span class=\"function\">(<span class=\"params\">req</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(req.url).path;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;<span class=\"comment\">// 项目启动后加载的页面</span></span><br><span class=\"line\">  res.sendFile(path.resolve(__dirname, <span class=\"string\">'fund.html'</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">8880</span>, () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'App is running on port 8880'</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"数据逻辑处理（同步以及异步处理）\"><a href=\"#数据逻辑处理（同步以及异步处理）\" class=\"headerlink\" title=\"数据逻辑处理（同步以及异步处理）\"></a>数据逻辑处理（同步以及异步处理）</h1><blockquote>\n<p>方案二，由于客户端不能对接口进行转发，数据仅存在服务器的静态文件中，使用了一种类似于jsonp的请求方式，但不是jsonp,即在静态文件中将所有的数据放在一个变量中。前端通过动态的add <code>&lt;script&gt;</code>标签的方式获取在静态文件中定义的变量取值。<br>数据分四次获取，每个文件50条，滚动分页的方式加载数据，每次加载10条<br>实现思路<br>将异步和同步数据的处理逻辑分开写。可能遇到的滚动时获取异步数据时可能取不到，需要添加一个flag标志，当数据获取以后再去做数据渲染</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 动态加载script</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url,callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">  script.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">  script.async = <span class=\"string\">'async'</span>;</span><br><span class=\"line\">  script.src = url;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script);</span><br><span class=\"line\">  script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    callback();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 分情况加载数据</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNews</span>(<span class=\"params\">news_page_num, page_num, isGetScript</span>) </span>&#123;</span><br><span class=\"line\">  newsLoading = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newsData = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (isGetScript) &#123;</span><br><span class=\"line\">    loadScript(<span class=\"string\">'https://devtest.yjbtest.com/gjzqwxtest3g/information/data/newsData'</span>+news_page_num+<span class=\"string\">'.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      newsLoading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (news_page_num) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData1;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData2;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData3;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData0;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      renderNews(newsData.slice(<span class=\"number\">0</span>,<span class=\"number\">10</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    newsLoading = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (news_page_num) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData1;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData2;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData3;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData0;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (page_num%<span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">        data = newsData.slice(<span class=\"number\">10</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">        data = newsData.slice(<span class=\"number\">20</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">        data = newsData.slice(<span class=\"number\">30</span>,<span class=\"number\">40</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">        data = newsData.slice(<span class=\"number\">40</span>,<span class=\"number\">50</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    renderNews(data);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"无限滚动\"><a href=\"#无限滚动\" class=\"headerlink\" title=\"无限滚动\"></a>无限滚动</h1><blockquote>\n<p>监听window的scroll事件，在页面的底部放一个loading的div，当滚动事件触发的时候判断loading div据顶部高度是否小于当前文档的高度，如果小于那么loading div就已经展示在页面中了，那么去进行数据获取<br>防止数据请求过于频繁添加了一个定时器<br>在页面数据加载完成的时候移除滚动事件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, scrollLoad, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scrollLoad</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (scrollTimer) &#123;</span><br><span class=\"line\">    setTimeout(scrollTimer);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  scrollTimer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loadingDom = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.scroll-stance-element'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> loadingDomTop = loadingDom.getBoundingClientRect().top;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> windowHeight = <span class=\"built_in\">window</span>.innerHeight;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadingDomTop &amp;&amp; loadingDomTop &lt; windowHeight) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ($(<span class=\"string\">'.new-con-tpl .block'</span>).length &lt; <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!newsLoading) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pageNum%<span class=\"number\">5</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          newsPageNum++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pageNum++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pageNum%<span class=\"number\">5</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">          getNews(newsPageNum, pageNum, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          getNews(newsPageNum, pageNum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        $(<span class=\"string\">'.scroll-stance-element'</span>).addClass(<span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">        $(<span class=\"string\">'.new-nomore'</span>).removeClass(<span class=\"string\">'hidden'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>, scrollLoad, <span class=\"literal\">false</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"根据屏幕宽度对字符串动态进行截取\"><a href=\"#根据屏幕宽度对字符串动态进行截取\" class=\"headerlink\" title=\"根据屏幕宽度对字符串动态进行截取\"></a>根据屏幕宽度对字符串动态进行截取</h1><blockquote>\n<p>截取字符串<br>计算文档的宽度<br>获取当前的字号<br>计算当前可以容纳的字数</p>\n</blockquote>\n<h1 id=\"进入其他项目咨询页面配置页面路由\"><a href=\"#进入其他项目咨询页面配置页面路由\" class=\"headerlink\" title=\"进入其他项目咨询页面配置页面路由\"></a>进入其他项目咨询页面配置页面路由</h1><blockquote>\n<p>由于需要跳转至另一个framework7项目中，因此配置了相关的进入页面的路由</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取url里的信息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryValue</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r = <span class=\"built_in\">window</span>.location.search.substr(<span class=\"number\">1</span>).match(reg);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>)<span class=\"keyword\">return</span> <span class=\"built_in\">unescape</span>(r[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"jsonp和直接引入静态js文件-理解jsonp\"><a href=\"#jsonp和直接引入静态js文件-理解jsonp\" class=\"headerlink\" title=\"jsonp和直接引入静态js文件(理解jsonp)\"></a>jsonp和直接引入静态js文件(理解jsonp)</h1><p>本次中由于只有静态文件，本次以引入文件的方式，在文件加载完成的时候获取约定的变量的方式获取和引入本地文件一样的道理<br>比较通俗易懂的方式理解jsonp: <a href=\"http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html</a></p>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><p>文档加载的两个函数<code>DOMContentLoaded</code>， <code>load</code></p>\n<blockquote>\n<p>在chrome network面板中可以很清新的看到<code>DOMContentLoaded</code>页面基本结构加载完成后显示完成时间。和jquery中的$(function(){})一致<br>当初始HTML文档已完全加载和解析时，将触发DOMContentLoaded事件，而无需等待样式表，图像和子框架完成加载。——MDN<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"noopener\">https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"comment\">// DOMContentLoaded</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>load</code>页面完全加载显示完成时间</p>\n<blockquote>\n<p>当一个资源及其依赖资源已完成加载时，将触发load事件。 ——MDN</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;, <span class=\"literal\">false</span>);</span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...代码...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"学习设计模式之前","date":"2019-03-11T15:36:48.000Z","_content":"\n>\n- 静态类型语言,动态类型语言&鸭子模式\n- 多肽: 多种表现形态，c#通过抽象类实现多肽，而动态类型语言符合鸭子模式就可以通过同一个指令完成不同的表达\n- 封装: 数据封装、逻辑封装。\n- 原型模式和基于原型继承的js对象系统\nObject.create() => child.prototype = p(parent实例)\n- this & call,apply\n- 闭包\n- 高阶函数\n\nTODO:\n原型继承面试题练习\n高阶函数: 详细阅读（定义，使用场景，调用栈）","source":"_posts/学习设计模式之前.md","raw":"---\ntitle: 学习设计模式之前\ndate: 2019-03-11 11:36:48\ncategories: js\ntags: 设计模式\n---\n\n>\n- 静态类型语言,动态类型语言&鸭子模式\n- 多肽: 多种表现形态，c#通过抽象类实现多肽，而动态类型语言符合鸭子模式就可以通过同一个指令完成不同的表达\n- 封装: 数据封装、逻辑封装。\n- 原型模式和基于原型继承的js对象系统\nObject.create() => child.prototype = p(parent实例)\n- this & call,apply\n- 闭包\n- 高阶函数\n\nTODO:\n原型继承面试题练习\n高阶函数: 详细阅读（定义，使用场景，调用栈）","slug":"学习设计模式之前","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3z001jzs8q1z3c0vr5","content":"<blockquote>\n</blockquote>\n<ul>\n<li>静态类型语言,动态类型语言&amp;鸭子模式</li>\n<li>多肽: 多种表现形态，c#通过抽象类实现多肽，而动态类型语言符合鸭子模式就可以通过同一个指令完成不同的表达</li>\n<li>封装: 数据封装、逻辑封装。</li>\n<li>原型模式和基于原型继承的js对象系统<br>Object.create() =&gt; child.prototype = p(parent实例)</li>\n<li>this &amp; call,apply</li>\n<li>闭包</li>\n<li>高阶函数</li>\n</ul>\n<p>TODO:<br>原型继承面试题练习<br>高阶函数: 详细阅读（定义，使用场景，调用栈）</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n</blockquote>\n<ul>\n<li>静态类型语言,动态类型语言&amp;鸭子模式</li>\n<li>多肽: 多种表现形态，c#通过抽象类实现多肽，而动态类型语言符合鸭子模式就可以通过同一个指令完成不同的表达</li>\n<li>封装: 数据封装、逻辑封装。</li>\n<li>原型模式和基于原型继承的js对象系统<br>Object.create() =&gt; child.prototype = p(parent实例)</li>\n<li>this &amp; call,apply</li>\n<li>闭包</li>\n<li>高阶函数</li>\n</ul>\n<p>TODO:<br>原型继承面试题练习<br>高阶函数: 详细阅读（定义，使用场景，调用栈）</p>\n"},{"title":"实现列表标题标题头第一列最后一列固定","date":"2017-05-24T17:20:33.000Z","_content":"\n# 实现列表标题标题头第一列最后一列固定\n>实现思路：\n创建三个div，布局为左中右，其中每个div中设置为上下结构（上为列表的表头，下为数据部分）\n左右：{overflow：hide, 宽度：固定值， 高度：根绝文档设置高度} \n中间：{overflow：auto, 宽度：文档宽度-左右宽度， 高度：根绝文档设置高度}\njs代码处理：\n上下滚动，左右的div scrollTop和当前滚动的divscrollTop, 左右滚动同理\n\n### 代码：\n#### html\n```html\n<script type=\"text/template7\" id=\"container-fluid-tpl\">\n  <div class=\"left_div\">\n    <div class=\"left_div1\">\n      <table class=\"left_table1\">\n        <tr>\n          <th>基金名称</th>\n        </tr>\n      </table>\n    </div>\n    <div class=\"left_div2\">\n      <table class=\"left_table2\">\n        {{#each dataLeft}}\n          <tr>\n            <th>\n              <div class=\"name {{font}}\">{{name}}</div>\n              <div class=\"code\">{{code}}</div>\n            </th>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n  <div class=\"data_div\">\n    <div class=\"data_div1\">\n      <div class=\"data_divx\">\n        <table class=\"data_table1\">\n          <tr>\n            <th>认/申购费率</th>\n            <th class=\"active\">日涨幅<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近1周<i class=\"iconfont icon-arrow-down2\"></i></th>\n            <th>近1月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近3月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近6月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>今年以来<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近一年<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近三年<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>成立以来<i class=\"iconfont icon-arrow-up2\"></i></th>\n          </tr>\n        </table>\n      </div>\n    </div>\n    <div class=\"data_div2\">\n      <table class=\"data_table2\">\n        {{#each dataCenter}}\n          <tr>\n            <td>\n              <div class=\"{{center1.status11}}\">{{center1.center11}}</div>\n              <div class=\"{{center1.status12}}\">{{center1.center12}}</div>\n            </td>\n            <td class=\"{{center2.status}}\">{{center2.center2}}</td>\n            <td>{{center3}}</td>\n            <td>{{center4}}</td>\n            <td>{{center5}}</td>\n            <td>{{center6}}</td>\n            <td>{{center7}}</td>\n            <td>{{center8}}</td>\n            <td>{{center9}}</td>\n            <td>{{center10}}</td>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n  <div class=\"right_div\">\n    <div class=\"right_div1\">\n      <table class=\"right_table1\">\n        <tr>\n          <th>操作</th>\n        </tr>\n      </table>\n    </div>\n    <div class=\"right_div2\">\n      <table class=\"right_table2\">\n        {{#each dataRight}}\n          <tr>\n            <th>\n              <div class=\"buy-btn\">{{this}}</div>\n            </th>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n</script>\n```\n#### css\n```css\n  .container-fluid {\n    table {\n      width: 100%;\n      max-width: 100%;\n      margin-bottom: 20px;\n    }\n    .red {\n      color: #ff0000;\n    }\n    .green {\n      color: #1bc01b;\n    }\n    .gray {\n      color: #a3a3a3;\n    }\n    .tlt{\n      color: #a3a3a3;\n      text-decoration: line-through;\n    }\n\n  }\n  .left_table1 th, .data_table1 th, .right_table1 th {\n    font-size: 13px;\n    font-weight: 500;\n    color: #686868;\n    text-align: center;\n    background: #F0F1F3;\n    padding: 7px 0;\n  }\n  .left_table2 th, .data_table2 td, .right_table2 th {\n    word-break: break-all;\n    font-size: 15px;\n    font-weight: 500;\n    text-align: center;\n    background: #fff;\n    border-bottom: 1px solid #efeff4;\n    height: 90px;\n    .fs15 {\n      font-size: 15px;\n    } \n    .fs13 {\n      font-size: 13px;\n    } \n  }\n  .left_div{\n    width:120px;\n    float: left;\n    .left_div1{\n      width: 100%;\n    }\n    .left_div2{\n      margin-top:-20px;\n      width: 100%;\n      overflow: hidden;\n    }\n    .left_table1 th {\n      text-align: left;\n      padding-left: 16px;\n    }\n    .left_table2 th {\n      text-align: left;\n      padding-left: 16px;\n      .name {\n        color: #424647;\n      }\n      .code {\n        font-size: 13px;\n        color: #888;\n      }\n    }\n  }\n  \n  .right_div{\n    width:80px;\n    float: left;\n    .right_div1{\n      width: 100%;\n    }\n    .right_div2{\n      margin-top:-20px;\n      width: 100%;\n      // height: 72vh;\n      overflow: hidden;\n    }\n    .right_table2 .buy-btn{\n      font-size: 14px;\n      color: #fff;\n      background: #e15b54;\n      display: inline-block;\n      width: 60px;\n      height: 24px;\n      line-height: 24px;\n      border-radius: 2px;\n    }\n  }\n\n  .data_div{\n    float: left;\n    .data_div1{\n      width: 100%;\n      overflow: auto;\n    }\n    .data_divx{\n        width: 900px;\n    }\n    .data_div2{\n      margin-top:-20px;\n      width:100%;\n      // height:72vh;\n      overflow: auto;\n      -webkit-overflow-scrolling: auto; \n      // -webkit-overflow-scrolling: touch;\n    }\n    .data_table1{\n      width: 880px;\n      .iconfont {\n        font-size: 12px;\n      }\n      th.active{\n        color: #e15b54;\n      }\n    }\n    .data_table2{\n      /**width和max-width一起写，手机浏览器打开也能固定长度**/\n        width: 880px;\n        max-width: 880px;\n        white-space:nowrap;\n    }\n    .data_table1 th{\n      width:10%;\n    }\n    .data_table2 td{\n      width:10%;\n    }\n  }\n```\n#### js\n```javascript\nfunction createTab(selector, data) {\n  var template = $$('#container-fluid-tpl').html();\n  var complieTemplate = Template7.compile(template);\n  var renderTemplate = complieTemplate(data);\n  $$(selector+' .container-fluid').html(renderTemplate);\n\n  var right_div2 = document.querySelector(selector+' .data_div2');\n  var data_div1 = document.querySelector(selector+' .data_div1');\n  right_div2.onscroll = function(){\n      var right_div2_top = this.scrollTop;\n      var right_div2_left = this.scrollLeft;\n      document.querySelector(selector+' .left_div2').scrollTop = right_div2_top;\n      document.querySelector(selector+' .right_div2').scrollTop = right_div2_top;\n      document.querySelector(selector+' .data_div1').scrollLeft = right_div2_left;\n  }\n  data_div1.onscroll = function(){\n      var data_div1_left = this.scrollLeft;\n      document.querySelector(selector+' .data_div2').scrollLeft = data_div1_left;\n  }\n  //设置右边div宽度\n  var tabHeight = $$('body').height()-$$('.navbar').height()-$$('.tab-nav').height()-$$(selector+' .data_divx').height()\n  document.querySelector(selector+' .data_div').style.width=\"\"+$$('body').width()-200+\"px\";  \n  document.querySelector(selector+' .left_div2').style.height=tabHeight+\"px\";  \n  document.querySelector(selector+' .data_div2').style.height=tabHeight+\"px\";  \n  document.querySelector(selector+' .right_div2').style.height=tabHeight+\"px\";  \n}\n```\n#### 问题&总结\n###### 1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\n  -webkit-overflow-scrolling: auto; // 橡皮条效果，滚动速度较慢\n  -webkit-overflow-scrolling: touch; // 默认效果\n###### 2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\n###### 3 元素距离[参考图片](http://blog.csdn.net/xxb2008/article/details/9109329)\n  offset-\n    offsetWidth(包含padding、border、不包含margin)\n    offsetHeight(同上)\n    offsetLeft(返回元素的x坐标，相对于offsetParent；如果offsetParent为null,则返回对应的文档坐标)\n    offsetTop(同上,返回元素的y坐标)\n    offsetParent(返回最近的包含该元素的定位元素)\n\n  client-\n    clientWidth(不包含border、margin、滚动条)\n    clientHeight(同上)\n    clientLeft(相当于border-left-width,属性设置元素的左边框的宽度。)\n    clientTop(相当于border-top-width)\n\n  scroll-\n    scrollWidth(不包含border、margin，返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth。)\n    scroHeight(同上)\n    scrollLeft(可读写，获取或设置元素滚动条的位置)\n    scrollTop(同上)\n\n","source":"_posts/实现列表标题标题头第一列最后一列固定.md","raw":"---\ntitle: 实现列表标题标题头第一列最后一列固定\ndate: 2017-05-24 13:20:33\ncategories: css\ntags: 布局\n---\n\n# 实现列表标题标题头第一列最后一列固定\n>实现思路：\n创建三个div，布局为左中右，其中每个div中设置为上下结构（上为列表的表头，下为数据部分）\n左右：{overflow：hide, 宽度：固定值， 高度：根绝文档设置高度} \n中间：{overflow：auto, 宽度：文档宽度-左右宽度， 高度：根绝文档设置高度}\njs代码处理：\n上下滚动，左右的div scrollTop和当前滚动的divscrollTop, 左右滚动同理\n\n### 代码：\n#### html\n```html\n<script type=\"text/template7\" id=\"container-fluid-tpl\">\n  <div class=\"left_div\">\n    <div class=\"left_div1\">\n      <table class=\"left_table1\">\n        <tr>\n          <th>基金名称</th>\n        </tr>\n      </table>\n    </div>\n    <div class=\"left_div2\">\n      <table class=\"left_table2\">\n        {{#each dataLeft}}\n          <tr>\n            <th>\n              <div class=\"name {{font}}\">{{name}}</div>\n              <div class=\"code\">{{code}}</div>\n            </th>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n  <div class=\"data_div\">\n    <div class=\"data_div1\">\n      <div class=\"data_divx\">\n        <table class=\"data_table1\">\n          <tr>\n            <th>认/申购费率</th>\n            <th class=\"active\">日涨幅<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近1周<i class=\"iconfont icon-arrow-down2\"></i></th>\n            <th>近1月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近3月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近6月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>今年以来<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近一年<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近三年<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>成立以来<i class=\"iconfont icon-arrow-up2\"></i></th>\n          </tr>\n        </table>\n      </div>\n    </div>\n    <div class=\"data_div2\">\n      <table class=\"data_table2\">\n        {{#each dataCenter}}\n          <tr>\n            <td>\n              <div class=\"{{center1.status11}}\">{{center1.center11}}</div>\n              <div class=\"{{center1.status12}}\">{{center1.center12}}</div>\n            </td>\n            <td class=\"{{center2.status}}\">{{center2.center2}}</td>\n            <td>{{center3}}</td>\n            <td>{{center4}}</td>\n            <td>{{center5}}</td>\n            <td>{{center6}}</td>\n            <td>{{center7}}</td>\n            <td>{{center8}}</td>\n            <td>{{center9}}</td>\n            <td>{{center10}}</td>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n  <div class=\"right_div\">\n    <div class=\"right_div1\">\n      <table class=\"right_table1\">\n        <tr>\n          <th>操作</th>\n        </tr>\n      </table>\n    </div>\n    <div class=\"right_div2\">\n      <table class=\"right_table2\">\n        {{#each dataRight}}\n          <tr>\n            <th>\n              <div class=\"buy-btn\">{{this}}</div>\n            </th>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n</script>\n```\n#### css\n```css\n  .container-fluid {\n    table {\n      width: 100%;\n      max-width: 100%;\n      margin-bottom: 20px;\n    }\n    .red {\n      color: #ff0000;\n    }\n    .green {\n      color: #1bc01b;\n    }\n    .gray {\n      color: #a3a3a3;\n    }\n    .tlt{\n      color: #a3a3a3;\n      text-decoration: line-through;\n    }\n\n  }\n  .left_table1 th, .data_table1 th, .right_table1 th {\n    font-size: 13px;\n    font-weight: 500;\n    color: #686868;\n    text-align: center;\n    background: #F0F1F3;\n    padding: 7px 0;\n  }\n  .left_table2 th, .data_table2 td, .right_table2 th {\n    word-break: break-all;\n    font-size: 15px;\n    font-weight: 500;\n    text-align: center;\n    background: #fff;\n    border-bottom: 1px solid #efeff4;\n    height: 90px;\n    .fs15 {\n      font-size: 15px;\n    } \n    .fs13 {\n      font-size: 13px;\n    } \n  }\n  .left_div{\n    width:120px;\n    float: left;\n    .left_div1{\n      width: 100%;\n    }\n    .left_div2{\n      margin-top:-20px;\n      width: 100%;\n      overflow: hidden;\n    }\n    .left_table1 th {\n      text-align: left;\n      padding-left: 16px;\n    }\n    .left_table2 th {\n      text-align: left;\n      padding-left: 16px;\n      .name {\n        color: #424647;\n      }\n      .code {\n        font-size: 13px;\n        color: #888;\n      }\n    }\n  }\n  \n  .right_div{\n    width:80px;\n    float: left;\n    .right_div1{\n      width: 100%;\n    }\n    .right_div2{\n      margin-top:-20px;\n      width: 100%;\n      // height: 72vh;\n      overflow: hidden;\n    }\n    .right_table2 .buy-btn{\n      font-size: 14px;\n      color: #fff;\n      background: #e15b54;\n      display: inline-block;\n      width: 60px;\n      height: 24px;\n      line-height: 24px;\n      border-radius: 2px;\n    }\n  }\n\n  .data_div{\n    float: left;\n    .data_div1{\n      width: 100%;\n      overflow: auto;\n    }\n    .data_divx{\n        width: 900px;\n    }\n    .data_div2{\n      margin-top:-20px;\n      width:100%;\n      // height:72vh;\n      overflow: auto;\n      -webkit-overflow-scrolling: auto; \n      // -webkit-overflow-scrolling: touch;\n    }\n    .data_table1{\n      width: 880px;\n      .iconfont {\n        font-size: 12px;\n      }\n      th.active{\n        color: #e15b54;\n      }\n    }\n    .data_table2{\n      /**width和max-width一起写，手机浏览器打开也能固定长度**/\n        width: 880px;\n        max-width: 880px;\n        white-space:nowrap;\n    }\n    .data_table1 th{\n      width:10%;\n    }\n    .data_table2 td{\n      width:10%;\n    }\n  }\n```\n#### js\n```javascript\nfunction createTab(selector, data) {\n  var template = $$('#container-fluid-tpl').html();\n  var complieTemplate = Template7.compile(template);\n  var renderTemplate = complieTemplate(data);\n  $$(selector+' .container-fluid').html(renderTemplate);\n\n  var right_div2 = document.querySelector(selector+' .data_div2');\n  var data_div1 = document.querySelector(selector+' .data_div1');\n  right_div2.onscroll = function(){\n      var right_div2_top = this.scrollTop;\n      var right_div2_left = this.scrollLeft;\n      document.querySelector(selector+' .left_div2').scrollTop = right_div2_top;\n      document.querySelector(selector+' .right_div2').scrollTop = right_div2_top;\n      document.querySelector(selector+' .data_div1').scrollLeft = right_div2_left;\n  }\n  data_div1.onscroll = function(){\n      var data_div1_left = this.scrollLeft;\n      document.querySelector(selector+' .data_div2').scrollLeft = data_div1_left;\n  }\n  //设置右边div宽度\n  var tabHeight = $$('body').height()-$$('.navbar').height()-$$('.tab-nav').height()-$$(selector+' .data_divx').height()\n  document.querySelector(selector+' .data_div').style.width=\"\"+$$('body').width()-200+\"px\";  \n  document.querySelector(selector+' .left_div2').style.height=tabHeight+\"px\";  \n  document.querySelector(selector+' .data_div2').style.height=tabHeight+\"px\";  \n  document.querySelector(selector+' .right_div2').style.height=tabHeight+\"px\";  \n}\n```\n#### 问题&总结\n###### 1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\n  -webkit-overflow-scrolling: auto; // 橡皮条效果，滚动速度较慢\n  -webkit-overflow-scrolling: touch; // 默认效果\n###### 2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\n###### 3 元素距离[参考图片](http://blog.csdn.net/xxb2008/article/details/9109329)\n  offset-\n    offsetWidth(包含padding、border、不包含margin)\n    offsetHeight(同上)\n    offsetLeft(返回元素的x坐标，相对于offsetParent；如果offsetParent为null,则返回对应的文档坐标)\n    offsetTop(同上,返回元素的y坐标)\n    offsetParent(返回最近的包含该元素的定位元素)\n\n  client-\n    clientWidth(不包含border、margin、滚动条)\n    clientHeight(同上)\n    clientLeft(相当于border-left-width,属性设置元素的左边框的宽度。)\n    clientTop(相当于border-top-width)\n\n  scroll-\n    scrollWidth(不包含border、margin，返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth。)\n    scroHeight(同上)\n    scrollLeft(可读写，获取或设置元素滚动条的位置)\n    scrollTop(同上)\n\n","slug":"实现列表标题标题头第一列最后一列固定","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk3z001ozs8qus4ezx7w","content":"<h1 id=\"实现列表标题标题头第一列最后一列固定\"><a href=\"#实现列表标题标题头第一列最后一列固定\" class=\"headerlink\" title=\"实现列表标题标题头第一列最后一列固定\"></a>实现列表标题标题头第一列最后一列固定</h1><blockquote>\n<p>实现思路：<br>创建三个div，布局为左中右，其中每个div中设置为上下结构（上为列表的表头，下为数据部分）<br>左右：{overflow：hide, 宽度：固定值， 高度：根绝文档设置高度}<br>中间：{overflow：auto, 宽度：文档宽度-左右宽度， 高度：根绝文档设置高度}<br>js代码处理：<br>上下滚动，左右的div scrollTop和当前滚动的divscrollTop, 左右滚动同理</p>\n</blockquote>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><h4 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/template7\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container-fluid-tpl\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_table1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>基金名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_table2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataLeft&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"name &#123;&#123;font&#125;&#125;\"</span>&gt;&#123;&#123;name&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"code\"</span>&gt;&#123;&#123;code&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_divx\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_table1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>认/申购费率<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"active\"</span>&gt;日涨幅&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">1</span>周&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-down2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">1</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">3</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">6</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;今年以来&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近一年&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近三年&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;成立以来&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_table2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataCenter&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center1.status11&#125;&#125;\"</span>&gt;&#123;&#123;center1.center11&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center1.status12&#125;&#125;\"</span>&gt;&#123;&#123;center1.center12&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;td <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center2.status&#125;&#125;\"</span>&gt;&#123;&#123;center2.center2&#125;&#125;&lt;<span class=\"regexp\">/td&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center3&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center4&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center5&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center6&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center7&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center8&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center9&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center10&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_table1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_table2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataRight&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"buy-btn\"</span>&gt;&#123;&#123;<span class=\"keyword\">this</span>&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container-fluid</span> &#123;</span><br><span class=\"line\">  table &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">    <span class=\"selector-tag\">max-width</span>: 100%;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-bottom</span>: 20<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.red</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.green</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#1bc01b</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.gray</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#a3a3a3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.tlt</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#a3a3a3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: line-through;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left_table1</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.data_table1</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.right_table1</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#686868</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F0F1F3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">7px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left_table2</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.data_table2</span> <span class=\"selector-tag\">td</span>, <span class=\"selector-class\">.right_table2</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#efeff4</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">  .fs15 &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">font-size</span>: 15<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"selector-class\">.fs13</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left_div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  .left_div1&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.left_div2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.left_table1</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.left_table2</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    .name &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#424647</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.code</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right_div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">80px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  .right_div1&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.right_div2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    // height: 72vh;</span><br><span class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.right_table2</span> <span class=\"selector-class\">.buy-btn</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#e15b54</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.data_div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  .data_div1&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_divx</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_div2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    // height:72vh;</span><br><span class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">-webkit-overflow-scrolling</span>: <span class=\"selector-tag\">auto</span>; </span><br><span class=\"line\">    // -webkit-overflow-scrolling: touch;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_table1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">880px</span>;</span><br><span class=\"line\">    .iconfont &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">font-size</span>: 12<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">th</span><span class=\"selector-class\">.active</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#e15b54</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_table2</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**width和max-width一起写，手机浏览器打开也能固定长度**/</span></span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">880px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">max-width</span>: <span class=\"number\">880px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_table1</span> <span class=\"selector-tag\">th</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">10%</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_table2</span> <span class=\"selector-tag\">td</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">10%</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTab</span>(<span class=\"params\">selector, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> template = $$(<span class=\"string\">'#container-fluid-tpl'</span>).html();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> complieTemplate = Template7.compile(template);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderTemplate = complieTemplate(data);</span><br><span class=\"line\">  $$(selector+<span class=\"string\">' .container-fluid'</span>).html(renderTemplate);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> right_div2 = <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data_div1 = <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div1'</span>);</span><br><span class=\"line\">  right_div2.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> right_div2_top = <span class=\"keyword\">this</span>.scrollTop;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> right_div2_left = <span class=\"keyword\">this</span>.scrollLeft;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .left_div2'</span>).scrollTop = right_div2_top;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .right_div2'</span>).scrollTop = right_div2_top;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div1'</span>).scrollLeft = right_div2_left;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  data_div1.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> data_div1_left = <span class=\"keyword\">this</span>.scrollLeft;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>).scrollLeft = data_div1_left;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//设置右边div宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> tabHeight = $$(<span class=\"string\">'body'</span>).height()-$$(<span class=\"string\">'.navbar'</span>).height()-$$(<span class=\"string\">'.tab-nav'</span>).height()-$$(selector+<span class=\"string\">' .data_divx'</span>).height()</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div'</span>).style.width=<span class=\"string\">\"\"</span>+$$(<span class=\"string\">'body'</span>).width()<span class=\"number\">-200</span>+<span class=\"string\">\"px\"</span>;  </span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .left_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .right_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"问题-amp-总结\"><a href=\"#问题-amp-总结\" class=\"headerlink\" title=\"问题&amp;总结\"></a>问题&amp;总结</h4><h6 id=\"1-苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\"><a href=\"#1-苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\" class=\"headerlink\" title=\"1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\"></a>1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置</h6><p>  -webkit-overflow-scrolling: auto; // 橡皮条效果，滚动速度较慢<br>  -webkit-overflow-scrolling: touch; // 默认效果</p>\n<h6 id=\"2-横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\"><a href=\"#2-横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\" class=\"headerlink\" title=\"2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\"></a>2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。</h6><h6 id=\"3-元素距离参考图片\"><a href=\"#3-元素距离参考图片\" class=\"headerlink\" title=\"3 元素距离参考图片\"></a>3 元素距离<a href=\"http://blog.csdn.net/xxb2008/article/details/9109329\" target=\"_blank\" rel=\"noopener\">参考图片</a></h6><p>  offset-<br>    offsetWidth(包含padding、border、不包含margin)<br>    offsetHeight(同上)<br>    offsetLeft(返回元素的x坐标，相对于offsetParent；如果offsetParent为null,则返回对应的文档坐标)<br>    offsetTop(同上,返回元素的y坐标)<br>    offsetParent(返回最近的包含该元素的定位元素)</p>\n<p>  client-<br>    clientWidth(不包含border、margin、滚动条)<br>    clientHeight(同上)<br>    clientLeft(相当于border-left-width,属性设置元素的左边框的宽度。)<br>    clientTop(相当于border-top-width)</p>\n<p>  scroll-<br>    scrollWidth(不包含border、margin，返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth。)<br>    scroHeight(同上)<br>    scrollLeft(可读写，获取或设置元素滚动条的位置)<br>    scrollTop(同上)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实现列表标题标题头第一列最后一列固定\"><a href=\"#实现列表标题标题头第一列最后一列固定\" class=\"headerlink\" title=\"实现列表标题标题头第一列最后一列固定\"></a>实现列表标题标题头第一列最后一列固定</h1><blockquote>\n<p>实现思路：<br>创建三个div，布局为左中右，其中每个div中设置为上下结构（上为列表的表头，下为数据部分）<br>左右：{overflow：hide, 宽度：固定值， 高度：根绝文档设置高度}<br>中间：{overflow：auto, 宽度：文档宽度-左右宽度， 高度：根绝文档设置高度}<br>js代码处理：<br>上下滚动，左右的div scrollTop和当前滚动的divscrollTop, 左右滚动同理</p>\n</blockquote>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><h4 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/template7\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container-fluid-tpl\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_table1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>基金名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_table2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataLeft&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"name &#123;&#123;font&#125;&#125;\"</span>&gt;&#123;&#123;name&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"code\"</span>&gt;&#123;&#123;code&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_divx\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">        &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_table1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>认/申购费率<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"active\"</span>&gt;日涨幅&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">1</span>周&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-down2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">1</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">3</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">6</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;今年以来&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近一年&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;近三年&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;th&gt;成立以来&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_table2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataCenter&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center1.status11&#125;&#125;\"</span>&gt;&#123;&#123;center1.center11&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center1.status12&#125;&#125;\"</span>&gt;&#123;&#123;center1.center12&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">            &lt;td <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center2.status&#125;&#125;\"</span>&gt;&#123;&#123;center2.center2&#125;&#125;&lt;<span class=\"regexp\">/td&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center3&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center4&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center5&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center6&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center7&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center8&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center9&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center10&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_table1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_table2\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataRight&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"buy-btn\"</span>&gt;&#123;&#123;<span class=\"keyword\">this</span>&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container-fluid</span> &#123;</span><br><span class=\"line\">  table &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">    <span class=\"selector-tag\">max-width</span>: 100%;</span><br><span class=\"line\">    <span class=\"selector-tag\">margin-bottom</span>: 20<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.red</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ff0000</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.green</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#1bc01b</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.gray</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#a3a3a3</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.tlt</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#a3a3a3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">text-decoration</span>: line-through;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left_table1</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.data_table1</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.right_table1</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#686868</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F0F1F3</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">7px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left_table2</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.data_table2</span> <span class=\"selector-tag\">td</span>, <span class=\"selector-class\">.right_table2</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#efeff4</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">  .fs15 &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">font-size</span>: 15<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"selector-class\">.fs13</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left_div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">120px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  .left_div1&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.left_div2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.left_table1</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.left_table2</span> <span class=\"selector-tag\">th</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">text-align</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">16px</span>;</span><br><span class=\"line\">    .name &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#424647</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-class\">.code</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right_div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">80px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  .right_div1&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.right_div2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    // height: 72vh;</span><br><span class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.right_table2</span> <span class=\"selector-class\">.buy-btn</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#e15b54</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.data_div</span>&#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  .data_div1&#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</span><br><span class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_divx</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">900px</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_div2</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    // height:72vh;</span><br><span class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">-webkit-overflow-scrolling</span>: <span class=\"selector-tag\">auto</span>; </span><br><span class=\"line\">    // -webkit-overflow-scrolling: touch;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_table1</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">880px</span>;</span><br><span class=\"line\">    .iconfont &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">font-size</span>: 12<span class=\"selector-tag\">px</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">th</span><span class=\"selector-class\">.active</span>&#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#e15b54</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_table2</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**width和max-width一起写，手机浏览器打开也能固定长度**/</span></span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">880px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">max-width</span>: <span class=\"number\">880px</span>;</span><br><span class=\"line\">      <span class=\"attribute\">white-space</span>:nowrap;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_table1</span> <span class=\"selector-tag\">th</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">10%</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"selector-class\">.data_table2</span> <span class=\"selector-tag\">td</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">10%</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTab</span>(<span class=\"params\">selector, data</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> template = $$(<span class=\"string\">'#container-fluid-tpl'</span>).html();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> complieTemplate = Template7.compile(template);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> renderTemplate = complieTemplate(data);</span><br><span class=\"line\">  $$(selector+<span class=\"string\">' .container-fluid'</span>).html(renderTemplate);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> right_div2 = <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data_div1 = <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div1'</span>);</span><br><span class=\"line\">  right_div2.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> right_div2_top = <span class=\"keyword\">this</span>.scrollTop;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> right_div2_left = <span class=\"keyword\">this</span>.scrollLeft;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .left_div2'</span>).scrollTop = right_div2_top;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .right_div2'</span>).scrollTop = right_div2_top;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div1'</span>).scrollLeft = right_div2_left;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  data_div1.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> data_div1_left = <span class=\"keyword\">this</span>.scrollLeft;</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>).scrollLeft = data_div1_left;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//设置右边div宽度</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> tabHeight = $$(<span class=\"string\">'body'</span>).height()-$$(<span class=\"string\">'.navbar'</span>).height()-$$(<span class=\"string\">'.tab-nav'</span>).height()-$$(selector+<span class=\"string\">' .data_divx'</span>).height()</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div'</span>).style.width=<span class=\"string\">\"\"</span>+$$(<span class=\"string\">'body'</span>).width()<span class=\"number\">-200</span>+<span class=\"string\">\"px\"</span>;  </span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .left_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </span><br><span class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .right_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"问题-amp-总结\"><a href=\"#问题-amp-总结\" class=\"headerlink\" title=\"问题&amp;总结\"></a>问题&amp;总结</h4><h6 id=\"1-苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\"><a href=\"#1-苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\" class=\"headerlink\" title=\"1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\"></a>1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置</h6><p>  -webkit-overflow-scrolling: auto; // 橡皮条效果，滚动速度较慢<br>  -webkit-overflow-scrolling: touch; // 默认效果</p>\n<h6 id=\"2-横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\"><a href=\"#2-横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\" class=\"headerlink\" title=\"2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\"></a>2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。</h6><h6 id=\"3-元素距离参考图片\"><a href=\"#3-元素距离参考图片\" class=\"headerlink\" title=\"3 元素距离参考图片\"></a>3 元素距离<a href=\"http://blog.csdn.net/xxb2008/article/details/9109329\" target=\"_blank\" rel=\"noopener\">参考图片</a></h6><p>  offset-<br>    offsetWidth(包含padding、border、不包含margin)<br>    offsetHeight(同上)<br>    offsetLeft(返回元素的x坐标，相对于offsetParent；如果offsetParent为null,则返回对应的文档坐标)<br>    offsetTop(同上,返回元素的y坐标)<br>    offsetParent(返回最近的包含该元素的定位元素)</p>\n<p>  client-<br>    clientWidth(不包含border、margin、滚动条)<br>    clientHeight(同上)<br>    clientLeft(相当于border-left-width,属性设置元素的左边框的宽度。)<br>    clientTop(相当于border-top-width)</p>\n<p>  scroll-<br>    scrollWidth(不包含border、margin，返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth。)<br>    scroHeight(同上)<br>    scrollLeft(可读写，获取或设置元素滚动条的位置)<br>    scrollTop(同上)</p>\n"},{"title":"布局","date":"2017-09-29T18:17:15.000Z","_content":"\n>布局: 元素的摆放方式\ndisplay\nposition\nfloat\nflex\n\n## display 实现同行显示或者换行显示\n\n  block（p, h1, ul, form）\n  和margin: 0 auto 组合使用，居中显示\n\n  inline(span, a, label)\n\n  inline-block(input, textarea, select, button)\n  和inline比起来，内容换行后占据宽度剩下的空间\n  和 vertical-align: middle 实现垂直居中\n\n  none\n  display: none VS visibility: hidden\n  `visibility 元素仅仅是隐藏，占据原来的空间`\n\n## position 定位\ntop, bottom, left, right, z-index\n同时设置top, bottom, left, right会将元素撑开\n\n`z-index 栈`, 因此z-index大的不一定就显示在上面\n\nstatic|relative|absolute|fixed\n### relative\n仍在文档流中\n参照物为元素本身\n\n### absolute\n默认宽度为内容宽度，可以通过`width:XX`，设置宽度设置高度可能需要使用`top: XX; bottom: XX;`\n通过使用固定定位可以方便的实现顶部栏固定，内容区域滚动\n脱离文档流\n参照物为第一个定位祖先/视窗（`包含块`/`初始包含块`--padding-edge）\nhttps://segmentfault.com/a/1190000009661604\n\n### fixed\n默认宽度为内容宽度\n脱离文档流\n参照物为视窗\n\nios中会存在一些问题，存在原因？解决方式？\n问题，解决方案\niscroll库引入\n动态改变position的值，改为static\n\n\n## float\nleft right none\n默认宽度为内容宽度\n`半脱离文档流`（对元素，托利文档流，对内容，在文档流）\n会向指定方向一直移动\n\nclear [both|left:right|none|inherit]\n应用于后续元素\n应用块级元素\n`清除浮动的方法`：\n增加空白元素，设置class{display: block; clear: both; }\n在浮动元素的父元素添加clearfix\n.clearfix:after {\n  content: '.';\n  display: block;\n  clear: both;\n  height: 0;\n  overflow: hidden;\n  visibility: hidden;\n}\n\n## flex\nflex-grow: 拉伸\nflex-shrink: 收缩\n\n## 其它\n实现左右布局的方式\nabsolute+margin-left\nfix+margin-left\nfloat\nflex\n\n顶部固定，底部固定布局\nposition: fixed固定，\n使用padding-bottom和padding-top控制上下间距。\n\n走马观花的耕了一遍..感觉没有多少成就感，呜呜 ~~~~(>_<)~~~~ 以后有收获再来升级这篇文章吧..\n","source":"_posts/布局.md","raw":"---\ntitle: 布局\ndate: 2017-09-29 14:17:15\ncategories: css\ntags: 布局\n---\n\n>布局: 元素的摆放方式\ndisplay\nposition\nfloat\nflex\n\n## display 实现同行显示或者换行显示\n\n  block（p, h1, ul, form）\n  和margin: 0 auto 组合使用，居中显示\n\n  inline(span, a, label)\n\n  inline-block(input, textarea, select, button)\n  和inline比起来，内容换行后占据宽度剩下的空间\n  和 vertical-align: middle 实现垂直居中\n\n  none\n  display: none VS visibility: hidden\n  `visibility 元素仅仅是隐藏，占据原来的空间`\n\n## position 定位\ntop, bottom, left, right, z-index\n同时设置top, bottom, left, right会将元素撑开\n\n`z-index 栈`, 因此z-index大的不一定就显示在上面\n\nstatic|relative|absolute|fixed\n### relative\n仍在文档流中\n参照物为元素本身\n\n### absolute\n默认宽度为内容宽度，可以通过`width:XX`，设置宽度设置高度可能需要使用`top: XX; bottom: XX;`\n通过使用固定定位可以方便的实现顶部栏固定，内容区域滚动\n脱离文档流\n参照物为第一个定位祖先/视窗（`包含块`/`初始包含块`--padding-edge）\nhttps://segmentfault.com/a/1190000009661604\n\n### fixed\n默认宽度为内容宽度\n脱离文档流\n参照物为视窗\n\nios中会存在一些问题，存在原因？解决方式？\n问题，解决方案\niscroll库引入\n动态改变position的值，改为static\n\n\n## float\nleft right none\n默认宽度为内容宽度\n`半脱离文档流`（对元素，托利文档流，对内容，在文档流）\n会向指定方向一直移动\n\nclear [both|left:right|none|inherit]\n应用于后续元素\n应用块级元素\n`清除浮动的方法`：\n增加空白元素，设置class{display: block; clear: both; }\n在浮动元素的父元素添加clearfix\n.clearfix:after {\n  content: '.';\n  display: block;\n  clear: both;\n  height: 0;\n  overflow: hidden;\n  visibility: hidden;\n}\n\n## flex\nflex-grow: 拉伸\nflex-shrink: 收缩\n\n## 其它\n实现左右布局的方式\nabsolute+margin-left\nfix+margin-left\nfloat\nflex\n\n顶部固定，底部固定布局\nposition: fixed固定，\n使用padding-bottom和padding-top控制上下间距。\n\n走马观花的耕了一遍..感觉没有多少成就感，呜呜 ~~~~(>_<)~~~~ 以后有收获再来升级这篇文章吧..\n","slug":"布局","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk40001rzs8ql3kzwlfg","content":"<blockquote>\n<p>布局: 元素的摆放方式<br>display<br>position<br>float<br>flex</p>\n</blockquote>\n<h2 id=\"display-实现同行显示或者换行显示\"><a href=\"#display-实现同行显示或者换行显示\" class=\"headerlink\" title=\"display 实现同行显示或者换行显示\"></a>display 实现同行显示或者换行显示</h2><p>  block（p, h1, ul, form）<br>  和margin: 0 auto 组合使用，居中显示</p>\n<p>  inline(span, a, label)</p>\n<p>  inline-block(input, textarea, select, button)<br>  和inline比起来，内容换行后占据宽度剩下的空间<br>  和 vertical-align: middle 实现垂直居中</p>\n<p>  none<br>  display: none VS visibility: hidden<br>  <code>visibility 元素仅仅是隐藏，占据原来的空间</code></p>\n<h2 id=\"position-定位\"><a href=\"#position-定位\" class=\"headerlink\" title=\"position 定位\"></a>position 定位</h2><p>top, bottom, left, right, z-index<br>同时设置top, bottom, left, right会将元素撑开</p>\n<p><code>z-index 栈</code>, 因此z-index大的不一定就显示在上面</p>\n<p>static|relative|absolute|fixed</p>\n<h3 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h3><p>仍在文档流中<br>参照物为元素本身</p>\n<h3 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h3><p>默认宽度为内容宽度，可以通过<code>width:XX</code>，设置宽度设置高度可能需要使用<code>top: XX; bottom: XX;</code><br>通过使用固定定位可以方便的实现顶部栏固定，内容区域滚动<br>脱离文档流<br>参照物为第一个定位祖先/视窗（<code>包含块</code>/<code>初始包含块</code>–padding-edge）<br><a href=\"https://segmentfault.com/a/1190000009661604\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000009661604</a></p>\n<h3 id=\"fixed\"><a href=\"#fixed\" class=\"headerlink\" title=\"fixed\"></a>fixed</h3><p>默认宽度为内容宽度<br>脱离文档流<br>参照物为视窗</p>\n<p>ios中会存在一些问题，存在原因？解决方式？<br>问题，解决方案<br>iscroll库引入<br>动态改变position的值，改为static</p>\n<h2 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h2><p>left right none<br>默认宽度为内容宽度<br><code>半脱离文档流</code>（对元素，托利文档流，对内容，在文档流）<br>会向指定方向一直移动</p>\n<p>clear [both|left:right|none|inherit]<br>应用于后续元素<br>应用块级元素<br><code>清除浮动的方法</code>：<br>增加空白元素，设置class{display: block; clear: both; }<br>在浮动元素的父元素添加clearfix<br>.clearfix:after {<br>  content: ‘.’;<br>  display: block;<br>  clear: both;<br>  height: 0;<br>  overflow: hidden;<br>  visibility: hidden;<br>}</p>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>flex-grow: 拉伸<br>flex-shrink: 收缩</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>实现左右布局的方式<br>absolute+margin-left<br>fix+margin-left<br>float<br>flex</p>\n<p>顶部固定，底部固定布局<br>position: fixed固定，<br>使用padding-bottom和padding-top控制上下间距。</p>\n<p>走马观花的耕了一遍..感觉没有多少成就感，呜呜 <del>~~(&gt;_&lt;)</del>~~ 以后有收获再来升级这篇文章吧..</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>布局: 元素的摆放方式<br>display<br>position<br>float<br>flex</p>\n</blockquote>\n<h2 id=\"display-实现同行显示或者换行显示\"><a href=\"#display-实现同行显示或者换行显示\" class=\"headerlink\" title=\"display 实现同行显示或者换行显示\"></a>display 实现同行显示或者换行显示</h2><p>  block（p, h1, ul, form）<br>  和margin: 0 auto 组合使用，居中显示</p>\n<p>  inline(span, a, label)</p>\n<p>  inline-block(input, textarea, select, button)<br>  和inline比起来，内容换行后占据宽度剩下的空间<br>  和 vertical-align: middle 实现垂直居中</p>\n<p>  none<br>  display: none VS visibility: hidden<br>  <code>visibility 元素仅仅是隐藏，占据原来的空间</code></p>\n<h2 id=\"position-定位\"><a href=\"#position-定位\" class=\"headerlink\" title=\"position 定位\"></a>position 定位</h2><p>top, bottom, left, right, z-index<br>同时设置top, bottom, left, right会将元素撑开</p>\n<p><code>z-index 栈</code>, 因此z-index大的不一定就显示在上面</p>\n<p>static|relative|absolute|fixed</p>\n<h3 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h3><p>仍在文档流中<br>参照物为元素本身</p>\n<h3 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h3><p>默认宽度为内容宽度，可以通过<code>width:XX</code>，设置宽度设置高度可能需要使用<code>top: XX; bottom: XX;</code><br>通过使用固定定位可以方便的实现顶部栏固定，内容区域滚动<br>脱离文档流<br>参照物为第一个定位祖先/视窗（<code>包含块</code>/<code>初始包含块</code>–padding-edge）<br><a href=\"https://segmentfault.com/a/1190000009661604\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000009661604</a></p>\n<h3 id=\"fixed\"><a href=\"#fixed\" class=\"headerlink\" title=\"fixed\"></a>fixed</h3><p>默认宽度为内容宽度<br>脱离文档流<br>参照物为视窗</p>\n<p>ios中会存在一些问题，存在原因？解决方式？<br>问题，解决方案<br>iscroll库引入<br>动态改变position的值，改为static</p>\n<h2 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h2><p>left right none<br>默认宽度为内容宽度<br><code>半脱离文档流</code>（对元素，托利文档流，对内容，在文档流）<br>会向指定方向一直移动</p>\n<p>clear [both|left:right|none|inherit]<br>应用于后续元素<br>应用块级元素<br><code>清除浮动的方法</code>：<br>增加空白元素，设置class{display: block; clear: both; }<br>在浮动元素的父元素添加clearfix<br>.clearfix:after {<br>  content: ‘.’;<br>  display: block;<br>  clear: both;<br>  height: 0;<br>  overflow: hidden;<br>  visibility: hidden;<br>}</p>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>flex-grow: 拉伸<br>flex-shrink: 收缩</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>实现左右布局的方式<br>absolute+margin-left<br>fix+margin-left<br>float<br>flex</p>\n<p>顶部固定，底部固定布局<br>position: fixed固定，<br>使用padding-bottom和padding-top控制上下间距。</p>\n<p>走马观花的耕了一遍..感觉没有多少成就感，呜呜 <del>~~(&gt;_&lt;)</del>~~ 以后有收获再来升级这篇文章吧..</p>\n"},{"title":"性能优化总结","date":"2018-07-17T13:16:44.000Z","_content":"\n>这是一篇文字搬运，弥补不太好的记忆,期待哪天写一份有灵魂的总结。。\n\n## 资源合并与压缩\n\n## 图片相关优化\n>jpeg: 有损压缩，对应图片质量要求不高的情况可以使用\npng8: 支持透明\npng24: 不支持透明\npng32: 支持透明\nsvg,iconfont， img inline\n\n## css、js的加载和执行\n>当我们在浏览器中输入一个地址。浏览器会搜索有没有配置相应的DNS,如果配置走host中配置的地址，经过（主干网-》交换机-》路由器-》主干网）网络走到服务端，在服务的control -》 model -》 db 层进行逻辑处理，返回至前端。\n前端首先拿到一个html字符串，浏览器解析器将其从上之下按顺序加载。遇到css和js,以及HTML会被转化成 dom cssom最终合成渲染树-》layout(combine layout) -> paint\n在这个过程中通过使用cdn请求，了解js, css阻塞情况合理使用defer，async\nhtml渲染特点：\n顺序执行，并发加载（由于浏览器是有并发度的，同时请求同一个地址达到并发度会等到资源加载完成以后再次加载）\n引入方式\ncss阻塞: 1 css head中阻塞页面渲染 2 css阻塞js的执行 3 css不阻塞外部资源加载\njs阻塞： 1 直接引入的js阻塞页面的渲染 2 js不阻塞资源的加载 3 js顺序执行，阻塞后续js执行逻辑\n依赖关系\n页面渲染依赖css的加载\njs执行顺序的依赖关系\njs逻辑对应dom节点的依赖关系\n\n## 重绘与回流\n>当页面的结构发生改变，通常一些几何属性发生改变时会出发重绘, 只是展示外观的属性发生改变时会出发重绘，出发回流时必将出发重绘\n触发重布局的属性： 盒模型属性，定位属性，文字结构属性\n触发重绘的属性：一些颜色属性\n\n>dom创建过程\n1 获取dom后分割成多个图层\n2 对每个图层节点计算样式结果（样式重计算）\n3 为每个节点生成图层和位置(回流和重布局)\n4 将每个节点绘制天成到图层位图中（重绘）\n5 图层作为文理上传至GPU\n6 合并图层最终生成屏幕图像（合并图层）\n\n>创建图层条件(图层合并是一个比较耗时的操作，关注图层产生的条件是必要的)\n3D或透视变换(perspective transform)CSS属性\n使用加速视频解码的<video>节点\n拥有3D(WebGL)上下文或加速的2D上下文的<canvas>节点\n混合插件(如Flash)\n对自己的opacity做CSS动画或使用一个动画webkit变换的元素\n拥有加速CSS过滤器的元素\n元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里）\n元素有一个z-index较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染）\n\n>优化点\n对应动画新建一个图层\n避免一条条的修改节点样式，最好写在一个class里面\n使用opacity代替visibility\n使用tansform替代top..\n避免使用table布局，因为对table进行修改时可能导致整个页面重绘\ndom离线修改，先将dom节点设置为display: none,修改完成再显示\n使用requestanimationFrame代替定时器window.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。[requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)\n\n>chrome 上可以看到dom在构建期间各个阶段所消耗的时间以及更详细的解决方案。\n[开发者工具](https://developers.google.cn/web/tools/chrome-devtools/)\n[性能优化](https://developers.google.cn/web/fundamentals/performance/rail)\n\n\n## 懒加载和预加载\n> 懒加载\n`懒加载`： 通常被应用于图片加载。很多电商网站中会加载很多图片，当图片请求较多时，导致页面加载较慢，甚至会影响一些js或者css的下载，这种情况就会使用到懒加载。\n懒加载和滚动加载实现原理是类似的，利用滚动事件，当我们定义的某个元素出现在我们规定的位置时触发一些函数。\n`预加载`： 在一些场景下比如动画播放，要保证动画的连贯性，就需要时一些资源提前加载，或者是在资源空置时。这个时候就需要预加载，预加载通常的手段有使用img标签，使用image对象，使用xhr,缺点是不支持跨域。也有相应的库封装了preload。\n```\n// 懒加载\nvar viewHeight = document.documentElement.clientHeight // 可视区域的高度\n\nfunction lazyload () {\n  var eles = document.querySelectorAll('img[data-original][lazyload]')\n  Array.prototype.forEach.call(eles, function (item, index) {\n    var rect\n    if (item.dataset.original === '')\n      return\n    rect = item.getBoundingClientRect()\n\n    if (rect.bottom >= 0 && rect.top < viewHeight) {\n      !function () {\n        var img = new Image()\n        img.src = item.dataset.original\n        img.onload = function () {\n          item.src = img.src\n        }\n        item.removeAttribute('data-original')\n        item.removeAttribute('lazyload')\n      }()\n    }\n  })\n}\n\nlazyload()\n\ndocument.addEventListener('scroll', lazyload)\n```\n\n## 浏览器存储\ncookie， localStorage， sessionStorage， indexDB\n\n## 缓存\n>分级缓存（优先级从上到下）\n1 浏览器缓存 根据cache control、expires来判断是否在浏览器过期，没有过期在Chrome中可以看到from memory catch 中获取。如何配置了no-cache会每次向服务器请求资源， 配置no-store 将不会读取服务端缓存，直接请求最新内容\n2 服务端缓存 如果配置了 etag/last-modified, 请求时携带if-none-match/if-modify-since来判断是否一致，如果一致返回304\n3 没有缓存返回200\n\n## 服务端性能优化\n","source":"_posts/性能优化总结.md","raw":"---\ntitle: 性能优化总结\ndate: 2018-07-17 09:16:44\ncategories: js\ntags: 性能优化\n---\n\n>这是一篇文字搬运，弥补不太好的记忆,期待哪天写一份有灵魂的总结。。\n\n## 资源合并与压缩\n\n## 图片相关优化\n>jpeg: 有损压缩，对应图片质量要求不高的情况可以使用\npng8: 支持透明\npng24: 不支持透明\npng32: 支持透明\nsvg,iconfont， img inline\n\n## css、js的加载和执行\n>当我们在浏览器中输入一个地址。浏览器会搜索有没有配置相应的DNS,如果配置走host中配置的地址，经过（主干网-》交换机-》路由器-》主干网）网络走到服务端，在服务的control -》 model -》 db 层进行逻辑处理，返回至前端。\n前端首先拿到一个html字符串，浏览器解析器将其从上之下按顺序加载。遇到css和js,以及HTML会被转化成 dom cssom最终合成渲染树-》layout(combine layout) -> paint\n在这个过程中通过使用cdn请求，了解js, css阻塞情况合理使用defer，async\nhtml渲染特点：\n顺序执行，并发加载（由于浏览器是有并发度的，同时请求同一个地址达到并发度会等到资源加载完成以后再次加载）\n引入方式\ncss阻塞: 1 css head中阻塞页面渲染 2 css阻塞js的执行 3 css不阻塞外部资源加载\njs阻塞： 1 直接引入的js阻塞页面的渲染 2 js不阻塞资源的加载 3 js顺序执行，阻塞后续js执行逻辑\n依赖关系\n页面渲染依赖css的加载\njs执行顺序的依赖关系\njs逻辑对应dom节点的依赖关系\n\n## 重绘与回流\n>当页面的结构发生改变，通常一些几何属性发生改变时会出发重绘, 只是展示外观的属性发生改变时会出发重绘，出发回流时必将出发重绘\n触发重布局的属性： 盒模型属性，定位属性，文字结构属性\n触发重绘的属性：一些颜色属性\n\n>dom创建过程\n1 获取dom后分割成多个图层\n2 对每个图层节点计算样式结果（样式重计算）\n3 为每个节点生成图层和位置(回流和重布局)\n4 将每个节点绘制天成到图层位图中（重绘）\n5 图层作为文理上传至GPU\n6 合并图层最终生成屏幕图像（合并图层）\n\n>创建图层条件(图层合并是一个比较耗时的操作，关注图层产生的条件是必要的)\n3D或透视变换(perspective transform)CSS属性\n使用加速视频解码的<video>节点\n拥有3D(WebGL)上下文或加速的2D上下文的<canvas>节点\n混合插件(如Flash)\n对自己的opacity做CSS动画或使用一个动画webkit变换的元素\n拥有加速CSS过滤器的元素\n元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里）\n元素有一个z-index较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染）\n\n>优化点\n对应动画新建一个图层\n避免一条条的修改节点样式，最好写在一个class里面\n使用opacity代替visibility\n使用tansform替代top..\n避免使用table布局，因为对table进行修改时可能导致整个页面重绘\ndom离线修改，先将dom节点设置为display: none,修改完成再显示\n使用requestanimationFrame代替定时器window.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。[requestAnimationFrame](https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame)\n\n>chrome 上可以看到dom在构建期间各个阶段所消耗的时间以及更详细的解决方案。\n[开发者工具](https://developers.google.cn/web/tools/chrome-devtools/)\n[性能优化](https://developers.google.cn/web/fundamentals/performance/rail)\n\n\n## 懒加载和预加载\n> 懒加载\n`懒加载`： 通常被应用于图片加载。很多电商网站中会加载很多图片，当图片请求较多时，导致页面加载较慢，甚至会影响一些js或者css的下载，这种情况就会使用到懒加载。\n懒加载和滚动加载实现原理是类似的，利用滚动事件，当我们定义的某个元素出现在我们规定的位置时触发一些函数。\n`预加载`： 在一些场景下比如动画播放，要保证动画的连贯性，就需要时一些资源提前加载，或者是在资源空置时。这个时候就需要预加载，预加载通常的手段有使用img标签，使用image对象，使用xhr,缺点是不支持跨域。也有相应的库封装了preload。\n```\n// 懒加载\nvar viewHeight = document.documentElement.clientHeight // 可视区域的高度\n\nfunction lazyload () {\n  var eles = document.querySelectorAll('img[data-original][lazyload]')\n  Array.prototype.forEach.call(eles, function (item, index) {\n    var rect\n    if (item.dataset.original === '')\n      return\n    rect = item.getBoundingClientRect()\n\n    if (rect.bottom >= 0 && rect.top < viewHeight) {\n      !function () {\n        var img = new Image()\n        img.src = item.dataset.original\n        img.onload = function () {\n          item.src = img.src\n        }\n        item.removeAttribute('data-original')\n        item.removeAttribute('lazyload')\n      }()\n    }\n  })\n}\n\nlazyload()\n\ndocument.addEventListener('scroll', lazyload)\n```\n\n## 浏览器存储\ncookie， localStorage， sessionStorage， indexDB\n\n## 缓存\n>分级缓存（优先级从上到下）\n1 浏览器缓存 根据cache control、expires来判断是否在浏览器过期，没有过期在Chrome中可以看到from memory catch 中获取。如何配置了no-cache会每次向服务器请求资源， 配置no-store 将不会读取服务端缓存，直接请求最新内容\n2 服务端缓存 如果配置了 etag/last-modified, 请求时携带if-none-match/if-modify-since来判断是否一致，如果一致返回304\n3 没有缓存返回200\n\n## 服务端性能优化\n","slug":"性能优化总结","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk40001uzs8qf2q8u9nf","content":"<blockquote>\n<p>这是一篇文字搬运，弥补不太好的记忆,期待哪天写一份有灵魂的总结。。</p>\n</blockquote>\n<h2 id=\"资源合并与压缩\"><a href=\"#资源合并与压缩\" class=\"headerlink\" title=\"资源合并与压缩\"></a>资源合并与压缩</h2><h2 id=\"图片相关优化\"><a href=\"#图片相关优化\" class=\"headerlink\" title=\"图片相关优化\"></a>图片相关优化</h2><blockquote>\n<p>jpeg: 有损压缩，对应图片质量要求不高的情况可以使用<br>png8: 支持透明<br>png24: 不支持透明<br>png32: 支持透明<br>svg,iconfont， img inline</p>\n</blockquote>\n<h2 id=\"css、js的加载和执行\"><a href=\"#css、js的加载和执行\" class=\"headerlink\" title=\"css、js的加载和执行\"></a>css、js的加载和执行</h2><blockquote>\n<p>当我们在浏览器中输入一个地址。浏览器会搜索有没有配置相应的DNS,如果配置走host中配置的地址，经过（主干网-》交换机-》路由器-》主干网）网络走到服务端，在服务的control -》 model -》 db 层进行逻辑处理，返回至前端。<br>前端首先拿到一个html字符串，浏览器解析器将其从上之下按顺序加载。遇到css和js,以及HTML会被转化成 dom cssom最终合成渲染树-》layout(combine layout) -&gt; paint<br>在这个过程中通过使用cdn请求，了解js, css阻塞情况合理使用defer，async<br>html渲染特点：<br>顺序执行，并发加载（由于浏览器是有并发度的，同时请求同一个地址达到并发度会等到资源加载完成以后再次加载）<br>引入方式<br>css阻塞: 1 css head中阻塞页面渲染 2 css阻塞js的执行 3 css不阻塞外部资源加载<br>js阻塞： 1 直接引入的js阻塞页面的渲染 2 js不阻塞资源的加载 3 js顺序执行，阻塞后续js执行逻辑<br>依赖关系<br>页面渲染依赖css的加载<br>js执行顺序的依赖关系<br>js逻辑对应dom节点的依赖关系</p>\n</blockquote>\n<h2 id=\"重绘与回流\"><a href=\"#重绘与回流\" class=\"headerlink\" title=\"重绘与回流\"></a>重绘与回流</h2><blockquote>\n<p>当页面的结构发生改变，通常一些几何属性发生改变时会出发重绘, 只是展示外观的属性发生改变时会出发重绘，出发回流时必将出发重绘<br>触发重布局的属性： 盒模型属性，定位属性，文字结构属性<br>触发重绘的属性：一些颜色属性</p>\n</blockquote>\n<blockquote>\n<p>dom创建过程<br>1 获取dom后分割成多个图层<br>2 对每个图层节点计算样式结果（样式重计算）<br>3 为每个节点生成图层和位置(回流和重布局)<br>4 将每个节点绘制天成到图层位图中（重绘）<br>5 图层作为文理上传至GPU<br>6 合并图层最终生成屏幕图像（合并图层）</p>\n</blockquote>\n<blockquote>\n<p>创建图层条件(图层合并是一个比较耗时的操作，关注图层产生的条件是必要的)<br>3D或透视变换(perspective transform)CSS属性<br>使用加速视频解码的<video>节点<br>拥有3D(WebGL)上下文或加速的2D上下文的<canvas>节点<br>混合插件(如Flash)<br>对自己的opacity做CSS动画或使用一个动画webkit变换的元素<br>拥有加速CSS过滤器的元素<br>元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里）<br>元素有一个z-index较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染）</canvas></video></p>\n</blockquote>\n<blockquote>\n<p>优化点<br>对应动画新建一个图层<br>避免一条条的修改节点样式，最好写在一个class里面<br>使用opacity代替visibility<br>使用tansform替代top..<br>避免使用table布局，因为对table进行修改时可能导致整个页面重绘<br>dom离线修改，先将dom节点设置为display: none,修改完成再显示<br>使用requestanimationFrame代替定时器window.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">requestAnimationFrame</a></p>\n</blockquote>\n<blockquote>\n<p>chrome 上可以看到dom在构建期间各个阶段所消耗的时间以及更详细的解决方案。<br><a href=\"https://developers.google.cn/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">开发者工具</a><br><a href=\"https://developers.google.cn/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">性能优化</a></p>\n</blockquote>\n<h2 id=\"懒加载和预加载\"><a href=\"#懒加载和预加载\" class=\"headerlink\" title=\"懒加载和预加载\"></a>懒加载和预加载</h2><blockquote>\n<p>懒加载<br><code>懒加载</code>： 通常被应用于图片加载。很多电商网站中会加载很多图片，当图片请求较多时，导致页面加载较慢，甚至会影响一些js或者css的下载，这种情况就会使用到懒加载。<br>懒加载和滚动加载实现原理是类似的，利用滚动事件，当我们定义的某个元素出现在我们规定的位置时触发一些函数。<br><code>预加载</code>： 在一些场景下比如动画播放，要保证动画的连贯性，就需要时一些资源提前加载，或者是在资源空置时。这个时候就需要预加载，预加载通常的手段有使用img标签，使用image对象，使用xhr,缺点是不支持跨域。也有相应的库封装了preload。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 懒加载</span><br><span class=\"line\">var viewHeight = document.documentElement.clientHeight // 可视区域的高度</span><br><span class=\"line\"></span><br><span class=\"line\">function lazyload () &#123;</span><br><span class=\"line\">  var eles = document.querySelectorAll(&apos;img[data-original][lazyload]&apos;)</span><br><span class=\"line\">  Array.prototype.forEach.call(eles, function (item, index) &#123;</span><br><span class=\"line\">    var rect</span><br><span class=\"line\">    if (item.dataset.original === &apos;&apos;)</span><br><span class=\"line\">      return</span><br><span class=\"line\">    rect = item.getBoundingClientRect()</span><br><span class=\"line\"></span><br><span class=\"line\">    if (rect.bottom &gt;= 0 &amp;&amp; rect.top &lt; viewHeight) &#123;</span><br><span class=\"line\">      !function () &#123;</span><br><span class=\"line\">        var img = new Image()</span><br><span class=\"line\">        img.src = item.dataset.original</span><br><span class=\"line\">        img.onload = function () &#123;</span><br><span class=\"line\">          item.src = img.src</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        item.removeAttribute(&apos;data-original&apos;)</span><br><span class=\"line\">        item.removeAttribute(&apos;lazyload&apos;)</span><br><span class=\"line\">      &#125;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">lazyload()</span><br><span class=\"line\"></span><br><span class=\"line\">document.addEventListener(&apos;scroll&apos;, lazyload)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"浏览器存储\"><a href=\"#浏览器存储\" class=\"headerlink\" title=\"浏览器存储\"></a>浏览器存储</h2><p>cookie， localStorage， sessionStorage， indexDB</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><blockquote>\n<p>分级缓存（优先级从上到下）<br>1 浏览器缓存 根据cache control、expires来判断是否在浏览器过期，没有过期在Chrome中可以看到from memory catch 中获取。如何配置了no-cache会每次向服务器请求资源， 配置no-store 将不会读取服务端缓存，直接请求最新内容<br>2 服务端缓存 如果配置了 etag/last-modified, 请求时携带if-none-match/if-modify-since来判断是否一致，如果一致返回304<br>3 没有缓存返回200</p>\n</blockquote>\n<h2 id=\"服务端性能优化\"><a href=\"#服务端性能优化\" class=\"headerlink\" title=\"服务端性能优化\"></a>服务端性能优化</h2>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>这是一篇文字搬运，弥补不太好的记忆,期待哪天写一份有灵魂的总结。。</p>\n</blockquote>\n<h2 id=\"资源合并与压缩\"><a href=\"#资源合并与压缩\" class=\"headerlink\" title=\"资源合并与压缩\"></a>资源合并与压缩</h2><h2 id=\"图片相关优化\"><a href=\"#图片相关优化\" class=\"headerlink\" title=\"图片相关优化\"></a>图片相关优化</h2><blockquote>\n<p>jpeg: 有损压缩，对应图片质量要求不高的情况可以使用<br>png8: 支持透明<br>png24: 不支持透明<br>png32: 支持透明<br>svg,iconfont， img inline</p>\n</blockquote>\n<h2 id=\"css、js的加载和执行\"><a href=\"#css、js的加载和执行\" class=\"headerlink\" title=\"css、js的加载和执行\"></a>css、js的加载和执行</h2><blockquote>\n<p>当我们在浏览器中输入一个地址。浏览器会搜索有没有配置相应的DNS,如果配置走host中配置的地址，经过（主干网-》交换机-》路由器-》主干网）网络走到服务端，在服务的control -》 model -》 db 层进行逻辑处理，返回至前端。<br>前端首先拿到一个html字符串，浏览器解析器将其从上之下按顺序加载。遇到css和js,以及HTML会被转化成 dom cssom最终合成渲染树-》layout(combine layout) -&gt; paint<br>在这个过程中通过使用cdn请求，了解js, css阻塞情况合理使用defer，async<br>html渲染特点：<br>顺序执行，并发加载（由于浏览器是有并发度的，同时请求同一个地址达到并发度会等到资源加载完成以后再次加载）<br>引入方式<br>css阻塞: 1 css head中阻塞页面渲染 2 css阻塞js的执行 3 css不阻塞外部资源加载<br>js阻塞： 1 直接引入的js阻塞页面的渲染 2 js不阻塞资源的加载 3 js顺序执行，阻塞后续js执行逻辑<br>依赖关系<br>页面渲染依赖css的加载<br>js执行顺序的依赖关系<br>js逻辑对应dom节点的依赖关系</p>\n</blockquote>\n<h2 id=\"重绘与回流\"><a href=\"#重绘与回流\" class=\"headerlink\" title=\"重绘与回流\"></a>重绘与回流</h2><blockquote>\n<p>当页面的结构发生改变，通常一些几何属性发生改变时会出发重绘, 只是展示外观的属性发生改变时会出发重绘，出发回流时必将出发重绘<br>触发重布局的属性： 盒模型属性，定位属性，文字结构属性<br>触发重绘的属性：一些颜色属性</p>\n</blockquote>\n<blockquote>\n<p>dom创建过程<br>1 获取dom后分割成多个图层<br>2 对每个图层节点计算样式结果（样式重计算）<br>3 为每个节点生成图层和位置(回流和重布局)<br>4 将每个节点绘制天成到图层位图中（重绘）<br>5 图层作为文理上传至GPU<br>6 合并图层最终生成屏幕图像（合并图层）</p>\n</blockquote>\n<blockquote>\n<p>创建图层条件(图层合并是一个比较耗时的操作，关注图层产生的条件是必要的)<br>3D或透视变换(perspective transform)CSS属性<br>使用加速视频解码的<video>节点<br>拥有3D(WebGL)上下文或加速的2D上下文的<canvas>节点<br>混合插件(如Flash)<br>对自己的opacity做CSS动画或使用一个动画webkit变换的元素<br>拥有加速CSS过滤器的元素<br>元素有一个包含复合层的后代节点（一个元素拥有一个子元素，该子元素在自己的层里）<br>元素有一个z-index较低且包含一个复合层的兄弟元素（换句话说就是该元素在复合层上面渲染）</canvas></video></p>\n</blockquote>\n<blockquote>\n<p>优化点<br>对应动画新建一个图层<br>避免一条条的修改节点样式，最好写在一个class里面<br>使用opacity代替visibility<br>使用tansform替代top..<br>避免使用table布局，因为对table进行修改时可能导致整个页面重绘<br>dom离线修改，先将dom节点设置为display: none,修改完成再显示<br>使用requestanimationFrame代替定时器window.requestAnimationFrame() 方法告诉浏览器您希望执行动画并请求浏览器在下一次重绘之前调用指定的函数来更新动画。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame\" target=\"_blank\" rel=\"noopener\">requestAnimationFrame</a></p>\n</blockquote>\n<blockquote>\n<p>chrome 上可以看到dom在构建期间各个阶段所消耗的时间以及更详细的解决方案。<br><a href=\"https://developers.google.cn/web/tools/chrome-devtools/\" target=\"_blank\" rel=\"noopener\">开发者工具</a><br><a href=\"https://developers.google.cn/web/fundamentals/performance/rail\" target=\"_blank\" rel=\"noopener\">性能优化</a></p>\n</blockquote>\n<h2 id=\"懒加载和预加载\"><a href=\"#懒加载和预加载\" class=\"headerlink\" title=\"懒加载和预加载\"></a>懒加载和预加载</h2><blockquote>\n<p>懒加载<br><code>懒加载</code>： 通常被应用于图片加载。很多电商网站中会加载很多图片，当图片请求较多时，导致页面加载较慢，甚至会影响一些js或者css的下载，这种情况就会使用到懒加载。<br>懒加载和滚动加载实现原理是类似的，利用滚动事件，当我们定义的某个元素出现在我们规定的位置时触发一些函数。<br><code>预加载</code>： 在一些场景下比如动画播放，要保证动画的连贯性，就需要时一些资源提前加载，或者是在资源空置时。这个时候就需要预加载，预加载通常的手段有使用img标签，使用image对象，使用xhr,缺点是不支持跨域。也有相应的库封装了preload。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 懒加载</span><br><span class=\"line\">var viewHeight = document.documentElement.clientHeight // 可视区域的高度</span><br><span class=\"line\"></span><br><span class=\"line\">function lazyload () &#123;</span><br><span class=\"line\">  var eles = document.querySelectorAll(&apos;img[data-original][lazyload]&apos;)</span><br><span class=\"line\">  Array.prototype.forEach.call(eles, function (item, index) &#123;</span><br><span class=\"line\">    var rect</span><br><span class=\"line\">    if (item.dataset.original === &apos;&apos;)</span><br><span class=\"line\">      return</span><br><span class=\"line\">    rect = item.getBoundingClientRect()</span><br><span class=\"line\"></span><br><span class=\"line\">    if (rect.bottom &gt;= 0 &amp;&amp; rect.top &lt; viewHeight) &#123;</span><br><span class=\"line\">      !function () &#123;</span><br><span class=\"line\">        var img = new Image()</span><br><span class=\"line\">        img.src = item.dataset.original</span><br><span class=\"line\">        img.onload = function () &#123;</span><br><span class=\"line\">          item.src = img.src</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        item.removeAttribute(&apos;data-original&apos;)</span><br><span class=\"line\">        item.removeAttribute(&apos;lazyload&apos;)</span><br><span class=\"line\">      &#125;()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">lazyload()</span><br><span class=\"line\"></span><br><span class=\"line\">document.addEventListener(&apos;scroll&apos;, lazyload)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"浏览器存储\"><a href=\"#浏览器存储\" class=\"headerlink\" title=\"浏览器存储\"></a>浏览器存储</h2><p>cookie， localStorage， sessionStorage， indexDB</p>\n<h2 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h2><blockquote>\n<p>分级缓存（优先级从上到下）<br>1 浏览器缓存 根据cache control、expires来判断是否在浏览器过期，没有过期在Chrome中可以看到from memory catch 中获取。如何配置了no-cache会每次向服务器请求资源， 配置no-store 将不会读取服务端缓存，直接请求最新内容<br>2 服务端缓存 如果配置了 etag/last-modified, 请求时携带if-none-match/if-modify-since来判断是否一致，如果一致返回304<br>3 没有缓存返回200</p>\n</blockquote>\n<h2 id=\"服务端性能优化\"><a href=\"#服务端性能优化\" class=\"headerlink\" title=\"服务端性能优化\"></a>服务端性能优化</h2>"},{"title":"用模块封装代码","date":"2017-12-07T14:13:17.000Z","_content":"\n>javascript用`共享一切`的方法加载代码，这样会造成一些命名冲突和安全问题。es6的一个目标就是解决作用域问题，为了javascript程序显得有序，引入了模块。\n- `模块`是自动运行在严格模式下并且没有办法退出运行的javascript代码。\n- 模块的顶部，this的值是`undefined`\n- 模块`不支持`html注释\n- 模块的真正魔力在于`导入与导出`而不是将所有的东西放到一个文件中处理\n\n## 导出\n[文档说明](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export)\n```\n  // 语法：\n  export { name1, name2, …, nameN };\n  export { variable1 as name1, variable2 as name2, …, nameN };\n  export let name1, name2, …, nameN; // also var\n  export let name1 = …, name2 = …, …, nameN; // also var, const\n\n  export default expression;\n  export default function (…) { … } // also class, function*\n  export default function name1(…) { … } // also class, function*\n  export { name1 as default, … };\n\n  export * from …;\n  export { name1, name2, …, nameN } from …;\n  export { import1 as name1, import2 as name2, …, nameN } from …;\n\n```\n\n## 导入\n[文档说明](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export)\n```\n  // 语法：\n  import defaultExport from \"module-name\";\n  import * as name from \"module-name\";\n  import { export } from \"module-name\";\n  import { export as alias } from \"module-name\";\n  import { export1 , export2 } from \"module-name\";\n  import { export1 , export2 as alias2 , [...] } from \"module-name\";\n  import defaultExport, { export [ , [...] ] } from \"module-name\";\n  import defaultExport, * as name from \"module-name\";\n  import \"module-name\";\n\n  // es6的import语句为变量、函数、和类创建的是只读绑定，因此引入一个变量时试图在这个模块中修改这个变量会报错。\n```\n\n## 无绑定导入\n>内建对象（如Array,Object）的共享定义可以在其它模块中访问，对这些对象所做的更改也将反应在其它模块中。无绑定导入通常被用在[Polyfill和Shim](https://www.zhihu.com/question/22129715).\n\n```\n// 向数组添加pushAll方法，放入example.js\n  Array.prototype.pushAll = function(items) {\n    if(!Array.isArray(items)) {\n      throw new TypeError('参数必须是一个数组！');\n    }\n    return this.push(...items);\n  }\n\n  // 使用\n  import \"./example.js\";\n  let color = ['red', 'blue', 'green'];\n  items = [];\n  items.pushAll(color);\n```\n\n## 加载模块\n### 在web浏览器中使用模块\n```\n  <!--加载一个javascript模块文件-->\n  <script type=\"module\" src=\"module1.js\"></script>\n  <!--内联引入一个模块-->\n\n  <script type=\"module\">\n    import { export } from \"module-name\";\n    export();\n  </script>\n  <script type=\"module\" src=\"module2.js\"></script>\n```\n\n### 在web浏览器模块的加载顺序\n使用模块化加载资源都是按需加载并执行的。\n#### 同步执行\n按照在文档中出现的顺序顺序执行。\n上面的案例代码执行顺序为\n>1 下载module1.js并解析\n2 递归下载并解析module1.js引入的资源\n3 解析内联模块\n4 递归下载并解析内联模块中引入的资源\n5 下载module2.js并解析\n6 递归下载并解析module2.js引入的资源\n\n只有加载完成后才会执行其他操作，加载完成后\n>1 执行module1.js并解析\n2 递归执行module1.js引入的资源\n3 解析内联模块\n4 递归执行内联模块中引入的资源\n5 执行module2.js并解析\n6 递归执行module2.js引入的资源\n\n#### 异步执行\n```\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n// 上面的代码如果module1.js先下载完成（包括所有导入的资源），module1.js先执行。同样的module2.js也一样\n```\n\n### 浏览器模块说明解析符\n- 以`/`开头的解析为从`根`目录开始。\n- 以`./`开头的解析为从`当前`目录开始。\n- 以`../`开头的解析为从`父`目录开始。\n- `URL`格式。\n\n## 对es6模块化的理解\ncopy react项目总结\n\n理解初始于，这样的一段代码\n```\nimport React, { Component } from 'react';\nlet moduleList = [];\nclass Message extends Component {\n  componentDidMount() {\n    ...\n  }\n\n  componentWillUnmount() {\n    ...\n  }\n\n  render() {\n    return (\n      <div className=\"page page-msg\">\n        ...\n      </div>\n    );\n  }\n}\nexport default Message;\n```\n在class外部定义的变量`moduleList`并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。\n同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能\n\n```\n// 测试\n(function() {\n    var _userId = 1;\n    var exportTest = {};\n    function converter(userId) {\n        _userId = ++userId;\n        return _userId;\n    }\n    exportTest.getUserId = function() {\n        return converter(_userId);\n    }\n    window.exportTest = exportTest;\n} ());\nexportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用\n```\n>总结\n1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用\n2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）\n3 exportTest = null，闭包中的变量引用，以及闭包函数被释放\n\n## 其它\n感慨一下模块化的知识树\n1 了解用法\n2 了解在一些执行环境的中的执行顺序\n3 了解模块化实现的原理，从而就可以在一些方面中利用闭包的一些特性，相当有用\n4 和其他知识像结合，模块化中给一些基本的对象增加原型方法，实现方法共享\n5 了解不同的模块化库，以及一些模块化规范，还有实现方法\n哈哈，这样看来我还是个渣渣，:-D\n","source":"_posts/用模块封装代码.md","raw":"---\ntitle: 用模块封装代码\ndate: 2017-12-07 09:13:17\ncategories: js\ntags: es6\n---\n\n>javascript用`共享一切`的方法加载代码，这样会造成一些命名冲突和安全问题。es6的一个目标就是解决作用域问题，为了javascript程序显得有序，引入了模块。\n- `模块`是自动运行在严格模式下并且没有办法退出运行的javascript代码。\n- 模块的顶部，this的值是`undefined`\n- 模块`不支持`html注释\n- 模块的真正魔力在于`导入与导出`而不是将所有的东西放到一个文件中处理\n\n## 导出\n[文档说明](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export)\n```\n  // 语法：\n  export { name1, name2, …, nameN };\n  export { variable1 as name1, variable2 as name2, …, nameN };\n  export let name1, name2, …, nameN; // also var\n  export let name1 = …, name2 = …, …, nameN; // also var, const\n\n  export default expression;\n  export default function (…) { … } // also class, function*\n  export default function name1(…) { … } // also class, function*\n  export { name1 as default, … };\n\n  export * from …;\n  export { name1, name2, …, nameN } from …;\n  export { import1 as name1, import2 as name2, …, nameN } from …;\n\n```\n\n## 导入\n[文档说明](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export)\n```\n  // 语法：\n  import defaultExport from \"module-name\";\n  import * as name from \"module-name\";\n  import { export } from \"module-name\";\n  import { export as alias } from \"module-name\";\n  import { export1 , export2 } from \"module-name\";\n  import { export1 , export2 as alias2 , [...] } from \"module-name\";\n  import defaultExport, { export [ , [...] ] } from \"module-name\";\n  import defaultExport, * as name from \"module-name\";\n  import \"module-name\";\n\n  // es6的import语句为变量、函数、和类创建的是只读绑定，因此引入一个变量时试图在这个模块中修改这个变量会报错。\n```\n\n## 无绑定导入\n>内建对象（如Array,Object）的共享定义可以在其它模块中访问，对这些对象所做的更改也将反应在其它模块中。无绑定导入通常被用在[Polyfill和Shim](https://www.zhihu.com/question/22129715).\n\n```\n// 向数组添加pushAll方法，放入example.js\n  Array.prototype.pushAll = function(items) {\n    if(!Array.isArray(items)) {\n      throw new TypeError('参数必须是一个数组！');\n    }\n    return this.push(...items);\n  }\n\n  // 使用\n  import \"./example.js\";\n  let color = ['red', 'blue', 'green'];\n  items = [];\n  items.pushAll(color);\n```\n\n## 加载模块\n### 在web浏览器中使用模块\n```\n  <!--加载一个javascript模块文件-->\n  <script type=\"module\" src=\"module1.js\"></script>\n  <!--内联引入一个模块-->\n\n  <script type=\"module\">\n    import { export } from \"module-name\";\n    export();\n  </script>\n  <script type=\"module\" src=\"module2.js\"></script>\n```\n\n### 在web浏览器模块的加载顺序\n使用模块化加载资源都是按需加载并执行的。\n#### 同步执行\n按照在文档中出现的顺序顺序执行。\n上面的案例代码执行顺序为\n>1 下载module1.js并解析\n2 递归下载并解析module1.js引入的资源\n3 解析内联模块\n4 递归下载并解析内联模块中引入的资源\n5 下载module2.js并解析\n6 递归下载并解析module2.js引入的资源\n\n只有加载完成后才会执行其他操作，加载完成后\n>1 执行module1.js并解析\n2 递归执行module1.js引入的资源\n3 解析内联模块\n4 递归执行内联模块中引入的资源\n5 执行module2.js并解析\n6 递归执行module2.js引入的资源\n\n#### 异步执行\n```\n<script type=\"module\" async src=\"module1.js\"></script>\n<script type=\"module\" async src=\"module2.js\"></script>\n// 上面的代码如果module1.js先下载完成（包括所有导入的资源），module1.js先执行。同样的module2.js也一样\n```\n\n### 浏览器模块说明解析符\n- 以`/`开头的解析为从`根`目录开始。\n- 以`./`开头的解析为从`当前`目录开始。\n- 以`../`开头的解析为从`父`目录开始。\n- `URL`格式。\n\n## 对es6模块化的理解\ncopy react项目总结\n\n理解初始于，这样的一段代码\n```\nimport React, { Component } from 'react';\nlet moduleList = [];\nclass Message extends Component {\n  componentDidMount() {\n    ...\n  }\n\n  componentWillUnmount() {\n    ...\n  }\n\n  render() {\n    return (\n      <div className=\"page page-msg\">\n        ...\n      </div>\n    );\n  }\n}\nexport default Message;\n```\n在class外部定义的变量`moduleList`并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。\n同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能\n\n```\n// 测试\n(function() {\n    var _userId = 1;\n    var exportTest = {};\n    function converter(userId) {\n        _userId = ++userId;\n        return _userId;\n    }\n    exportTest.getUserId = function() {\n        return converter(_userId);\n    }\n    window.exportTest = exportTest;\n} ());\nexportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用\n```\n>总结\n1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用\n2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）\n3 exportTest = null，闭包中的变量引用，以及闭包函数被释放\n\n## 其它\n感慨一下模块化的知识树\n1 了解用法\n2 了解在一些执行环境的中的执行顺序\n3 了解模块化实现的原理，从而就可以在一些方面中利用闭包的一些特性，相当有用\n4 和其他知识像结合，模块化中给一些基本的对象增加原型方法，实现方法共享\n5 了解不同的模块化库，以及一些模块化规范，还有实现方法\n哈哈，这样看来我还是个渣渣，:-D\n","slug":"用模块封装代码","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk40001xzs8qmephceks","content":"<blockquote>\n<p>javascript用<code>共享一切</code>的方法加载代码，这样会造成一些命名冲突和安全问题。es6的一个目标就是解决作用域问题，为了javascript程序显得有序，引入了模块。</p>\n<ul>\n<li><code>模块</code>是自动运行在严格模式下并且没有办法退出运行的javascript代码。</li>\n<li>模块的顶部，this的值是<code>undefined</code></li>\n<li>模块<code>不支持</code>html注释</li>\n<li>模块的真正魔力在于<code>导入与导出</code>而不是将所有的东西放到一个文件中处理</li>\n</ul>\n</blockquote>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export\" target=\"_blank\" rel=\"noopener\">文档说明</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 语法：</span><br><span class=\"line\">export &#123; name1, name2, …, nameN &#125;;</span><br><span class=\"line\">export &#123; variable1 as name1, variable2 as name2, …, nameN &#125;;</span><br><span class=\"line\">export let name1, name2, …, nameN; // also var</span><br><span class=\"line\">export let name1 = …, name2 = …, …, nameN; // also var, const</span><br><span class=\"line\"></span><br><span class=\"line\">export default expression;</span><br><span class=\"line\">export default function (…) &#123; … &#125; // also class, function*</span><br><span class=\"line\">export default function name1(…) &#123; … &#125; // also class, function*</span><br><span class=\"line\">export &#123; name1 as default, … &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export * from …;</span><br><span class=\"line\">export &#123; name1, name2, …, nameN &#125; from …;</span><br><span class=\"line\">export &#123; import1 as name1, import2 as name2, …, nameN &#125; from …;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export\" target=\"_blank\" rel=\"noopener\">文档说明</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 语法：</span><br><span class=\"line\">import defaultExport from &quot;module-name&quot;;</span><br><span class=\"line\">import * as name from &quot;module-name&quot;;</span><br><span class=\"line\">import &#123; export &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">import &#123; export as alias &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">import &#123; export1 , export2 &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">import &#123; export1 , export2 as alias2 , [...] &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">import defaultExport, &#123; export [ , [...] ] &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">import defaultExport, * as name from &quot;module-name&quot;;</span><br><span class=\"line\">import &quot;module-name&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// es6的import语句为变量、函数、和类创建的是只读绑定，因此引入一个变量时试图在这个模块中修改这个变量会报错。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"无绑定导入\"><a href=\"#无绑定导入\" class=\"headerlink\" title=\"无绑定导入\"></a>无绑定导入</h2><blockquote>\n<p>内建对象（如Array,Object）的共享定义可以在其它模块中访问，对这些对象所做的更改也将反应在其它模块中。无绑定导入通常被用在<a href=\"https://www.zhihu.com/question/22129715\" target=\"_blank\" rel=\"noopener\">Polyfill和Shim</a>.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 向数组添加pushAll方法，放入example.js</span><br><span class=\"line\">  Array.prototype.pushAll = function(items) &#123;</span><br><span class=\"line\">    if(!Array.isArray(items)) &#123;</span><br><span class=\"line\">      throw new TypeError(&apos;参数必须是一个数组！&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return this.push(...items);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 使用</span><br><span class=\"line\">  import &quot;./example.js&quot;;</span><br><span class=\"line\">  let color = [&apos;red&apos;, &apos;blue&apos;, &apos;green&apos;];</span><br><span class=\"line\">  items = [];</span><br><span class=\"line\">  items.pushAll(color);</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载模块\"><a href=\"#加载模块\" class=\"headerlink\" title=\"加载模块\"></a>加载模块</h2><h3 id=\"在web浏览器中使用模块\"><a href=\"#在web浏览器中使用模块\" class=\"headerlink\" title=\"在web浏览器中使用模块\"></a>在web浏览器中使用模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--加载一个javascript模块文件--&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot; src=&quot;module1.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!--内联引入一个模块--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;module&quot;&gt;</span><br><span class=\"line\">  import &#123; export &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">  export();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在web浏览器模块的加载顺序\"><a href=\"#在web浏览器模块的加载顺序\" class=\"headerlink\" title=\"在web浏览器模块的加载顺序\"></a>在web浏览器模块的加载顺序</h3><p>使用模块化加载资源都是按需加载并执行的。</p>\n<h4 id=\"同步执行\"><a href=\"#同步执行\" class=\"headerlink\" title=\"同步执行\"></a>同步执行</h4><p>按照在文档中出现的顺序顺序执行。<br>上面的案例代码执行顺序为</p>\n<blockquote>\n<p>1 下载module1.js并解析<br>2 递归下载并解析module1.js引入的资源<br>3 解析内联模块<br>4 递归下载并解析内联模块中引入的资源<br>5 下载module2.js并解析<br>6 递归下载并解析module2.js引入的资源</p>\n</blockquote>\n<p>只有加载完成后才会执行其他操作，加载完成后</p>\n<blockquote>\n<p>1 执行module1.js并解析<br>2 递归执行module1.js引入的资源<br>3 解析内联模块<br>4 递归执行内联模块中引入的资源<br>5 执行module2.js并解析<br>6 递归执行module2.js引入的资源</p>\n</blockquote>\n<h4 id=\"异步执行\"><a href=\"#异步执行\" class=\"headerlink\" title=\"异步执行\"></a>异步执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;module&quot; async src=&quot;module1.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot; async src=&quot;module2.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">// 上面的代码如果module1.js先下载完成（包括所有导入的资源），module1.js先执行。同样的module2.js也一样</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器模块说明解析符\"><a href=\"#浏览器模块说明解析符\" class=\"headerlink\" title=\"浏览器模块说明解析符\"></a>浏览器模块说明解析符</h3><ul>\n<li>以<code>/</code>开头的解析为从<code>根</code>目录开始。</li>\n<li>以<code>./</code>开头的解析为从<code>当前</code>目录开始。</li>\n<li>以<code>../</code>开头的解析为从<code>父</code>目录开始。</li>\n<li><code>URL</code>格式。</li>\n</ul>\n<h2 id=\"对es6模块化的理解\"><a href=\"#对es6模块化的理解\" class=\"headerlink\" title=\"对es6模块化的理解\"></a>对es6模块化的理解</h2><p>copy react项目总结</p>\n<p>理解初始于，这样的一段代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">let moduleList = [];</span><br><span class=\"line\">class Message extends Component &#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;page page-msg&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Message;</span><br></pre></td></tr></table></figure></p>\n<p>在class外部定义的变量<code>moduleList</code>并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。<br>同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 测试</span><br><span class=\"line\">(function() &#123;</span><br><span class=\"line\">    var _userId = 1;</span><br><span class=\"line\">    var exportTest = &#123;&#125;;</span><br><span class=\"line\">    function converter(userId) &#123;</span><br><span class=\"line\">        _userId = ++userId;</span><br><span class=\"line\">        return _userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exportTest.getUserId = function() &#123;</span><br><span class=\"line\">        return converter(_userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    window.exportTest = exportTest;</span><br><span class=\"line\">&#125; ());</span><br><span class=\"line\">exportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总结<br>1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用<br>2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）<br>3 exportTest = null，闭包中的变量引用，以及闭包函数被释放</p>\n</blockquote>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>感慨一下模块化的知识树<br>1 了解用法<br>2 了解在一些执行环境的中的执行顺序<br>3 了解模块化实现的原理，从而就可以在一些方面中利用闭包的一些特性，相当有用<br>4 和其他知识像结合，模块化中给一些基本的对象增加原型方法，实现方法共享<br>5 了解不同的模块化库，以及一些模块化规范，还有实现方法<br>哈哈，这样看来我还是个渣渣，:-D</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>javascript用<code>共享一切</code>的方法加载代码，这样会造成一些命名冲突和安全问题。es6的一个目标就是解决作用域问题，为了javascript程序显得有序，引入了模块。</p>\n<ul>\n<li><code>模块</code>是自动运行在严格模式下并且没有办法退出运行的javascript代码。</li>\n<li>模块的顶部，this的值是<code>undefined</code></li>\n<li>模块<code>不支持</code>html注释</li>\n<li>模块的真正魔力在于<code>导入与导出</code>而不是将所有的东西放到一个文件中处理</li>\n</ul>\n</blockquote>\n<h2 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export\" target=\"_blank\" rel=\"noopener\">文档说明</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 语法：</span><br><span class=\"line\">export &#123; name1, name2, …, nameN &#125;;</span><br><span class=\"line\">export &#123; variable1 as name1, variable2 as name2, …, nameN &#125;;</span><br><span class=\"line\">export let name1, name2, …, nameN; // also var</span><br><span class=\"line\">export let name1 = …, name2 = …, …, nameN; // also var, const</span><br><span class=\"line\"></span><br><span class=\"line\">export default expression;</span><br><span class=\"line\">export default function (…) &#123; … &#125; // also class, function*</span><br><span class=\"line\">export default function name1(…) &#123; … &#125; // also class, function*</span><br><span class=\"line\">export &#123; name1 as default, … &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">export * from …;</span><br><span class=\"line\">export &#123; name1, name2, …, nameN &#125; from …;</span><br><span class=\"line\">export &#123; import1 as name1, import2 as name2, …, nameN &#125; from …;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export\" target=\"_blank\" rel=\"noopener\">文档说明</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 语法：</span><br><span class=\"line\">import defaultExport from &quot;module-name&quot;;</span><br><span class=\"line\">import * as name from &quot;module-name&quot;;</span><br><span class=\"line\">import &#123; export &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">import &#123; export as alias &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">import &#123; export1 , export2 &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">import &#123; export1 , export2 as alias2 , [...] &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">import defaultExport, &#123; export [ , [...] ] &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">import defaultExport, * as name from &quot;module-name&quot;;</span><br><span class=\"line\">import &quot;module-name&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// es6的import语句为变量、函数、和类创建的是只读绑定，因此引入一个变量时试图在这个模块中修改这个变量会报错。</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"无绑定导入\"><a href=\"#无绑定导入\" class=\"headerlink\" title=\"无绑定导入\"></a>无绑定导入</h2><blockquote>\n<p>内建对象（如Array,Object）的共享定义可以在其它模块中访问，对这些对象所做的更改也将反应在其它模块中。无绑定导入通常被用在<a href=\"https://www.zhihu.com/question/22129715\" target=\"_blank\" rel=\"noopener\">Polyfill和Shim</a>.</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 向数组添加pushAll方法，放入example.js</span><br><span class=\"line\">  Array.prototype.pushAll = function(items) &#123;</span><br><span class=\"line\">    if(!Array.isArray(items)) &#123;</span><br><span class=\"line\">      throw new TypeError(&apos;参数必须是一个数组！&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return this.push(...items);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 使用</span><br><span class=\"line\">  import &quot;./example.js&quot;;</span><br><span class=\"line\">  let color = [&apos;red&apos;, &apos;blue&apos;, &apos;green&apos;];</span><br><span class=\"line\">  items = [];</span><br><span class=\"line\">  items.pushAll(color);</span><br></pre></td></tr></table></figure>\n<h2 id=\"加载模块\"><a href=\"#加载模块\" class=\"headerlink\" title=\"加载模块\"></a>加载模块</h2><h3 id=\"在web浏览器中使用模块\"><a href=\"#在web浏览器中使用模块\" class=\"headerlink\" title=\"在web浏览器中使用模块\"></a>在web浏览器中使用模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--加载一个javascript模块文件--&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot; src=&quot;module1.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;!--内联引入一个模块--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;module&quot;&gt;</span><br><span class=\"line\">  import &#123; export &#125; from &quot;module-name&quot;;</span><br><span class=\"line\">  export();</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot; src=&quot;module2.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"在web浏览器模块的加载顺序\"><a href=\"#在web浏览器模块的加载顺序\" class=\"headerlink\" title=\"在web浏览器模块的加载顺序\"></a>在web浏览器模块的加载顺序</h3><p>使用模块化加载资源都是按需加载并执行的。</p>\n<h4 id=\"同步执行\"><a href=\"#同步执行\" class=\"headerlink\" title=\"同步执行\"></a>同步执行</h4><p>按照在文档中出现的顺序顺序执行。<br>上面的案例代码执行顺序为</p>\n<blockquote>\n<p>1 下载module1.js并解析<br>2 递归下载并解析module1.js引入的资源<br>3 解析内联模块<br>4 递归下载并解析内联模块中引入的资源<br>5 下载module2.js并解析<br>6 递归下载并解析module2.js引入的资源</p>\n</blockquote>\n<p>只有加载完成后才会执行其他操作，加载完成后</p>\n<blockquote>\n<p>1 执行module1.js并解析<br>2 递归执行module1.js引入的资源<br>3 解析内联模块<br>4 递归执行内联模块中引入的资源<br>5 执行module2.js并解析<br>6 递归执行module2.js引入的资源</p>\n</blockquote>\n<h4 id=\"异步执行\"><a href=\"#异步执行\" class=\"headerlink\" title=\"异步执行\"></a>异步执行</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;module&quot; async src=&quot;module1.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;module&quot; async src=&quot;module2.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">// 上面的代码如果module1.js先下载完成（包括所有导入的资源），module1.js先执行。同样的module2.js也一样</span><br></pre></td></tr></table></figure>\n<h3 id=\"浏览器模块说明解析符\"><a href=\"#浏览器模块说明解析符\" class=\"headerlink\" title=\"浏览器模块说明解析符\"></a>浏览器模块说明解析符</h3><ul>\n<li>以<code>/</code>开头的解析为从<code>根</code>目录开始。</li>\n<li>以<code>./</code>开头的解析为从<code>当前</code>目录开始。</li>\n<li>以<code>../</code>开头的解析为从<code>父</code>目录开始。</li>\n<li><code>URL</code>格式。</li>\n</ul>\n<h2 id=\"对es6模块化的理解\"><a href=\"#对es6模块化的理解\" class=\"headerlink\" title=\"对es6模块化的理解\"></a>对es6模块化的理解</h2><p>copy react项目总结</p>\n<p>理解初始于，这样的一段代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class=\"line\">let moduleList = [];</span><br><span class=\"line\">class Message extends Component &#123;</span><br><span class=\"line\">  componentDidMount() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  componentWillUnmount() &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;div className=&quot;page page-msg&quot;&gt;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Message;</span><br></pre></td></tr></table></figure></p>\n<p>在class外部定义的变量<code>moduleList</code>并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。<br>同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 测试</span><br><span class=\"line\">(function() &#123;</span><br><span class=\"line\">    var _userId = 1;</span><br><span class=\"line\">    var exportTest = &#123;&#125;;</span><br><span class=\"line\">    function converter(userId) &#123;</span><br><span class=\"line\">        _userId = ++userId;</span><br><span class=\"line\">        return _userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    exportTest.getUserId = function() &#123;</span><br><span class=\"line\">        return converter(_userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    window.exportTest = exportTest;</span><br><span class=\"line\">&#125; ());</span><br><span class=\"line\">exportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>总结<br>1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用<br>2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）<br>3 exportTest = null，闭包中的变量引用，以及闭包函数被释放</p>\n</blockquote>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>感慨一下模块化的知识树<br>1 了解用法<br>2 了解在一些执行环境的中的执行顺序<br>3 了解模块化实现的原理，从而就可以在一些方面中利用闭包的一些特性，相当有用<br>4 和其他知识像结合，模块化中给一些基本的对象增加原型方法，实现方法共享<br>5 了解不同的模块化库，以及一些模块化规范，还有实现方法<br>哈哈，这样看来我还是个渣渣，:-D</p>\n"},{"title":"继承","date":"2017-10-08T12:42:04.000Z","_content":"\n## 原型链\n构造函数，原型对象，实例关系：每个构造函数都有一个原型对象，原型对象对象包含指向构造函数的指针，每个实例都包含指向原型对象的内部指针。当把一个实例赋值给一个原型对象的时候，`原型对象-》实例-》该实例的原型对象`（从而获取该实例的属性方法），原型的查找顺序也是(原型对象-》实例-》该实例的原型对象)从左向右查找的。\n```\nSub.prototype = new sup();\n```\n>1 默认的原型为Object，因此每个对象都会有hasOwnProperty, isPropertyOf, toString等方法\n2 确定原型与实例的关系可以根据 `instanceof` `Person.prototype.isPropertyOf(p1)` 判断\n3 注意定义方法的顺序，给原型添加的方法一定要放在替换原型的语句之后\n4 原型链的问题：和原型一样，引用类型的数据会被所有实例共享。\n\n## 借用构造函数（constructor stealing）\n借用构造函数就是通过call,apply的方式将另一个的构造函数当做自己的函数体\n```\nfunction sup() {}\nfunction sub() {\n  sup.call(this);\n}\n```\n这种方式很少单独使用，无法避免构造函数模式存在的问题\n\n>特点\n可以在子类的`构造函数中`给超类的构造函数传递参数\n\n## 组合继承\n组合继承 = 原型链 + 借用构造函数模式\n```\nfunction sup() {}\nfunction sub() {\n  sup.call(this);\n}\nsub.prototype = new sup();\nsub.prototype.constructor = sub;\n...\n```\n融合了两种模式的优点，是最常用的继承模式\n## 原型式继承\n```\nfunction object(o) { // o必须为一个对象\n  function F() {};\n  F.prototype = o;\n  return new F();\n}\n// es5规范了原型式继承\nObject.create(o);\n```\n## 寄生式继承\n在原型式继承的基础上继续加工的结果\n```\nfunction Test(o) {\n  var clone = object(o);\n  clone.sayHi = function() {}\n  return clone;\n}\n```\n## 寄生组合继承\n在`原型，原型链笔记`文章中有案例\n通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。\n将`sub.prototype = new sup()`替换为了`object(sup.prototype)`,省去了一次构造函数的调用（可是增加了`new F()` ..）\n## 备注\n理解这些概念的时候本身就比较生硬，考虑问题的时候需要过滤掉一些干扰性的元素，考虑要考虑的问题本身。\n","source":"_posts/继承.md","raw":"---\ntitle: 继承\ndate: 2017-10-08 08:42:04\ncategories: js\ntags: js基础\n---\n\n## 原型链\n构造函数，原型对象，实例关系：每个构造函数都有一个原型对象，原型对象对象包含指向构造函数的指针，每个实例都包含指向原型对象的内部指针。当把一个实例赋值给一个原型对象的时候，`原型对象-》实例-》该实例的原型对象`（从而获取该实例的属性方法），原型的查找顺序也是(原型对象-》实例-》该实例的原型对象)从左向右查找的。\n```\nSub.prototype = new sup();\n```\n>1 默认的原型为Object，因此每个对象都会有hasOwnProperty, isPropertyOf, toString等方法\n2 确定原型与实例的关系可以根据 `instanceof` `Person.prototype.isPropertyOf(p1)` 判断\n3 注意定义方法的顺序，给原型添加的方法一定要放在替换原型的语句之后\n4 原型链的问题：和原型一样，引用类型的数据会被所有实例共享。\n\n## 借用构造函数（constructor stealing）\n借用构造函数就是通过call,apply的方式将另一个的构造函数当做自己的函数体\n```\nfunction sup() {}\nfunction sub() {\n  sup.call(this);\n}\n```\n这种方式很少单独使用，无法避免构造函数模式存在的问题\n\n>特点\n可以在子类的`构造函数中`给超类的构造函数传递参数\n\n## 组合继承\n组合继承 = 原型链 + 借用构造函数模式\n```\nfunction sup() {}\nfunction sub() {\n  sup.call(this);\n}\nsub.prototype = new sup();\nsub.prototype.constructor = sub;\n...\n```\n融合了两种模式的优点，是最常用的继承模式\n## 原型式继承\n```\nfunction object(o) { // o必须为一个对象\n  function F() {};\n  F.prototype = o;\n  return new F();\n}\n// es5规范了原型式继承\nObject.create(o);\n```\n## 寄生式继承\n在原型式继承的基础上继续加工的结果\n```\nfunction Test(o) {\n  var clone = object(o);\n  clone.sayHi = function() {}\n  return clone;\n}\n```\n## 寄生组合继承\n在`原型，原型链笔记`文章中有案例\n通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。\n将`sub.prototype = new sup()`替换为了`object(sup.prototype)`,省去了一次构造函数的调用（可是增加了`new F()` ..）\n## 备注\n理解这些概念的时候本身就比较生硬，考虑问题的时候需要过滤掉一些干扰性的元素，考虑要考虑的问题本身。\n","slug":"继承","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk410020zs8q5h329jus","content":"<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>构造函数，原型对象，实例关系：每个构造函数都有一个原型对象，原型对象对象包含指向构造函数的指针，每个实例都包含指向原型对象的内部指针。当把一个实例赋值给一个原型对象的时候，<code>原型对象-》实例-》该实例的原型对象</code>（从而获取该实例的属性方法），原型的查找顺序也是(原型对象-》实例-》该实例的原型对象)从左向右查找的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub.prototype = new sup();</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>1 默认的原型为Object，因此每个对象都会有hasOwnProperty, isPropertyOf, toString等方法<br>2 确定原型与实例的关系可以根据 <code>instanceof</code> <code>Person.prototype.isPropertyOf(p1)</code> 判断<br>3 注意定义方法的顺序，给原型添加的方法一定要放在替换原型的语句之后<br>4 原型链的问题：和原型一样，引用类型的数据会被所有实例共享。</p>\n</blockquote>\n<h2 id=\"借用构造函数（constructor-stealing）\"><a href=\"#借用构造函数（constructor-stealing）\" class=\"headerlink\" title=\"借用构造函数（constructor stealing）\"></a>借用构造函数（constructor stealing）</h2><p>借用构造函数就是通过call,apply的方式将另一个的构造函数当做自己的函数体<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sup() &#123;&#125;</span><br><span class=\"line\">function sub() &#123;</span><br><span class=\"line\">  sup.call(this);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式很少单独使用，无法避免构造函数模式存在的问题</p>\n<blockquote>\n<p>特点<br>可以在子类的<code>构造函数中</code>给超类的构造函数传递参数</p>\n</blockquote>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><p>组合继承 = 原型链 + 借用构造函数模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sup() &#123;&#125;</span><br><span class=\"line\">function sub() &#123;</span><br><span class=\"line\">  sup.call(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sub.prototype = new sup();</span><br><span class=\"line\">sub.prototype.constructor = sub;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>融合了两种模式的优点，是最常用的继承模式</p>\n<h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function object(o) &#123; // o必须为一个对象</span><br><span class=\"line\">  function F() &#123;&#125;;</span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  return new F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// es5规范了原型式继承</span><br><span class=\"line\">Object.create(o);</span><br></pre></td></tr></table></figure>\n<h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><p>在原型式继承的基础上继续加工的结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Test(o) &#123;</span><br><span class=\"line\">  var clone = object(o);</span><br><span class=\"line\">  clone.sayHi = function() &#123;&#125;</span><br><span class=\"line\">  return clone;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h2><p>在<code>原型，原型链笔记</code>文章中有案例<br>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。<br>将<code>sub.prototype = new sup()</code>替换为了<code>object(sup.prototype)</code>,省去了一次构造函数的调用（可是增加了<code>new F()</code> ..）</p>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>理解这些概念的时候本身就比较生硬，考虑问题的时候需要过滤掉一些干扰性的元素，考虑要考虑的问题本身。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>构造函数，原型对象，实例关系：每个构造函数都有一个原型对象，原型对象对象包含指向构造函数的指针，每个实例都包含指向原型对象的内部指针。当把一个实例赋值给一个原型对象的时候，<code>原型对象-》实例-》该实例的原型对象</code>（从而获取该实例的属性方法），原型的查找顺序也是(原型对象-》实例-》该实例的原型对象)从左向右查找的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sub.prototype = new sup();</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>1 默认的原型为Object，因此每个对象都会有hasOwnProperty, isPropertyOf, toString等方法<br>2 确定原型与实例的关系可以根据 <code>instanceof</code> <code>Person.prototype.isPropertyOf(p1)</code> 判断<br>3 注意定义方法的顺序，给原型添加的方法一定要放在替换原型的语句之后<br>4 原型链的问题：和原型一样，引用类型的数据会被所有实例共享。</p>\n</blockquote>\n<h2 id=\"借用构造函数（constructor-stealing）\"><a href=\"#借用构造函数（constructor-stealing）\" class=\"headerlink\" title=\"借用构造函数（constructor stealing）\"></a>借用构造函数（constructor stealing）</h2><p>借用构造函数就是通过call,apply的方式将另一个的构造函数当做自己的函数体<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sup() &#123;&#125;</span><br><span class=\"line\">function sub() &#123;</span><br><span class=\"line\">  sup.call(this);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这种方式很少单独使用，无法避免构造函数模式存在的问题</p>\n<blockquote>\n<p>特点<br>可以在子类的<code>构造函数中</code>给超类的构造函数传递参数</p>\n</blockquote>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><p>组合继承 = 原型链 + 借用构造函数模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function sup() &#123;&#125;</span><br><span class=\"line\">function sub() &#123;</span><br><span class=\"line\">  sup.call(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sub.prototype = new sup();</span><br><span class=\"line\">sub.prototype.constructor = sub;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure></p>\n<p>融合了两种模式的优点，是最常用的继承模式</p>\n<h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function object(o) &#123; // o必须为一个对象</span><br><span class=\"line\">  function F() &#123;&#125;;</span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  return new F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// es5规范了原型式继承</span><br><span class=\"line\">Object.create(o);</span><br></pre></td></tr></table></figure>\n<h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><p>在原型式继承的基础上继续加工的结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Test(o) &#123;</span><br><span class=\"line\">  var clone = object(o);</span><br><span class=\"line\">  clone.sayHi = function() &#123;&#125;</span><br><span class=\"line\">  return clone;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h2><p>在<code>原型，原型链笔记</code>文章中有案例<br>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。<br>将<code>sub.prototype = new sup()</code>替换为了<code>object(sup.prototype)</code>,省去了一次构造函数的调用（可是增加了<code>new F()</code> ..）</p>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>理解这些概念的时候本身就比较生硬，考虑问题的时候需要过滤掉一些干扰性的元素，考虑要考虑的问题本身。</p>\n"},{"title":"闭包","date":"2017-10-10T00:11:03.000Z","_content":"\n## 闭包定义\n  有权访问另一个函数作用域的变量的函数\n  闭包不同于一般的函数，它允许立即词法作用域外调用时仍可访问本地变量\n\n  通常这样定义：\n  ```\n  function outerFn() {\n    var a = 30;\n    return function() {\n      return a;\n    }\n  }\n\n  var outer = outerFn();\n  ```\n\n## 闭包表现形式\n  >1 在一个函数中return另一个函数\n  2 定时器，setTimeout，setInterval\n  3 addEventListener\n  4 $.ajax等\n\n  ```\n  // 闭包无处不在，使用闭包的举例,可以比较方便的访问局部变量\n  !function() {\n    var localData = \"localData\";\n    document.addEventListener('click', function() {\n      console.log(localData);\n    });\n  }();\n\n  !function() {\n    var localData = 'localData';\n    var url = 'htp://www.baidu.com';\n    $.ajax({\n      url: url,\n      success: function() {\n        // do something\n        console.log(localData);\n      }\n    });\n  }()\n  ```\n\n## 理解闭包，及闭包带来的问题\n  ```\n  // 示例1\n  function a() {\n    var res = [];\n    for(var i=0; i<10; i++) {\n      res[i] = function() {\n        return i;\n      }\n    }\n    return res;\n  }\n  a()      // 一个包括10个函数引用的数组\n  a()[0]() // 10\n  a()[1]() // 10\n\n  // 示例2\n  for(var i = 0; i < 10; i++) {\n      setTimeout(function() {\n          console.log(i);  // 10\n      }, 1000);\n  }\n\n  // 示例3\n  function b(){\n    document.body.innerHTML = '<div id=div1>aaa</div> <div id=div2>bbb</div> <div id=div3>ccc</div>';\n    for(var i=1; i<4; i++) {\n      document.getElementById('div'+i).addEventListener('click', function() {\n        alert(i);\n      })\n    }\n  }\n  ```\n  >上面的三种都为闭包的表现形式，他们有共同的特点。都是分两步执行的，1 执行外部函数（或语句），2 执行闭包内函数。\n  第一个函数执行a(),返回一个数组，数组元素为一个个的函数引用，当执行a()[0],此时for循环已经执行完毕了，因此结果为10\n  第二个语句内部为定时器，定时器本身就是异步的，for循环先执行，当定时器函数执行的时候i已经为10了。\n  第三个函数内部为事件绑定，当只有触发click时间的时候才去打印i,此时的i已经是for循环最终执行的值了。\n\n  解决这些问题的方法：可以在闭包函数外层包一层立即执行函数，并给立即执行函数添加形参。\n  ```\n  function fn2(){\n    document.body.innerHTML = '<div id=div1>aaa</div> <div id=div2>bbb</div> <div id=div3>ccc</div>';\n    for(var i=1; i<4; i++) {\n      !function(mun) {\n        document.getElementById('div'+mun).addEventListener('click', function() {\n          alert(mun);\n        })\n      }(i);\n    }\n  }\n  ```\n\n## 使用闭包封装代码\n  ```\n  (function() {\n    var _userId = 23554;\n    var _typeId = 'item';\n    var exportTest = {};\n\n    function converter(userId) {\n      return +userId;\n    }\n\n    exportTest.getUserId = function() {\n      return converter(_userId);\n    }\n\n    exportTest.getTypeId = function() {\n      return _typeId;\n    }\n    window.exportTest = exportTest;\n  }());\n\n  exportTest.getUserId();\n  exportTest.getTypeId();\n  ```\n\n## 释放引用对象，来释放空间\n  由于闭包会保持对外部函数的引用，会一直占用空间，造成内存泄漏\n  ```\n  function a() {\n    var b = 1;\n    return function() {\n      console.log(b++)\n    }\n  }\n  ```\n  var c = a();\n  c()// 1,第二次执行打印2,依次加一,,\n  c = null; // 解除对匿名函数的引用，这样对变量b的引用就会结束\n\n## 其它\n  使用作用域链去解释闭包。（闭包活动对象-》函数活动对象-》全局变量对象）\n","source":"_posts/闭包.md","raw":"---\ntitle: 闭包\ndate: 2017-10-09 20:11:03\ncategories: js\ntags: js基础\n---\n\n## 闭包定义\n  有权访问另一个函数作用域的变量的函数\n  闭包不同于一般的函数，它允许立即词法作用域外调用时仍可访问本地变量\n\n  通常这样定义：\n  ```\n  function outerFn() {\n    var a = 30;\n    return function() {\n      return a;\n    }\n  }\n\n  var outer = outerFn();\n  ```\n\n## 闭包表现形式\n  >1 在一个函数中return另一个函数\n  2 定时器，setTimeout，setInterval\n  3 addEventListener\n  4 $.ajax等\n\n  ```\n  // 闭包无处不在，使用闭包的举例,可以比较方便的访问局部变量\n  !function() {\n    var localData = \"localData\";\n    document.addEventListener('click', function() {\n      console.log(localData);\n    });\n  }();\n\n  !function() {\n    var localData = 'localData';\n    var url = 'htp://www.baidu.com';\n    $.ajax({\n      url: url,\n      success: function() {\n        // do something\n        console.log(localData);\n      }\n    });\n  }()\n  ```\n\n## 理解闭包，及闭包带来的问题\n  ```\n  // 示例1\n  function a() {\n    var res = [];\n    for(var i=0; i<10; i++) {\n      res[i] = function() {\n        return i;\n      }\n    }\n    return res;\n  }\n  a()      // 一个包括10个函数引用的数组\n  a()[0]() // 10\n  a()[1]() // 10\n\n  // 示例2\n  for(var i = 0; i < 10; i++) {\n      setTimeout(function() {\n          console.log(i);  // 10\n      }, 1000);\n  }\n\n  // 示例3\n  function b(){\n    document.body.innerHTML = '<div id=div1>aaa</div> <div id=div2>bbb</div> <div id=div3>ccc</div>';\n    for(var i=1; i<4; i++) {\n      document.getElementById('div'+i).addEventListener('click', function() {\n        alert(i);\n      })\n    }\n  }\n  ```\n  >上面的三种都为闭包的表现形式，他们有共同的特点。都是分两步执行的，1 执行外部函数（或语句），2 执行闭包内函数。\n  第一个函数执行a(),返回一个数组，数组元素为一个个的函数引用，当执行a()[0],此时for循环已经执行完毕了，因此结果为10\n  第二个语句内部为定时器，定时器本身就是异步的，for循环先执行，当定时器函数执行的时候i已经为10了。\n  第三个函数内部为事件绑定，当只有触发click时间的时候才去打印i,此时的i已经是for循环最终执行的值了。\n\n  解决这些问题的方法：可以在闭包函数外层包一层立即执行函数，并给立即执行函数添加形参。\n  ```\n  function fn2(){\n    document.body.innerHTML = '<div id=div1>aaa</div> <div id=div2>bbb</div> <div id=div3>ccc</div>';\n    for(var i=1; i<4; i++) {\n      !function(mun) {\n        document.getElementById('div'+mun).addEventListener('click', function() {\n          alert(mun);\n        })\n      }(i);\n    }\n  }\n  ```\n\n## 使用闭包封装代码\n  ```\n  (function() {\n    var _userId = 23554;\n    var _typeId = 'item';\n    var exportTest = {};\n\n    function converter(userId) {\n      return +userId;\n    }\n\n    exportTest.getUserId = function() {\n      return converter(_userId);\n    }\n\n    exportTest.getTypeId = function() {\n      return _typeId;\n    }\n    window.exportTest = exportTest;\n  }());\n\n  exportTest.getUserId();\n  exportTest.getTypeId();\n  ```\n\n## 释放引用对象，来释放空间\n  由于闭包会保持对外部函数的引用，会一直占用空间，造成内存泄漏\n  ```\n  function a() {\n    var b = 1;\n    return function() {\n      console.log(b++)\n    }\n  }\n  ```\n  var c = a();\n  c()// 1,第二次执行打印2,依次加一,,\n  c = null; // 解除对匿名函数的引用，这样对变量b的引用就会结束\n\n## 其它\n  使用作用域链去解释闭包。（闭包活动对象-》函数活动对象-》全局变量对象）\n","slug":"闭包","published":1,"updated":"2023-04-11T20:38:06.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clgcqbk410023zs8qp6lkkjg1","content":"<h2 id=\"闭包定义\"><a href=\"#闭包定义\" class=\"headerlink\" title=\"闭包定义\"></a>闭包定义</h2><p>  有权访问另一个函数作用域的变量的函数<br>  闭包不同于一般的函数，它允许立即词法作用域外调用时仍可访问本地变量</p>\n<p>  通常这样定义：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function outerFn() &#123;</span><br><span class=\"line\">  var a = 30;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var outer = outerFn();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"闭包表现形式\"><a href=\"#闭包表现形式\" class=\"headerlink\" title=\"闭包表现形式\"></a>闭包表现形式</h2><blockquote>\n<p>1 在一个函数中return另一个函数<br>  2 定时器，setTimeout，setInterval<br>  3 addEventListener<br>  4 $.ajax等</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 闭包无处不在，使用闭包的举例,可以比较方便的访问局部变量</span><br><span class=\"line\">!function() &#123;</span><br><span class=\"line\">  var localData = &quot;localData&quot;;</span><br><span class=\"line\">  document.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">    console.log(localData);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">!function() &#123;</span><br><span class=\"line\">  var localData = &apos;localData&apos;;</span><br><span class=\"line\">  var url = &apos;htp://www.baidu.com&apos;;</span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    url: url,</span><br><span class=\"line\">    success: function() &#123;</span><br><span class=\"line\">      // do something</span><br><span class=\"line\">      console.log(localData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<h2 id=\"理解闭包，及闭包带来的问题\"><a href=\"#理解闭包，及闭包带来的问题\" class=\"headerlink\" title=\"理解闭包，及闭包带来的问题\"></a>理解闭包，及闭包带来的问题</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 示例1</span><br><span class=\"line\">function a() &#123;</span><br><span class=\"line\">  var res = [];</span><br><span class=\"line\">  for(var i=0; i&lt;10; i++) &#123;</span><br><span class=\"line\">    res[i] = function() &#123;</span><br><span class=\"line\">      return i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a()      // 一个包括10个函数引用的数组</span><br><span class=\"line\">a()[0]() // 10</span><br><span class=\"line\">a()[1]() // 10</span><br><span class=\"line\"></span><br><span class=\"line\">// 示例2</span><br><span class=\"line\">for(var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">        console.log(i);  // 10</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 示例3</span><br><span class=\"line\">function b()&#123;</span><br><span class=\"line\">  document.body.innerHTML = &apos;&lt;div id=div1&gt;aaa&lt;/div&gt; &lt;div id=div2&gt;bbb&lt;/div&gt; &lt;div id=div3&gt;ccc&lt;/div&gt;&apos;;</span><br><span class=\"line\">  for(var i=1; i&lt;4; i++) &#123;</span><br><span class=\"line\">    document.getElementById(&apos;div&apos;+i).addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">      alert(i);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的三种都为闭包的表现形式，他们有共同的特点。都是分两步执行的，1 执行外部函数（或语句），2 执行闭包内函数。<br>  第一个函数执行a(),返回一个数组，数组元素为一个个的函数引用，当执行a()[0],此时for循环已经执行完毕了，因此结果为10<br>  第二个语句内部为定时器，定时器本身就是异步的，for循环先执行，当定时器函数执行的时候i已经为10了。<br>  第三个函数内部为事件绑定，当只有触发click时间的时候才去打印i,此时的i已经是for循环最终执行的值了。</p>\n</blockquote>\n<p>  解决这些问题的方法：可以在闭包函数外层包一层立即执行函数，并给立即执行函数添加形参。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn2()&#123;</span><br><span class=\"line\">  document.body.innerHTML = &apos;&lt;div id=div1&gt;aaa&lt;/div&gt; &lt;div id=div2&gt;bbb&lt;/div&gt; &lt;div id=div3&gt;ccc&lt;/div&gt;&apos;;</span><br><span class=\"line\">  for(var i=1; i&lt;4; i++) &#123;</span><br><span class=\"line\">    !function(mun) &#123;</span><br><span class=\"line\">      document.getElementById(&apos;div&apos;+mun).addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">        alert(mun);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用闭包封装代码\"><a href=\"#使用闭包封装代码\" class=\"headerlink\" title=\"使用闭包封装代码\"></a>使用闭包封装代码</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function() &#123;</span><br><span class=\"line\">  var _userId = 23554;</span><br><span class=\"line\">  var _typeId = &apos;item&apos;;</span><br><span class=\"line\">  var exportTest = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  function converter(userId) &#123;</span><br><span class=\"line\">    return +userId;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  exportTest.getUserId = function() &#123;</span><br><span class=\"line\">    return converter(_userId);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  exportTest.getTypeId = function() &#123;</span><br><span class=\"line\">    return _typeId;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  window.exportTest = exportTest;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\">exportTest.getUserId();</span><br><span class=\"line\">exportTest.getTypeId();</span><br></pre></td></tr></table></figure>\n<h2 id=\"释放引用对象，来释放空间\"><a href=\"#释放引用对象，来释放空间\" class=\"headerlink\" title=\"释放引用对象，来释放空间\"></a>释放引用对象，来释放空间</h2><p>  由于闭包会保持对外部函数的引用，会一直占用空间，造成内存泄漏<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">  var b = 1;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    console.log(b++)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  var c = a();<br>  c()// 1,第二次执行打印2,依次加一,,<br>  c = null; // 解除对匿名函数的引用，这样对变量b的引用就会结束</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>  使用作用域链去解释闭包。（闭包活动对象-》函数活动对象-》全局变量对象）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"闭包定义\"><a href=\"#闭包定义\" class=\"headerlink\" title=\"闭包定义\"></a>闭包定义</h2><p>  有权访问另一个函数作用域的变量的函数<br>  闭包不同于一般的函数，它允许立即词法作用域外调用时仍可访问本地变量</p>\n<p>  通常这样定义：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function outerFn() &#123;</span><br><span class=\"line\">  var a = 30;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    return a;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var outer = outerFn();</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"闭包表现形式\"><a href=\"#闭包表现形式\" class=\"headerlink\" title=\"闭包表现形式\"></a>闭包表现形式</h2><blockquote>\n<p>1 在一个函数中return另一个函数<br>  2 定时器，setTimeout，setInterval<br>  3 addEventListener<br>  4 $.ajax等</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 闭包无处不在，使用闭包的举例,可以比较方便的访问局部变量</span><br><span class=\"line\">!function() &#123;</span><br><span class=\"line\">  var localData = &quot;localData&quot;;</span><br><span class=\"line\">  document.addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">    console.log(localData);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;();</span><br><span class=\"line\"></span><br><span class=\"line\">!function() &#123;</span><br><span class=\"line\">  var localData = &apos;localData&apos;;</span><br><span class=\"line\">  var url = &apos;htp://www.baidu.com&apos;;</span><br><span class=\"line\">  $.ajax(&#123;</span><br><span class=\"line\">    url: url,</span><br><span class=\"line\">    success: function() &#123;</span><br><span class=\"line\">      // do something</span><br><span class=\"line\">      console.log(localData);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<h2 id=\"理解闭包，及闭包带来的问题\"><a href=\"#理解闭包，及闭包带来的问题\" class=\"headerlink\" title=\"理解闭包，及闭包带来的问题\"></a>理解闭包，及闭包带来的问题</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 示例1</span><br><span class=\"line\">function a() &#123;</span><br><span class=\"line\">  var res = [];</span><br><span class=\"line\">  for(var i=0; i&lt;10; i++) &#123;</span><br><span class=\"line\">    res[i] = function() &#123;</span><br><span class=\"line\">      return i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">a()      // 一个包括10个函数引用的数组</span><br><span class=\"line\">a()[0]() // 10</span><br><span class=\"line\">a()[1]() // 10</span><br><span class=\"line\"></span><br><span class=\"line\">// 示例2</span><br><span class=\"line\">for(var i = 0; i &lt; 10; i++) &#123;</span><br><span class=\"line\">    setTimeout(function() &#123;</span><br><span class=\"line\">        console.log(i);  // 10</span><br><span class=\"line\">    &#125;, 1000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 示例3</span><br><span class=\"line\">function b()&#123;</span><br><span class=\"line\">  document.body.innerHTML = &apos;&lt;div id=div1&gt;aaa&lt;/div&gt; &lt;div id=div2&gt;bbb&lt;/div&gt; &lt;div id=div3&gt;ccc&lt;/div&gt;&apos;;</span><br><span class=\"line\">  for(var i=1; i&lt;4; i++) &#123;</span><br><span class=\"line\">    document.getElementById(&apos;div&apos;+i).addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">      alert(i);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的三种都为闭包的表现形式，他们有共同的特点。都是分两步执行的，1 执行外部函数（或语句），2 执行闭包内函数。<br>  第一个函数执行a(),返回一个数组，数组元素为一个个的函数引用，当执行a()[0],此时for循环已经执行完毕了，因此结果为10<br>  第二个语句内部为定时器，定时器本身就是异步的，for循环先执行，当定时器函数执行的时候i已经为10了。<br>  第三个函数内部为事件绑定，当只有触发click时间的时候才去打印i,此时的i已经是for循环最终执行的值了。</p>\n</blockquote>\n<p>  解决这些问题的方法：可以在闭包函数外层包一层立即执行函数，并给立即执行函数添加形参。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function fn2()&#123;</span><br><span class=\"line\">  document.body.innerHTML = &apos;&lt;div id=div1&gt;aaa&lt;/div&gt; &lt;div id=div2&gt;bbb&lt;/div&gt; &lt;div id=div3&gt;ccc&lt;/div&gt;&apos;;</span><br><span class=\"line\">  for(var i=1; i&lt;4; i++) &#123;</span><br><span class=\"line\">    !function(mun) &#123;</span><br><span class=\"line\">      document.getElementById(&apos;div&apos;+mun).addEventListener(&apos;click&apos;, function() &#123;</span><br><span class=\"line\">        alert(mun);</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;(i);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用闭包封装代码\"><a href=\"#使用闭包封装代码\" class=\"headerlink\" title=\"使用闭包封装代码\"></a>使用闭包封装代码</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(function() &#123;</span><br><span class=\"line\">  var _userId = 23554;</span><br><span class=\"line\">  var _typeId = &apos;item&apos;;</span><br><span class=\"line\">  var exportTest = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  function converter(userId) &#123;</span><br><span class=\"line\">    return +userId;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  exportTest.getUserId = function() &#123;</span><br><span class=\"line\">    return converter(_userId);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  exportTest.getTypeId = function() &#123;</span><br><span class=\"line\">    return _typeId;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  window.exportTest = exportTest;</span><br><span class=\"line\">&#125;());</span><br><span class=\"line\"></span><br><span class=\"line\">exportTest.getUserId();</span><br><span class=\"line\">exportTest.getTypeId();</span><br></pre></td></tr></table></figure>\n<h2 id=\"释放引用对象，来释放空间\"><a href=\"#释放引用对象，来释放空间\" class=\"headerlink\" title=\"释放引用对象，来释放空间\"></a>释放引用对象，来释放空间</h2><p>  由于闭包会保持对外部函数的引用，会一直占用空间，造成内存泄漏<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function a() &#123;</span><br><span class=\"line\">  var b = 1;</span><br><span class=\"line\">  return function() &#123;</span><br><span class=\"line\">    console.log(b++)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>  var c = a();<br>  c()// 1,第二次执行打印2,依次加一,,<br>  c = null; // 解除对匿名函数的引用，这样对变量b的引用就会结束</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>  使用作用域链去解释闭包。（闭包活动对象-》函数活动对象-》全局变量对象）</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clgcqbk3s0006zs8qn51dvyzw","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk3u000dzs8q5e3mvdnv"},{"post_id":"clgcqbk3p0001zs8qd0mzymaz","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk3u000hzs8qjcxh8837"},{"post_id":"clgcqbk3t000bzs8qt3zehrfd","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk3v000kzs8qnckbvqzp"},{"post_id":"clgcqbk3q0002zs8qa86sya53","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk3w000ozs8q3mychw2o"},{"post_id":"clgcqbk3u000czs8q27k7efb7","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk3w000rzs8q6x8eyt0s"},{"post_id":"clgcqbk3u000gzs8quq1kfind","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk3w000vzs8qfdc5wz10"},{"post_id":"clgcqbk3r0005zs8qgpamjod9","category_id":"clgcqbk3u000ezs8qnslnc8zk","_id":"clgcqbk3x000yzs8qebdumu45"},{"post_id":"clgcqbk3v000jzs8qtqjl2u2j","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk3x0011zs8qgw2xl5yd"},{"post_id":"clgcqbk3s0007zs8qvq1vs9db","category_id":"clgcqbk3v000lzs8qd6ik8k3x","_id":"clgcqbk3y0015zs8qnpl94k4t"},{"post_id":"clgcqbk3w000uzs8qi4nsaas7","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk3y0017zs8qsqkd3ec7"},{"post_id":"clgcqbk3w000xzs8qba8xt8xj","category_id":"clgcqbk3w000szs8q0kbuhg9m","_id":"clgcqbk3y001azs8qy8j9z2jx"},{"post_id":"clgcqbk3v000nzs8qwz376jjp","category_id":"clgcqbk3w000szs8q0kbuhg9m","_id":"clgcqbk3y001ezs8qqh2ii9lf"},{"post_id":"clgcqbk3x000zzs8qigkn1bmg","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk3z001hzs8qxlw3dt1t"},{"post_id":"clgcqbk3x0014zs8qixlwm07t","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk3z001lzs8qhb70yf7d"},{"post_id":"clgcqbk3w000qzs8qlxnavclp","category_id":"clgcqbk3w000szs8q0kbuhg9m","_id":"clgcqbk40001pzs8qo5305386"},{"post_id":"clgcqbk3y001dzs8q90l1c1xd","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk40001szs8q1j6jtp81"},{"post_id":"clgcqbk3z001gzs8qc6o55yr3","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk40001vzs8qo993yyrx"},{"post_id":"clgcqbk3y0016zs8qhr1d1zmv","category_id":"clgcqbk3y001czs8qttufhzov","_id":"clgcqbk40001yzs8qtia8iye7"},{"post_id":"clgcqbk3z001jzs8q1z3c0vr5","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk410021zs8q6txvuqte"},{"post_id":"clgcqbk3z001ozs8qus4ezx7w","category_id":"clgcqbk3v000lzs8qd6ik8k3x","_id":"clgcqbk410024zs8q24vkaif9"},{"post_id":"clgcqbk3y0019zs8qgbhq563y","category_id":"clgcqbk3z001kzs8qlpbbpazs","_id":"clgcqbk410027zs8qgzirh5k6"},{"post_id":"clgcqbk40001rzs8ql3kzwlfg","category_id":"clgcqbk3v000lzs8qd6ik8k3x","_id":"clgcqbk410029zs8ql93cokpc"},{"post_id":"clgcqbk40001uzs8qf2q8u9nf","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk42002czs8qnkjwye5n"},{"post_id":"clgcqbk40001xzs8qmephceks","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk42002ezs8qla6cebkq"},{"post_id":"clgcqbk410020zs8q5h329jus","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk42002gzs8qvuiaqvoj"},{"post_id":"clgcqbk410023zs8qp6lkkjg1","category_id":"clgcqbk3r0003zs8qrxunx4su","_id":"clgcqbk42002jzs8qchttxeg1"},{"post_id":"clgcqbk3n0000zs8q09rtfpzn","category_id":"clgcqp63m0033zs8q5755spdp","_id":"clgcqp63m0036zs8qsv6ty8lg"}],"PostTag":[{"post_id":"clgcqbk3p0001zs8qd0mzymaz","tag_id":"clgcqbk3r0004zs8qrn92tlw0","_id":"clgcqbk3t000azs8qj2quhak0"},{"post_id":"clgcqbk3q0002zs8qa86sya53","tag_id":"clgcqbk3t0009zs8ql25965tf","_id":"clgcqbk3v000izs8q30h5mu0s"},{"post_id":"clgcqbk3r0005zs8qgpamjod9","tag_id":"clgcqbk3u000fzs8qjo6op0er","_id":"clgcqbk3w000pzs8qfiwg09gt"},{"post_id":"clgcqbk3s0006zs8qn51dvyzw","tag_id":"clgcqbk3v000mzs8qo757vga0","_id":"clgcqbk3w000wzs8qvi6a28kq"},{"post_id":"clgcqbk3s0007zs8qvq1vs9db","tag_id":"clgcqbk3w000tzs8q2dcggtq7","_id":"clgcqbk3x0013zs8q98wcm9hv"},{"post_id":"clgcqbk3t000bzs8qt3zehrfd","tag_id":"clgcqbk3x0012zs8q6t3arbre","_id":"clgcqbk3y001bzs8q0ogqsm3a"},{"post_id":"clgcqbk3u000czs8q27k7efb7","tag_id":"clgcqbk3y0018zs8qvv8g6wvq","_id":"clgcqbk3z001izs8qlie7xl8z"},{"post_id":"clgcqbk3y001dzs8q90l1c1xd","tag_id":"clgcqbk3y0018zs8qvv8g6wvq","_id":"clgcqbk3z001mzs8qj5818c1t"},{"post_id":"clgcqbk3u000gzs8quq1kfind","tag_id":"clgcqbk3y0018zs8qvv8g6wvq","_id":"clgcqbk40001qzs8qdmzplf63"},{"post_id":"clgcqbk3v000jzs8qtqjl2u2j","tag_id":"clgcqbk3x0012zs8q6t3arbre","_id":"clgcqbk40001wzs8qagnc9q5z"},{"post_id":"clgcqbk3v000nzs8qwz376jjp","tag_id":"clgcqbk40001tzs8qkb2u4pqc","_id":"clgcqbk410022zs8qnz6bwqcs"},{"post_id":"clgcqbk40001xzs8qmephceks","tag_id":"clgcqbk3x0012zs8q6t3arbre","_id":"clgcqbk410025zs8ql8npfipp"},{"post_id":"clgcqbk410020zs8q5h329jus","tag_id":"clgcqbk3y0018zs8qvv8g6wvq","_id":"clgcqbk410028zs8qf1w7e6cx"},{"post_id":"clgcqbk3w000qzs8qlxnavclp","tag_id":"clgcqbk40001tzs8qkb2u4pqc","_id":"clgcqbk41002azs8qpda0r76j"},{"post_id":"clgcqbk410023zs8qp6lkkjg1","tag_id":"clgcqbk3y0018zs8qvv8g6wvq","_id":"clgcqbk42002dzs8q3ujvuet4"},{"post_id":"clgcqbk3w000uzs8qi4nsaas7","tag_id":"clgcqbk3y0018zs8qvv8g6wvq","_id":"clgcqbk42002fzs8q03u4n3bn"},{"post_id":"clgcqbk3w000xzs8qba8xt8xj","tag_id":"clgcqbk41002bzs8qtshd1l0y","_id":"clgcqbk42002izs8q7magrjqb"},{"post_id":"clgcqbk3x000zzs8qigkn1bmg","tag_id":"clgcqbk42002hzs8q1qv99vrr","_id":"clgcqbk42002lzs8qnu4a9fwp"},{"post_id":"clgcqbk3x0014zs8qixlwm07t","tag_id":"clgcqbk3y0018zs8qvv8g6wvq","_id":"clgcqbk42002nzs8q5hnz5jc9"},{"post_id":"clgcqbk3y0016zs8qhr1d1zmv","tag_id":"clgcqbk42002mzs8qdxtoenmu","_id":"clgcqbk42002pzs8qfjwal1o5"},{"post_id":"clgcqbk3y0019zs8qgbhq563y","tag_id":"clgcqbk42002ozs8q045s9tn2","_id":"clgcqbk42002rzs8q8fm7cl01"},{"post_id":"clgcqbk3z001gzs8qc6o55yr3","tag_id":"clgcqbk40001tzs8qkb2u4pqc","_id":"clgcqbk42002tzs8q66xmxxc0"},{"post_id":"clgcqbk3z001jzs8q1z3c0vr5","tag_id":"clgcqbk42002szs8qb8l8ybsw","_id":"clgcqbk42002vzs8q1dgfpift"},{"post_id":"clgcqbk3z001ozs8qus4ezx7w","tag_id":"clgcqbk42002uzs8qqbwzm2bz","_id":"clgcqbk42002xzs8qobmqf4xb"},{"post_id":"clgcqbk40001rzs8ql3kzwlfg","tag_id":"clgcqbk42002uzs8qqbwzm2bz","_id":"clgcqbk43002zzs8qpmp7a5ol"},{"post_id":"clgcqbk40001uzs8qf2q8u9nf","tag_id":"clgcqbk42002yzs8q095ptdye","_id":"clgcqbk430030zs8q2vfp8m5w"},{"post_id":"clgcqbk3n0000zs8q09rtfpzn","tag_id":"clgcqp63m0034zs8q4o0axn5s","_id":"clgcqp63m0035zs8q6dsnhf4l"}],"Tag":[{"name":"jquery","_id":"clgcqbk3r0004zs8qrn92tlw0"},{"name":"ajax","_id":"clgcqbk3t0009zs8ql25965tf"},{"name":"Hexo","_id":"clgcqbk3u000fzs8qjo6op0er"},{"name":"canvas","_id":"clgcqbk3v000mzs8qo757vga0"},{"name":"选择器","_id":"clgcqbk3w000tzs8q2dcggtq7"},{"name":"es6","_id":"clgcqbk3x0012zs8q6t3arbre"},{"name":"js基础","_id":"clgcqbk3y0018zs8qvv8g6wvq"},{"name":"工作总结","_id":"clgcqbk40001tzs8qkb2u4pqc"},{"name":"redux","_id":"clgcqbk41002bzs8qtshd1l0y"},{"name":"vue","_id":"clgcqbk42002hzs8q1qv99vrr"},{"name":"mongo","_id":"clgcqbk42002mzs8qdxtoenmu"},{"name":"动画","_id":"clgcqbk42002ozs8q045s9tn2"},{"name":"设计模式","_id":"clgcqbk42002szs8qb8l8ybsw"},{"name":"布局","_id":"clgcqbk42002uzs8qqbwzm2bz"},{"name":"性能优化","_id":"clgcqbk42002yzs8q095ptdye"},{"name":"VPS","_id":"clgcqp63m0034zs8q4o0axn5s"}]}}