{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/javascript 原型及原型链.png","path":"img/javascript 原型及原型链.png","modified":0,"renderable":0},{"_id":"source/img/创建对象.png","path":"img/创建对象.png","modified":0,"renderable":0},{"_id":"source/img/构造函数执行过程.png","path":"img/构造函数执行过程.png","modified":0,"renderable":0},{"_id":"source/img/选择器.png","path":"img/选择器.png","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1493011743526},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1493011743527},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1493011743527},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1493011743529},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1493011743530},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1493011743530},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1493011743531},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1493011743532},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1493011743532},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1493011743533},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1493011743534},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1493011743535},{"_id":"themes/next/_config.yml","hash":"c9d42572725d35dc74b2f0de322857c132553166","modified":1498893684342},{"_id":"themes/next/bower.json","hash":"936b9aed1934471bb74cdaacc3fb8031eb01fe23","modified":1493011743536},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1493011743537},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1493011743597},{"_id":"source/_posts/JQ学习1.md","hash":"7f7c2b172fdc9f7b3458e54007ca252f4ff1f2d0","modified":1494824205343},{"_id":"source/_posts/build-blog.md","hash":"05219715b192b0621dbbc10b0cb9066649d9b2d2","modified":1507537935337},{"_id":"source/_posts/canvas学习笔记.md","hash":"3cda2a42f041c721d729d1e1c6ccdb22d044607d","modified":1493805901522},{"_id":"source/_posts/css选择器.md","hash":"b66961c64fdaf28e9d206e7448f82b1ec0a728b7","modified":1506656581197},{"_id":"source/_posts/es6-函数总结.md","hash":"4e028c09247c30f8176f60827a3d6da6ca0aac25","modified":1507374172418},{"_id":"source/_posts/js作用域.md","hash":"4ad46894538414d2007e34e5e766643c49063ea8","modified":1507620801131},{"_id":"source/_posts/promise学习.md","hash":"986ecbdce33df0f202e83f593a250b297107c290","modified":1512568922941},{"_id":"source/_posts/react-项目总结.md","hash":"62dd28accc118a2bd8a28b01bb2d7fcc53ada961","modified":1511877769928},{"_id":"source/_posts/this的工作原理.md","hash":"921f2299629a2feda6b89c0f7f12883af8d140e0","modified":1507614241823},{"_id":"source/_posts/创建对象.md","hash":"db17a46ffa23794a387cac12cfec12222e07d96b","modified":1507690005843},{"_id":"source/_posts/原型，原型链笔记.md","hash":"3082f8d4ef16e49f7daef7283858aae19062cdf5","modified":1498872759566},{"_id":"source/_posts/国金项目总结.md","hash":"d51cd60b273c7a0d5a90f56e64564ed2d0f06b8a","modified":1503567684104},{"_id":"source/_posts/实现列表标题标题头第一列最后一列固定.md","hash":"c3c4a2f08550d2cfaf47bf3cba33a8e3295a6d1e","modified":1495606561610},{"_id":"source/_posts/布局.md","hash":"bc09f63845354dc996931cf6cddfcbf4bd73ecdb","modified":1507536704110},{"_id":"source/_posts/继承.md","hash":"2e6422b1fab059955399893677e0f052469dcf60","modified":1507689748802},{"_id":"source/_posts/闭包.md","hash":"8fa742ddd56362bb7ce2a40b91b2f6e7f48dff2c","modified":1507614417427},{"_id":"source/img/javascript 原型及原型链.png","hash":"d3bed95e18d9cbb7d14f027e690155f84132efbe","modified":1498813906877},{"_id":"source/img/创建对象.png","hash":"e2eb90734e031dd2dcb5299988f8b383d7f4f41f","modified":1506664628188},{"_id":"source/img/构造函数执行过程.png","hash":"0144ed33c510d47ea4925a26df4329a898055279","modified":1507543461517},{"_id":"source/img/选择器.png","hash":"26765ae8bb0542538df00dfac9fee0a5e9726229","modified":1506653427317},{"_id":"source/tags/index.md","hash":"e8fe14a1a4c2025071d1536c2c659a5aea4a8eef","modified":1493781875945},{"_id":"source/categories/index.md","hash":"edca3b44c714857c9471a6a63e8b0b824d6eb3fd","modified":1498878889755},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1493011743539},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1493011743540},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1493011743540},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1493011743541},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1493011743542},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1493011743541},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1493011743543},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1493011743545},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1493011743544},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1493011743546},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1493011743547},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1493011743547},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1493011743548},{"_id":"themes/next/layout/_layout.swig","hash":"efa71671290bb4b497d83720282b36482b6b0efb","modified":1493011743552},{"_id":"themes/next/layout/category.swig","hash":"be617f098582c4b110935a6d3551f0a8d09fda5a","modified":1493011743593},{"_id":"themes/next/layout/archive.swig","hash":"a1d1e91013baaaeb7deaf35c6d3975971ce38e02","modified":1493011743593},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1493011743593},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1493011743595},{"_id":"themes/next/layout/page.swig","hash":"0a8783d44db72e134db5e221705c74b4731826c9","modified":1493011743594},{"_id":"themes/next/layout/schedule.swig","hash":"8086f1163b10460258ecbbbe48b057b22bb2f02e","modified":1493011743595},{"_id":"themes/next/layout/tag.swig","hash":"4d891cb52bbd1b584b1c38669968515987e73e12","modified":1493011743596},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1493011743598},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1493011743600},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1493011743817},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1493011743818},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1493011743819},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493011743689},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1493011743550},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1493011743551},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1493011743553},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1493011743553},{"_id":"themes/next/layout/_macro/post.swig","hash":"3115575c20f7f78734c90faf590f2baea8d08888","modified":1493011743554},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1493011743555},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e7f58154ac734088372888742e0029ce7c690511","modified":1493011743555},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1493011743556},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1493011743557},{"_id":"themes/next/layout/_partials/footer.swig","hash":"683616f4a80796051e2346d80acf838a589450b0","modified":1493011743557},{"_id":"themes/next/layout/_partials/head.swig","hash":"881556e5387d760d7b67c49f4f3c3ccc2240436b","modified":1493011743558},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1493011743560},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1493011743560},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1493011743561},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1493011743562},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1493011743567},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1493011743568},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1493011743571},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1493011743583},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1493011743584},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1493011743585},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1493011743586},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1493011743587},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1493011743601},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1493011743601},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1493011743602},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1493011743603},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1493011743603},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1493011743604},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1493011743688},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1493011743690},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1493011743691},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1493011743691},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1493011743692},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1493011743693},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1493011743693},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1493011743695},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1493011743696},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1493011743696},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493011743697},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1493011743697},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1493011743698},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1493011743699},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1493011743699},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493011743570},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493011743570},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493011743663},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493011743663},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493011743664},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493011743686},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1493011743688},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1493011743559},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1493011743559},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1493011743562},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1493011743563},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1493011743563},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1493011743564},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1493011743565},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1493011743565},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1493011743566},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1493011743569},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1493011743570},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1493011743572},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1493011743573},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1493011743573},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1493011743574},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1493011743574},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1493011743575},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1493011743576},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1493011743576},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1493011743577},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1493011743577},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1493011743578},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1493011743579},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1493011743580},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1493011743580},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1493011743580},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1493011743581},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1493011743582},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"c75024151fc63220e7d01035d8a1aff9affdecc7","modified":1493011743582},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1493011743583},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1493011743590},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"cc5af2f78f58a1f2d5c064ff7873552303d1503c","modified":1493011743591},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1493011743591},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1493011743592},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1493011743662},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1493011743663},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1493011743664},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1493011743685},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1493011743686},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dacede1cc110c762e7a5468dc0e34ae1a962d5aa","modified":1493011743687},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1493011743701},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1493011743701},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1493011743702},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1493011743703},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1493011743703},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1493011743704},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1493011743705},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1493011743705},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1493011743707},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1493011743708},{"_id":"themes/next/source/js/src/utils.js","hash":"092a32149b67a7af271c6c2c45f4c737f64b7e54","modified":1493011743708},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1493011743730},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ef4b2877e37d65025a28eea154b33fe66351493c","modified":1493011743737},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1493011743736},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1493011743739},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1493011743739},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1493011743756},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1493011743757},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1493011743758},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1493011743758},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1493011743762},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1493011743763},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1493011743763},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1493011743764},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1493011743765},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1493011743788},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1493011743792},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1493011743793},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1493011743794},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1493011743794},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1493011743796},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1493011743796},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1493011743798},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1493011743799},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1493011743800},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1493011743809},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1493011743810},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1493011743813},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1493011743815},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1493011743816},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1493011743790},{"_id":"source/img/avatar.jpg","hash":"0b125c3f4e1f993a0e7cb47355987833fba5c1db","modified":1498873762498},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1493011743589},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1493011743589},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1493011743607},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1493011743608},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1493011743607},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1493011743608},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1493011743609},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1493011743622},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1493011743642},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1493011743656},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1493011743657},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1493011743658},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1493011743659},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1493011743659},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1493011743661},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1493011743666},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1493011743666},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1493011743667},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1493011743668},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1493011743669},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1493011743669},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1493011743670},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1493011743680},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1493011743681},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1493011743681},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1493011743682},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1493011743682},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1493011743683},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1493011743675},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1493011743676},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1493011743676},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1493011743677},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1493011743677},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1493011743706},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"95518d298d3c5c271faec2e4977df9e5dedd5d84","modified":1493011743727},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1493011743728},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1493011743740},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1493011743741},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1493011743742},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1493011743742},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1493011743743},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1493011743744},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1493011743753},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1493011743754},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1493011743755},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1493011743760},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1493011743761},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1493011743767},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1493011743768},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1493011743769},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1493011743807},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1493011743808},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"524cfca7b6ab135d81ea723d8de06fdf0dbe7e56","modified":1493011743724},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1493011743726},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1493011743786},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1493011743787},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1493011743812},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1493011743610},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1493011743612},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1493011743611},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1493011743613},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1493011743614},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1493011743615},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1493011743616},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1493011743617},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1493011743617},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1493011743619},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1493011743620},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1493011743619},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1493011743620},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1493011743621},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1493011743623},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1493011743623},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1493011743624},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1493011743625},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1493011743625},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1493011743626},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"3d3e0200716ceb276ac755cc400def9c1b437489","modified":1493011743627},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1493011743628},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1493011743629},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1493011743630},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1493011743630},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1493011743631},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1493011743632},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1493011743635},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1493011743634},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1493011743636},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1493011743637},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1493011743637},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1493011743638},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1493011743639},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1493011743640},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1493011743641},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1493011743643},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1493011743644},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1493011743644},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1493011743645},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1493011743646},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1493011743647},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1493011743648},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1493011743649},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1493011743649},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1493011743650},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1493011743651},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1493011743652},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1493011743653},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1493011743654},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"eb45ee16051624c6e36a274c0a9538e961f10c4d","modified":1493011743655},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1493011743672},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1493011743673},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1493011743679},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1493011743712},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1493011743721},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1493011743718},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1493011743722},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1493011743746},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1493011743748},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1493011743747},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1493011743749},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1493011743749},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1493011743751},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1493011743773},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1493011743776},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1493011743785},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1493011743735},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1493011743805},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1493011743781}],"Category":[{"name":"js","_id":"cjauztk2s0004jsvc47wlaib3"},{"name":"其它","_id":"cjauztk48000ejsvc5ex123ln"},{"name":"css","_id":"cjauztk4j000mjsvcqvlobhfk"},{"name":"react","_id":"cjauztk4u000tjsvchges355y"}],"Data":[],"Page":[{"title":"tags","date":"2017-05-03T03:23:26.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-05-03 11:23:26\ntype: \"tags\"\ncomments: true\n---\n","updated":"2017-05-03T03:24:35.945Z","path":"tags/index.html","layout":"page","_id":"cjauztk2c0001jsvcf6ve2e27","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-07-01T03:10:36.000Z","type":"categories","comments":1,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-07-01 11:10:36\ntype: \"categories\"\ncomments: true\n---\n","updated":"2017-07-01T03:14:49.755Z","path":"categories/index.html","layout":"page","_id":"cjauztk2p0003jsvcxn2rf981","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JQ学习1","date":"2017-05-15T04:52:23.000Z","_content":"\n### jq结构\n```javascript\n(function( window, undefined ) {\n  // If there is a window object, that at least has a document property,\n  // define jQuery and $ identifiers\n  if ( typeof window === \"object\" && typeof window.document === \"object\" ) {\n    window.jQuery = window.$ = jQuery;\n  }\n})( window );\n```\n传入window对象时防止压缩时window被处理为普通变量\nundefined在一些浏览器中可以对undefined进行修改\n\n### JQ对象上的属性和方法\n```javascript\njQuery = function( selector, context ) {\n  // The jQuery object is actually just the init constructor 'enhanced'\n  return new jQuery.fn.init( selector, context, rootjQuery );\n}\njquery.fn = jquery.prototype = {\n  jquery: 版本, \n  constructor: 修正指针指向问题,  \n  init: 初始化和参数管理,\n  selector: 存储选择字符串, \n  length: this对象的长度,\n  toArray: 传数组,\n  ...\n}\njQuery.fn.init.prototype = jQuery.fn;\n```\n[参考文章](https://github.com/chyingp/blog/blob/master/jquery/jQuery%E6%BA%90%E7%A0%81-%E6%A0%B8%E5%BF%83%E7%BB%93%E6%9E%84.md)\n\n### init方法\n```javascript\njQuery.fn = jQuery.prototype = {\n  init: function() {\n    $(\"\"), $(null), $(undefined), $(false)\n\n    $('#div1') \n    $('.box') $('div')  $('#div1 div.box')\n    $('<li>')  $('<li>1</li><li>2</li>')\n    \n    $(this)  $(document)    \n    $(function(){})   \n    $([])  $({})\n    \n    return jQuery.makeArray( selector, this );\n  }\n}\n```\n\n备注：\n1 constructor以字面量的方式定义对象，需要指定当前的constructor\n2 prototype,  constructor, 面向对象概念理解 \n\n","source":"_posts/JQ学习1.md","raw":"---\ntitle: JQ学习1\ndate: 2017-05-15 12:52:23\ncategories: js\ntags: jquery\n---\n\n### jq结构\n```javascript\n(function( window, undefined ) {\n  // If there is a window object, that at least has a document property,\n  // define jQuery and $ identifiers\n  if ( typeof window === \"object\" && typeof window.document === \"object\" ) {\n    window.jQuery = window.$ = jQuery;\n  }\n})( window );\n```\n传入window对象时防止压缩时window被处理为普通变量\nundefined在一些浏览器中可以对undefined进行修改\n\n### JQ对象上的属性和方法\n```javascript\njQuery = function( selector, context ) {\n  // The jQuery object is actually just the init constructor 'enhanced'\n  return new jQuery.fn.init( selector, context, rootjQuery );\n}\njquery.fn = jquery.prototype = {\n  jquery: 版本, \n  constructor: 修正指针指向问题,  \n  init: 初始化和参数管理,\n  selector: 存储选择字符串, \n  length: this对象的长度,\n  toArray: 传数组,\n  ...\n}\njQuery.fn.init.prototype = jQuery.fn;\n```\n[参考文章](https://github.com/chyingp/blog/blob/master/jquery/jQuery%E6%BA%90%E7%A0%81-%E6%A0%B8%E5%BF%83%E7%BB%93%E6%9E%84.md)\n\n### init方法\n```javascript\njQuery.fn = jQuery.prototype = {\n  init: function() {\n    $(\"\"), $(null), $(undefined), $(false)\n\n    $('#div1') \n    $('.box') $('div')  $('#div1 div.box')\n    $('<li>')  $('<li>1</li><li>2</li>')\n    \n    $(this)  $(document)    \n    $(function(){})   \n    $([])  $({})\n    \n    return jQuery.makeArray( selector, this );\n  }\n}\n```\n\n备注：\n1 constructor以字面量的方式定义对象，需要指定当前的constructor\n2 prototype,  constructor, 面向对象概念理解 \n\n","slug":"JQ学习1","published":1,"updated":"2017-05-15T04:56:45.343Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk200000jsvc0d7sgz9o","content":"<h3 id=\"jq结构\"><a href=\"#jq结构\" class=\"headerlink\" title=\"jq结构\"></a>jq结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> window, undefined </span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// If there is a window object, that at least has a document property,</span></div><div class=\"line\">  <span class=\"comment\">// define jQuery and $ identifiers</span></div><div class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.document === <span class=\"string\">\"object\"</span> ) &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)( <span class=\"built_in\">window</span> );</div></pre></td></tr></table></figure>\n<p>传入window对象时防止压缩时window被处理为普通变量<br>undefined在一些浏览器中可以对undefined进行修改</p>\n<h3 id=\"JQ对象上的属性和方法\"><a href=\"#JQ对象上的属性和方法\" class=\"headerlink\" title=\"JQ对象上的属性和方法\"></a>JQ对象上的属性和方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> selector, context </span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// The jQuery object is actually just the init constructor 'enhanced'</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init( selector, context, rootjQuery );</div><div class=\"line\">&#125;</div><div class=\"line\">jquery.fn = jquery.prototype = &#123;</div><div class=\"line\">  jquery: 版本, </div><div class=\"line\">  <span class=\"keyword\">constructor</span>: 修正指针指向问题,  </div><div class=\"line\">  init: 初始化和参数管理,</div><div class=\"line\">  selector: 存储选择字符串, </div><div class=\"line\">  length: this对象的长度,</div><div class=\"line\">  toArray: 传数组,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\">jQuery.fn.init.prototype = jQuery.fn;</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/chyingp/blog/blob/master/jquery/jQuery%E6%BA%90%E7%A0%81-%E6%A0%B8%E5%BF%83%E7%BB%93%E6%9E%84.md\" target=\"_blank\" rel=\"external\">参考文章</a></p>\n<h3 id=\"init方法\"><a href=\"#init方法\" class=\"headerlink\" title=\"init方法\"></a>init方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fn = jQuery.prototype = &#123;</div><div class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"\"</span>), $(<span class=\"literal\">null</span>), $(<span class=\"literal\">undefined</span>), $(<span class=\"literal\">false</span>)</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">'#div1'</span>) </div><div class=\"line\">    $(<span class=\"string\">'.box'</span>) $(<span class=\"string\">'div'</span>)  $(<span class=\"string\">'#div1 div.box'</span>)</div><div class=\"line\">    $(<span class=\"string\">'&lt;li&gt;'</span>)  $(<span class=\"string\">'&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;'</span>)</div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"keyword\">this</span>)  $(<span class=\"built_in\">document</span>)    </div><div class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)   </div><div class=\"line\">    $([])  $(&#123;&#125;)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> jQuery.makeArray( selector, <span class=\"keyword\">this</span> );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>备注：<br>1 constructor以字面量的方式定义对象，需要指定当前的constructor<br>2 prototype,  constructor, 面向对象概念理解 </p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"jq结构\"><a href=\"#jq结构\" class=\"headerlink\" title=\"jq结构\"></a>jq结构</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> window, undefined </span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// If there is a window object, that at least has a document property,</span></div><div class=\"line\">  <span class=\"comment\">// define jQuery and $ identifiers</span></div><div class=\"line\">  <span class=\"keyword\">if</span> ( <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span>.document === <span class=\"string\">\"object\"</span> ) &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.jQuery = <span class=\"built_in\">window</span>.$ = jQuery;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)( <span class=\"built_in\">window</span> );</div></pre></td></tr></table></figure>\n<p>传入window对象时防止压缩时window被处理为普通变量<br>undefined在一些浏览器中可以对undefined进行修改</p>\n<h3 id=\"JQ对象上的属性和方法\"><a href=\"#JQ对象上的属性和方法\" class=\"headerlink\" title=\"JQ对象上的属性和方法\"></a>JQ对象上的属性和方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"> selector, context </span>) </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// The jQuery object is actually just the init constructor 'enhanced'</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> jQuery.fn.init( selector, context, rootjQuery );</div><div class=\"line\">&#125;</div><div class=\"line\">jquery.fn = jquery.prototype = &#123;</div><div class=\"line\">  jquery: 版本, </div><div class=\"line\">  <span class=\"keyword\">constructor</span>: 修正指针指向问题,  </div><div class=\"line\">  init: 初始化和参数管理,</div><div class=\"line\">  selector: 存储选择字符串, </div><div class=\"line\">  length: this对象的长度,</div><div class=\"line\">  toArray: 传数组,</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\">jQuery.fn.init.prototype = jQuery.fn;</div></pre></td></tr></table></figure>\n<p><a href=\"https://github.com/chyingp/blog/blob/master/jquery/jQuery%E6%BA%90%E7%A0%81-%E6%A0%B8%E5%BF%83%E7%BB%93%E6%9E%84.md\" target=\"_blank\" rel=\"external\">参考文章</a></p>\n<h3 id=\"init方法\"><a href=\"#init方法\" class=\"headerlink\" title=\"init方法\"></a>init方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.fn = jQuery.prototype = &#123;</div><div class=\"line\">  init: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    $(<span class=\"string\">\"\"</span>), $(<span class=\"literal\">null</span>), $(<span class=\"literal\">undefined</span>), $(<span class=\"literal\">false</span>)</div><div class=\"line\"></div><div class=\"line\">    $(<span class=\"string\">'#div1'</span>) </div><div class=\"line\">    $(<span class=\"string\">'.box'</span>) $(<span class=\"string\">'div'</span>)  $(<span class=\"string\">'#div1 div.box'</span>)</div><div class=\"line\">    $(<span class=\"string\">'&lt;li&gt;'</span>)  $(<span class=\"string\">'&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;'</span>)</div><div class=\"line\">    </div><div class=\"line\">    $(<span class=\"keyword\">this</span>)  $(<span class=\"built_in\">document</span>)    </div><div class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;)   </div><div class=\"line\">    $([])  $(&#123;&#125;)</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> jQuery.makeArray( selector, <span class=\"keyword\">this</span> );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>备注：<br>1 constructor以字面量的方式定义对象，需要指定当前的constructor<br>2 prototype,  constructor, 面向对象概念理解 </p>\n"},{"title":"canvas学习笔记","date":"2017-05-03T05:49:46.000Z","_content":"\n###   简单例子\n```javascript\n<html>\n <head>\n  <script type=\"application/javascript\">\n    function draw() {\n      var canvas = document.getElementById(\"canvas\");\n      if (canvas.getContext) {\n        var ctx = canvas.getContext(\"2d\");\n\n        ctx.fillStyle = \"rgb(200,0,0)\";\n        ctx.fillRect (10, 10, 55, 50);\n\n        ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";\n        ctx.fillRect (30, 30, 55, 50);\n      }\n    }\n  </script>\n </head>\n <body onload=\"draw();\">\n   <canvas id=\"canvas\" width=\"150\" height=\"150\"></canvas>\n </body>\n</html>\n```\n### 直接可以绘制图形的方法\n`fillRect(x, y, width, height) `绘制一个填充的矩形\n`strokeRect(x, y, width, height)`绘制一个矩形的边框\n`clearRect(x, y, width, height)`清除指定矩形区域，让清除部分完全透明。\n\n###  绘制基本图形，文本，图片，变换\n`translate(x, y)`translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，如右图所示。\n`rotate(angle)`这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。\n`scale(x, y)`scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。\n`fillStyle = color`设置图形的填充颜色。\n`strokeStyle = color`设置图形轮廓的颜色。\n`globalAlpha = transparencyValue`这个属性影响到 canvas 里所有图形的透明度，有效的值范围是 0.0 （完全透明）到 1.0（完全不透明），默认是 1.0。\n`lineWidth = value`设置线条宽度。\n`lineCap = type`设置线条末端样式。\n`shadowOffsetX = float` shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。\n`shadowOffsetY = float` shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。\n`shadowBlur = float` shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。\n`shadowColor = color` shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。\n\n###  绘制路径\n`beginPath()`新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。\n`closePath()`闭合路径之后图形绘制命令又重新指向到上下文中。当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。  \n`stroke()`通过线条来绘制图形轮廓。\n`fill()`通过填充路径的内容区域生成实心的图形\n`moveTo(x, y)`将笔触移动到指定的坐标x以及y上。或者你可以想象一下在纸上作业，一支钢笔或者铅笔的笔尖从一个点到另一个点的移动过程。\n`lineTo(x, y)`绘制一条从当前位置到指定x以及y位置的直线。\n`arc(x, y, radius, startAngle, endAngle, anticlockwise)`画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。\n`quadraticCurveTo(cp1x, cp1y, x, y)`绘制贝塞尔曲线，cp1x,cp1y为控制点，x,y为结束点。\n`rect(x, y, width, height)`绘制一个左上角坐标为（x,y），宽高为width以及height的矩形。\n`save()restore()`save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。\n###  推荐基于canvas小游戏\n 基于canvas的[小游戏](https://github.com/white-shirt/HTML5-Game.git)\n\n###  详细canvas API\nMDN[canvas API](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)\n","source":"_posts/canvas学习笔记.md","raw":"---\ntitle: canvas学习笔记\ndate: 2017-05-03 13:49:46\ncategories: js\ntags: canvas\n---\n\n###   简单例子\n```javascript\n<html>\n <head>\n  <script type=\"application/javascript\">\n    function draw() {\n      var canvas = document.getElementById(\"canvas\");\n      if (canvas.getContext) {\n        var ctx = canvas.getContext(\"2d\");\n\n        ctx.fillStyle = \"rgb(200,0,0)\";\n        ctx.fillRect (10, 10, 55, 50);\n\n        ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";\n        ctx.fillRect (30, 30, 55, 50);\n      }\n    }\n  </script>\n </head>\n <body onload=\"draw();\">\n   <canvas id=\"canvas\" width=\"150\" height=\"150\"></canvas>\n </body>\n</html>\n```\n### 直接可以绘制图形的方法\n`fillRect(x, y, width, height) `绘制一个填充的矩形\n`strokeRect(x, y, width, height)`绘制一个矩形的边框\n`clearRect(x, y, width, height)`清除指定矩形区域，让清除部分完全透明。\n\n###  绘制基本图形，文本，图片，变换\n`translate(x, y)`translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，如右图所示。\n`rotate(angle)`这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。\n`scale(x, y)`scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。\n`fillStyle = color`设置图形的填充颜色。\n`strokeStyle = color`设置图形轮廓的颜色。\n`globalAlpha = transparencyValue`这个属性影响到 canvas 里所有图形的透明度，有效的值范围是 0.0 （完全透明）到 1.0（完全不透明），默认是 1.0。\n`lineWidth = value`设置线条宽度。\n`lineCap = type`设置线条末端样式。\n`shadowOffsetX = float` shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。\n`shadowOffsetY = float` shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。\n`shadowBlur = float` shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。\n`shadowColor = color` shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。\n\n###  绘制路径\n`beginPath()`新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。\n`closePath()`闭合路径之后图形绘制命令又重新指向到上下文中。当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。  \n`stroke()`通过线条来绘制图形轮廓。\n`fill()`通过填充路径的内容区域生成实心的图形\n`moveTo(x, y)`将笔触移动到指定的坐标x以及y上。或者你可以想象一下在纸上作业，一支钢笔或者铅笔的笔尖从一个点到另一个点的移动过程。\n`lineTo(x, y)`绘制一条从当前位置到指定x以及y位置的直线。\n`arc(x, y, radius, startAngle, endAngle, anticlockwise)`画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。\n`quadraticCurveTo(cp1x, cp1y, x, y)`绘制贝塞尔曲线，cp1x,cp1y为控制点，x,y为结束点。\n`rect(x, y, width, height)`绘制一个左上角坐标为（x,y），宽高为width以及height的矩形。\n`save()restore()`save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。\n###  推荐基于canvas小游戏\n 基于canvas的[小游戏](https://github.com/white-shirt/HTML5-Game.git)\n\n###  详细canvas API\nMDN[canvas API](https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API)\n","slug":"canvas学习笔记","published":1,"updated":"2017-05-03T10:05:01.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk2h0002jsvcs0rleltw","content":"<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\"> &lt;head&gt;</div><div class=\"line\">  &lt;script type=<span class=\"string\">\"application/javascript\"</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> (canvas.getContext) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</div><div class=\"line\"></div><div class=\"line\">        ctx.fillStyle = <span class=\"string\">\"rgb(200,0,0)\"</span>;</div><div class=\"line\">        ctx.fillRect (<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">55</span>, <span class=\"number\">50</span>);</div><div class=\"line\"></div><div class=\"line\">        ctx.fillStyle = <span class=\"string\">\"rgba(0, 0, 200, 0.5)\"</span>;</div><div class=\"line\">        ctx.fillRect (<span class=\"number\">30</span>, <span class=\"number\">30</span>, <span class=\"number\">55</span>, <span class=\"number\">50</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &lt;<span class=\"regexp\">/script&gt;</span></div><div class=\"line\"><span class=\"regexp\"> &lt;/</span>head&gt;</div><div class=\"line\"> &lt;body onload=<span class=\"string\">\"draw();\"</span>&gt;</div><div class=\"line\">   &lt;canvas id=<span class=\"string\">\"canvas\"</span> width=<span class=\"string\">\"150\"</span> height=<span class=\"string\">\"150\"</span>&gt;&lt;/canvas&gt;</div><div class=\"line\"> &lt;<span class=\"regexp\">/body&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"直接可以绘制图形的方法\"><a href=\"#直接可以绘制图形的方法\" class=\"headerlink\" title=\"直接可以绘制图形的方法\"></a>直接可以绘制图形的方法</h3><p><code>fillRect(x, y, width, height)</code>绘制一个填充的矩形<br><code>strokeRect(x, y, width, height)</code>绘制一个矩形的边框<br><code>clearRect(x, y, width, height)</code>清除指定矩形区域，让清除部分完全透明。</p>\n<h3 id=\"绘制基本图形，文本，图片，变换\"><a href=\"#绘制基本图形，文本，图片，变换\" class=\"headerlink\" title=\"绘制基本图形，文本，图片，变换\"></a>绘制基本图形，文本，图片，变换</h3><p><code>translate(x, y)</code>translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，如右图所示。<br><code>rotate(angle)</code>这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。<br><code>scale(x, y)</code>scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。<br><code>fillStyle = color</code>设置图形的填充颜色。<br><code>strokeStyle = color</code>设置图形轮廓的颜色。<br><code>globalAlpha = transparencyValue</code>这个属性影响到 canvas 里所有图形的透明度，有效的值范围是 0.0 （完全透明）到 1.0（完全不透明），默认是 1.0。<br><code>lineWidth = value</code>设置线条宽度。<br><code>lineCap = type</code>设置线条末端样式。<br><code>shadowOffsetX = float</code> shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。<br><code>shadowOffsetY = float</code> shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。<br><code>shadowBlur = float</code> shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。<br><code>shadowColor = color</code> shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。</p>\n<h3 id=\"绘制路径\"><a href=\"#绘制路径\" class=\"headerlink\" title=\"绘制路径\"></a>绘制路径</h3><p><code>beginPath()</code>新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。<br><code>closePath()</code>闭合路径之后图形绘制命令又重新指向到上下文中。当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。<br><code>stroke()</code>通过线条来绘制图形轮廓。<br><code>fill()</code>通过填充路径的内容区域生成实心的图形<br><code>moveTo(x, y)</code>将笔触移动到指定的坐标x以及y上。或者你可以想象一下在纸上作业，一支钢笔或者铅笔的笔尖从一个点到另一个点的移动过程。<br><code>lineTo(x, y)</code>绘制一条从当前位置到指定x以及y位置的直线。<br><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code>画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。<br><code>quadraticCurveTo(cp1x, cp1y, x, y)</code>绘制贝塞尔曲线，cp1x,cp1y为控制点，x,y为结束点。<br><code>rect(x, y, width, height)</code>绘制一个左上角坐标为（x,y），宽高为width以及height的矩形。<br><code>save()restore()</code>save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。</p>\n<h3 id=\"推荐基于canvas小游戏\"><a href=\"#推荐基于canvas小游戏\" class=\"headerlink\" title=\"推荐基于canvas小游戏\"></a>推荐基于canvas小游戏</h3><p> 基于canvas的<a href=\"https://github.com/white-shirt/HTML5-Game.git\" target=\"_blank\" rel=\"external\">小游戏</a></p>\n<h3 id=\"详细canvas-API\"><a href=\"#详细canvas-API\" class=\"headerlink\" title=\"详细canvas API\"></a>详细canvas API</h3><p>MDN<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\" target=\"_blank\" rel=\"external\">canvas API</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"简单例子\"><a href=\"#简单例子\" class=\"headerlink\" title=\"简单例子\"></a>简单例子</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\"> &lt;head&gt;</div><div class=\"line\">  &lt;script type=<span class=\"string\">\"application/javascript\"</span>&gt;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">draw</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> canvas = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"canvas\"</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span> (canvas.getContext) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ctx = canvas.getContext(<span class=\"string\">\"2d\"</span>);</div><div class=\"line\"></div><div class=\"line\">        ctx.fillStyle = <span class=\"string\">\"rgb(200,0,0)\"</span>;</div><div class=\"line\">        ctx.fillRect (<span class=\"number\">10</span>, <span class=\"number\">10</span>, <span class=\"number\">55</span>, <span class=\"number\">50</span>);</div><div class=\"line\"></div><div class=\"line\">        ctx.fillStyle = <span class=\"string\">\"rgba(0, 0, 200, 0.5)\"</span>;</div><div class=\"line\">        ctx.fillRect (<span class=\"number\">30</span>, <span class=\"number\">30</span>, <span class=\"number\">55</span>, <span class=\"number\">50</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &lt;<span class=\"regexp\">/script&gt;</span></div><div class=\"line\"><span class=\"regexp\"> &lt;/</span>head&gt;</div><div class=\"line\"> &lt;body onload=<span class=\"string\">\"draw();\"</span>&gt;</div><div class=\"line\">   &lt;canvas id=<span class=\"string\">\"canvas\"</span> width=<span class=\"string\">\"150\"</span> height=<span class=\"string\">\"150\"</span>&gt;&lt;/canvas&gt;</div><div class=\"line\"> &lt;<span class=\"regexp\">/body&gt;</span></div><div class=\"line\"><span class=\"regexp\">&lt;/</span>html&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"直接可以绘制图形的方法\"><a href=\"#直接可以绘制图形的方法\" class=\"headerlink\" title=\"直接可以绘制图形的方法\"></a>直接可以绘制图形的方法</h3><p><code>fillRect(x, y, width, height)</code>绘制一个填充的矩形<br><code>strokeRect(x, y, width, height)</code>绘制一个矩形的边框<br><code>clearRect(x, y, width, height)</code>清除指定矩形区域，让清除部分完全透明。</p>\n<h3 id=\"绘制基本图形，文本，图片，变换\"><a href=\"#绘制基本图形，文本，图片，变换\" class=\"headerlink\" title=\"绘制基本图形，文本，图片，变换\"></a>绘制基本图形，文本，图片，变换</h3><p><code>translate(x, y)</code>translate 方法接受两个参数。x 是左右偏移量，y 是上下偏移量，如右图所示。<br><code>rotate(angle)</code>这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。<br><code>scale(x, y)</code>scale 方法接受两个参数。x,y 分别是横轴和纵轴的缩放因子，它们都必须是正值。值比 1.0 小表示缩小，比 1.0 大则表示放大，值为 1.0 时什么效果都没有。<br><code>fillStyle = color</code>设置图形的填充颜色。<br><code>strokeStyle = color</code>设置图形轮廓的颜色。<br><code>globalAlpha = transparencyValue</code>这个属性影响到 canvas 里所有图形的透明度，有效的值范围是 0.0 （完全透明）到 1.0（完全不透明），默认是 1.0。<br><code>lineWidth = value</code>设置线条宽度。<br><code>lineCap = type</code>设置线条末端样式。<br><code>shadowOffsetX = float</code> shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。<br><code>shadowOffsetY = float</code> shadowOffsetX 和 shadowOffsetY 用来设定阴影在 X 和 Y 轴的延伸距离，它们是不受变换矩阵所影响的。负值表示阴影会往上或左延伸，正值则表示会往下或右延伸，它们默认都为 0。<br><code>shadowBlur = float</code> shadowBlur 用于设定阴影的模糊程度，其数值并不跟像素数量挂钩，也不受变换矩阵的影响，默认为 0。<br><code>shadowColor = color</code> shadowColor 是标准的 CSS 颜色值，用于设定阴影颜色效果，默认是全透明的黑色。</p>\n<h3 id=\"绘制路径\"><a href=\"#绘制路径\" class=\"headerlink\" title=\"绘制路径\"></a>绘制路径</h3><p><code>beginPath()</code>新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。<br><code>closePath()</code>闭合路径之后图形绘制命令又重新指向到上下文中。当你调用fill()函数时，所有没有闭合的形状都会自动闭合，所以你不需要调用closePath()函数。但是调用stroke()时不会自动闭合。<br><code>stroke()</code>通过线条来绘制图形轮廓。<br><code>fill()</code>通过填充路径的内容区域生成实心的图形<br><code>moveTo(x, y)</code>将笔触移动到指定的坐标x以及y上。或者你可以想象一下在纸上作业，一支钢笔或者铅笔的笔尖从一个点到另一个点的移动过程。<br><code>lineTo(x, y)</code>绘制一条从当前位置到指定x以及y位置的直线。<br><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code>画一个以（x,y）为圆心的以radius为半径的圆弧（圆），从startAngle开始到endAngle结束，按照anticlockwise给定的方向（默认为顺时针）来生成。<br><code>quadraticCurveTo(cp1x, cp1y, x, y)</code>绘制贝塞尔曲线，cp1x,cp1y为控制点，x,y为结束点。<br><code>rect(x, y, width, height)</code>绘制一个左上角坐标为（x,y），宽高为width以及height的矩形。<br><code>save()restore()</code>save 和 restore 方法是用来保存和恢复 canvas 状态的，都没有参数。Canvas 的状态就是当前画面应用的所有样式和变形的一个快照。</p>\n<h3 id=\"推荐基于canvas小游戏\"><a href=\"#推荐基于canvas小游戏\" class=\"headerlink\" title=\"推荐基于canvas小游戏\"></a>推荐基于canvas小游戏</h3><p> 基于canvas的<a href=\"https://github.com/white-shirt/HTML5-Game.git\" target=\"_blank\" rel=\"external\">小游戏</a></p>\n<h3 id=\"详细canvas-API\"><a href=\"#详细canvas-API\" class=\"headerlink\" title=\"详细canvas API\"></a>详细canvas API</h3><p>MDN<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API\" target=\"_blank\" rel=\"external\">canvas API</a></p>\n"},{"title":"build-blog","date":"2017-05-03T02:49:56.000Z","type":"tags","_content":"\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n## Quick Start\n\n### 导入hexo\n\n``` bash\n$ npm install -g hexo-cli --registry=https://registry.npm.taobao.org\n```\n\n### 初始化项目\n\n``` bash\n$ hexo init\n```\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n\n// 报错:ERROR Deployer not found: github\nnpm install hexo-deployer-git --save\n\ndeploy:\n  type: git // 或者github\n  repository: git@github.com:lvSally/lvSally.github.io.git\n  branch: master\n```\n\n### Hexo的版本控制与持续集成\n[参考文章](https://formulahendry.github.io/2016/12/04/hexo-ci/#comments)\n思路：新建一个项目，每次代码更新的时候，通过CI生成新的github.io文件\n问题： 由于我使用next的主题文件，CI后的css、js/src、images、vendors文件夹全部删除了，我通过的是删除next文件提交，然后再添加的方法解决的，原因不太清楚，很神奇，哭..\n\n### 其它\n1 使用hexo new page tags/categories 创建分类或标签\n2 在themes _config.yml 控制主体显示\n3 themes -> _config.yml -> baidu_analytics 添加百度统计id可添加百度统计功能\n4 themes -> _config.yml -> avatar 设置头像\n5 [next第三方服务集成](http://theme-next.iissnan.com/third-party-services.html)\n6 [网易云跟帖](https://gentie.163.com/help.html) 悲剧的是类似`github.io`的子域名基本信息填写不能通过\n7 [Disqus](https://disqus.com),最终选择了Disqus，缺点是需要翻墙，使用Disqus比较简单，注册一个账号，在主题的设置文件中添加以下shortname即可。\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/build-blog.md","raw":"---\ntitle: build-blog\ndate: 2017-05-03 10:49:56\ncategories: 其它\ntype: \"tags\"\ntags:  [Hexo]\n---\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n\n## Quick Start\n\n### 导入hexo\n\n``` bash\n$ npm install -g hexo-cli --registry=https://registry.npm.taobao.org\n```\n\n### 初始化项目\n\n``` bash\n$ hexo init\n```\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n\n// 报错:ERROR Deployer not found: github\nnpm install hexo-deployer-git --save\n\ndeploy:\n  type: git // 或者github\n  repository: git@github.com:lvSally/lvSally.github.io.git\n  branch: master\n```\n\n### Hexo的版本控制与持续集成\n[参考文章](https://formulahendry.github.io/2016/12/04/hexo-ci/#comments)\n思路：新建一个项目，每次代码更新的时候，通过CI生成新的github.io文件\n问题： 由于我使用next的主题文件，CI后的css、js/src、images、vendors文件夹全部删除了，我通过的是删除next文件提交，然后再添加的方法解决的，原因不太清楚，很神奇，哭..\n\n### 其它\n1 使用hexo new page tags/categories 创建分类或标签\n2 在themes _config.yml 控制主体显示\n3 themes -> _config.yml -> baidu_analytics 添加百度统计id可添加百度统计功能\n4 themes -> _config.yml -> avatar 设置头像\n5 [next第三方服务集成](http://theme-next.iissnan.com/third-party-services.html)\n6 [网易云跟帖](https://gentie.163.com/help.html) 悲剧的是类似`github.io`的子域名基本信息填写不能通过\n7 [Disqus](https://disqus.com),最终选择了Disqus，缺点是需要翻墙，使用Disqus比较简单，注册一个账号，在主题的设置文件中添加以下shortname即可。\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"build-blog","published":1,"updated":"2017-10-09T08:32:15.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk370006jsvc0l5nxexh","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"导入hexo\"><a href=\"#导入hexo\" class=\"headerlink\" title=\"导入hexo\"></a>导入hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div><div class=\"line\"></div><div class=\"line\">// 报错:ERROR Deployer not found: github</div><div class=\"line\">npm install hexo-deployer-git --save</div><div class=\"line\"></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git // 或者github</div><div class=\"line\">  repository: git@github.com:lvSally/lvSally.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<h3 id=\"Hexo的版本控制与持续集成\"><a href=\"#Hexo的版本控制与持续集成\" class=\"headerlink\" title=\"Hexo的版本控制与持续集成\"></a>Hexo的版本控制与持续集成</h3><p><a href=\"https://formulahendry.github.io/2016/12/04/hexo-ci/#comments\" target=\"_blank\" rel=\"external\">参考文章</a><br>思路：新建一个项目，每次代码更新的时候，通过CI生成新的github.io文件<br>问题： 由于我使用next的主题文件，CI后的css、js/src、images、vendors文件夹全部删除了，我通过的是删除next文件提交，然后再添加的方法解决的，原因不太清楚，很神奇，哭..</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>1 使用hexo new page tags/categories 创建分类或标签<br>2 在themes _config.yml 控制主体显示<br>3 themes -&gt; _config.yml -&gt; baidu_analytics 添加百度统计id可添加百度统计功能<br>4 themes -&gt; _config.yml -&gt; avatar 设置头像<br>5 <a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"external\">next第三方服务集成</a><br>6 <a href=\"https://gentie.163.com/help.html\" target=\"_blank\" rel=\"external\">网易云跟帖</a> 悲剧的是类似<code>github.io</code>的子域名基本信息填写不能通过<br>7 <a href=\"https://disqus.com\" target=\"_blank\" rel=\"external\">Disqus</a>,最终选择了Disqus，缺点是需要翻墙，使用Disqus比较简单，注册一个账号，在主题的设置文件中添加以下shortname即可。<br>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"导入hexo\"><a href=\"#导入hexo\" class=\"headerlink\" title=\"导入hexo\"></a>导入hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install -g hexo-cli --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>\n<h3 id=\"初始化项目\"><a href=\"#初始化项目\" class=\"headerlink\" title=\"初始化项目\"></a>初始化项目</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure>\n<h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div><div class=\"line\"></div><div class=\"line\">// 报错:ERROR Deployer not found: github</div><div class=\"line\">npm install hexo-deployer-git --save</div><div class=\"line\"></div><div class=\"line\">deploy:</div><div class=\"line\">  <span class=\"built_in\">type</span>: git // 或者github</div><div class=\"line\">  repository: git@github.com:lvSally/lvSally.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure>\n<h3 id=\"Hexo的版本控制与持续集成\"><a href=\"#Hexo的版本控制与持续集成\" class=\"headerlink\" title=\"Hexo的版本控制与持续集成\"></a>Hexo的版本控制与持续集成</h3><p><a href=\"https://formulahendry.github.io/2016/12/04/hexo-ci/#comments\" target=\"_blank\" rel=\"external\">参考文章</a><br>思路：新建一个项目，每次代码更新的时候，通过CI生成新的github.io文件<br>问题： 由于我使用next的主题文件，CI后的css、js/src、images、vendors文件夹全部删除了，我通过的是删除next文件提交，然后再添加的方法解决的，原因不太清楚，很神奇，哭..</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>1 使用hexo new page tags/categories 创建分类或标签<br>2 在themes _config.yml 控制主体显示<br>3 themes -&gt; _config.yml -&gt; baidu_analytics 添加百度统计id可添加百度统计功能<br>4 themes -&gt; _config.yml -&gt; avatar 设置头像<br>5 <a href=\"http://theme-next.iissnan.com/third-party-services.html\" target=\"_blank\" rel=\"external\">next第三方服务集成</a><br>6 <a href=\"https://gentie.163.com/help.html\" target=\"_blank\" rel=\"external\">网易云跟帖</a> 悲剧的是类似<code>github.io</code>的子域名基本信息填写不能通过<br>7 <a href=\"https://disqus.com\" target=\"_blank\" rel=\"external\">Disqus</a>,最终选择了Disqus，缺点是需要翻墙，使用Disqus比较简单，注册一个账号，在主题的设置文件中添加以下shortname即可。<br>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n"},{"title":"css选择器","date":"2017-09-29T02:45:58.000Z","_content":"\n> 总结选择器感觉就是像在记流水账，，，不过css的选择器功能确实挺强大的，有些匹配和正则的匹配方式是一致的，有些是css3新增的，旧版本的浏览器可能会不支持，可以通过caniuse网站来查看兼容性。\n\n![](/img/选择器.png)\n[详细脑图](http://naotu.baidu.com/file/cb535512773b5dcc4ecc10ddcd92c0d3)\n\n## css历史\n  >css1 1996\n  css2 1992\n  css2.1 2007\n  css3 2001-.\n\n## 外部文件引入方式\n `<link rel=\"stylesheet\" href=\"css.css\"></link>`\n\n## 浏览器私有属性\n  >chrome，safari\n  `-webkit-`\n  firefox\n  `-moz-`\n  IE\n  `-ms-`\n  opera\n  `-o-`\n\n## 语法\n  注释\n  `/**/`\n  选择器 {\n    属性声明\n  }\n\n  属性声明=属性名：属性值\n\n  属性值语法：\n  margin:[<length>|<percentage>|auto]{1,4}\n         基本元素 组合符号 数量符号\n\n  基本类型\n  关键字, 类型, 符号（/,）, inherit, initial\n\n 组合符号\n  空格（必填，顺序有关）\n  &&（必填，顺序无关，）\n  ||（至少出现一个）\n  | （只能出现一个）\n  [] 分组\n\n 数量符号\n  无\n  `+` 可以出现一次货多次\n  `?` 可出现也可以不出现\n  `{2,4}`\n  `*`\n  `#` 一次或者多次\n\n  规则语法\n  @标示符 xxx;\n  @ 标示符 {}\n\n  规则\n  @media\n  @keyframes\n  @font-face\n  @import\n\n## 选择器\n  ID选择器\n  类选择器\n  标签选择器\n  `*`通配符选择器\n\n  ### 属性选择器\n  ```\n  [attr]\n  [attr=\"val\"] 表示val中包含符号或者空格\n  [attr=val]  #nav{} == [id=nav]{}\n  [attr~=val] .sport{} == [class~=sports]{}，可用于除了class以为的其它属性\n  [attr|=val] 特定属性选择器，一般用于匹配属性lang的值\n  [attr^=val]\n  [attr$=val]\n  [attr*=val]\n  ```\n  ### 伪类选择器\n  ```\n  a:link\n  a:visited\n  a:hover\n  a:active\n  :enabled, disabled, checked\n  :only-child\n\n  :first-child\n  :last-child\n  :nth-child(even|odd)\n  :nth-child(n+1)\n  :nth-last-child(n+1)\n\n  dd:first-of-type{}(同上)\n\n  :empty\n  :root\n  :not eg: :not(p)选择非p元素\n  :target\n  :lang()\n  ```\n  ### 伪元素选择器\n  ```\n  (应用在元素内容的选择器)在css3中为了区别伪元素和伪类在前面添加::\n  ::first-letter\n  ::first-line\n  ::before (和content一起使用)\n  ::after\n  ::selection\n  ```\n\n  ### 组合选择器\n  ```\n  后代选择器\n  .main h2\n  子选择权\n  .main>h12\n  兄弟选择器\n  h2+p(获取前面为h2的一个p元素)\n  h2~p(获取前面为h2的所有兄弟)\n  ```\n  ### 选择器分组\n  `h1,h2,h3...`\n## css优先级\n  !important\n  a = 行内样式                       `1000`\n  b = ID选择器的数量                  `100`\n  c = 类、属性选择器的数量             `10`\n  d = 标签选择器和伪元素选择器的数据量   `1`\n\n## 兼容性测试网站\n  https://www.quirksmode.org/css/\n  http://caniuse.com/\n","source":"_posts/css选择器.md","raw":"---\ntitle: css选择器\ndate: 2017-09-29 10:45:58\ncategories: css\ntags: 选择器\n---\n\n> 总结选择器感觉就是像在记流水账，，，不过css的选择器功能确实挺强大的，有些匹配和正则的匹配方式是一致的，有些是css3新增的，旧版本的浏览器可能会不支持，可以通过caniuse网站来查看兼容性。\n\n![](/img/选择器.png)\n[详细脑图](http://naotu.baidu.com/file/cb535512773b5dcc4ecc10ddcd92c0d3)\n\n## css历史\n  >css1 1996\n  css2 1992\n  css2.1 2007\n  css3 2001-.\n\n## 外部文件引入方式\n `<link rel=\"stylesheet\" href=\"css.css\"></link>`\n\n## 浏览器私有属性\n  >chrome，safari\n  `-webkit-`\n  firefox\n  `-moz-`\n  IE\n  `-ms-`\n  opera\n  `-o-`\n\n## 语法\n  注释\n  `/**/`\n  选择器 {\n    属性声明\n  }\n\n  属性声明=属性名：属性值\n\n  属性值语法：\n  margin:[<length>|<percentage>|auto]{1,4}\n         基本元素 组合符号 数量符号\n\n  基本类型\n  关键字, 类型, 符号（/,）, inherit, initial\n\n 组合符号\n  空格（必填，顺序有关）\n  &&（必填，顺序无关，）\n  ||（至少出现一个）\n  | （只能出现一个）\n  [] 分组\n\n 数量符号\n  无\n  `+` 可以出现一次货多次\n  `?` 可出现也可以不出现\n  `{2,4}`\n  `*`\n  `#` 一次或者多次\n\n  规则语法\n  @标示符 xxx;\n  @ 标示符 {}\n\n  规则\n  @media\n  @keyframes\n  @font-face\n  @import\n\n## 选择器\n  ID选择器\n  类选择器\n  标签选择器\n  `*`通配符选择器\n\n  ### 属性选择器\n  ```\n  [attr]\n  [attr=\"val\"] 表示val中包含符号或者空格\n  [attr=val]  #nav{} == [id=nav]{}\n  [attr~=val] .sport{} == [class~=sports]{}，可用于除了class以为的其它属性\n  [attr|=val] 特定属性选择器，一般用于匹配属性lang的值\n  [attr^=val]\n  [attr$=val]\n  [attr*=val]\n  ```\n  ### 伪类选择器\n  ```\n  a:link\n  a:visited\n  a:hover\n  a:active\n  :enabled, disabled, checked\n  :only-child\n\n  :first-child\n  :last-child\n  :nth-child(even|odd)\n  :nth-child(n+1)\n  :nth-last-child(n+1)\n\n  dd:first-of-type{}(同上)\n\n  :empty\n  :root\n  :not eg: :not(p)选择非p元素\n  :target\n  :lang()\n  ```\n  ### 伪元素选择器\n  ```\n  (应用在元素内容的选择器)在css3中为了区别伪元素和伪类在前面添加::\n  ::first-letter\n  ::first-line\n  ::before (和content一起使用)\n  ::after\n  ::selection\n  ```\n\n  ### 组合选择器\n  ```\n  后代选择器\n  .main h2\n  子选择权\n  .main>h12\n  兄弟选择器\n  h2+p(获取前面为h2的一个p元素)\n  h2~p(获取前面为h2的所有兄弟)\n  ```\n  ### 选择器分组\n  `h1,h2,h3...`\n## css优先级\n  !important\n  a = 行内样式                       `1000`\n  b = ID选择器的数量                  `100`\n  c = 类、属性选择器的数量             `10`\n  d = 标签选择器和伪元素选择器的数据量   `1`\n\n## 兼容性测试网站\n  https://www.quirksmode.org/css/\n  http://caniuse.com/\n","slug":"css选择器","published":1,"updated":"2017-09-29T03:43:01.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk3d0007jsvcke6o19rl","content":"<blockquote>\n<p>总结选择器感觉就是像在记流水账，，，不过css的选择器功能确实挺强大的，有些匹配和正则的匹配方式是一致的，有些是css3新增的，旧版本的浏览器可能会不支持，可以通过caniuse网站来查看兼容性。</p>\n</blockquote>\n<p><img src=\"/img/选择器.png\" alt=\"\"><br><a href=\"http://naotu.baidu.com/file/cb535512773b5dcc4ecc10ddcd92c0d3\" target=\"_blank\" rel=\"external\">详细脑图</a></p>\n<h2 id=\"css历史\"><a href=\"#css历史\" class=\"headerlink\" title=\"css历史\"></a>css历史</h2><blockquote>\n<p>css1 1996<br>  css2 1992<br>  css2.1 2007<br>  css3 2001-.</p>\n</blockquote>\n<h2 id=\"外部文件引入方式\"><a href=\"#外部文件引入方式\" class=\"headerlink\" title=\"外部文件引入方式\"></a>外部文件引入方式</h2><p> <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css.css&quot;&gt;&lt;/link&gt;</code></p>\n<h2 id=\"浏览器私有属性\"><a href=\"#浏览器私有属性\" class=\"headerlink\" title=\"浏览器私有属性\"></a>浏览器私有属性</h2><blockquote>\n<p>chrome，safari<br>  <code>-webkit-</code><br>  firefox<br>  <code>-moz-</code><br>  IE<br>  <code>-ms-</code><br>  opera<br>  <code>-o-</code></p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>  注释<br>  <code>/**/</code><br>  选择器 {<br>    属性声明<br>  }</p>\n<p>  属性声明=属性名：属性值</p>\n<p>  属性值语法：<br>  margin:[<length>|<percentage>|auto]{1,4}<br>         基本元素 组合符号 数量符号</percentage></length></p>\n<p>  基本类型<br>  关键字, 类型, 符号（/,）, inherit, initial</p>\n<p> 组合符号<br>  空格（必填，顺序有关）<br>  &amp;&amp;（必填，顺序无关，）<br>  ||（至少出现一个）<br>  | （只能出现一个）<br>  [] 分组</p>\n<p> 数量符号<br>  无<br>  <code>+</code> 可以出现一次货多次<br>  <code>?</code> 可出现也可以不出现<br>  <code>{2,4}</code><br>  <code>*</code><br>  <code>#</code> 一次或者多次</p>\n<p>  规则语法<br>  @标示符 xxx;<br>  @ 标示符 {}</p>\n<p>  规则<br>  @media<br>  @keyframes<br>  @font-face<br>  @import</p>\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><p>  ID选择器<br>  类选择器<br>  标签选择器<br>  <code>*</code>通配符选择器</p>\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[attr]</div><div class=\"line\">[attr=&quot;val&quot;] 表示val中包含符号或者空格</div><div class=\"line\">[attr=val]  #nav&#123;&#125; == [id=nav]&#123;&#125;</div><div class=\"line\">[attr~=val] .sport&#123;&#125; == [class~=sports]&#123;&#125;，可用于除了class以为的其它属性</div><div class=\"line\">[attr|=val] 特定属性选择器，一般用于匹配属性lang的值</div><div class=\"line\">[attr^=val]</div><div class=\"line\">[attr$=val]</div><div class=\"line\">[attr*=val]</div></pre></td></tr></table></figure>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">a:link</div><div class=\"line\">a:visited</div><div class=\"line\">a:hover</div><div class=\"line\">a:active</div><div class=\"line\">:enabled, disabled, checked</div><div class=\"line\">:only-child</div><div class=\"line\"></div><div class=\"line\">:first-child</div><div class=\"line\">:last-child</div><div class=\"line\">:nth-child(even|odd)</div><div class=\"line\">:nth-child(n+1)</div><div class=\"line\">:nth-last-child(n+1)</div><div class=\"line\"></div><div class=\"line\">dd:first-of-type&#123;&#125;(同上)</div><div class=\"line\"></div><div class=\"line\">:empty</div><div class=\"line\">:root</div><div class=\"line\">:not eg: :not(p)选择非p元素</div><div class=\"line\">:target</div><div class=\"line\">:lang()</div></pre></td></tr></table></figure>\n<h3 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(应用在元素内容的选择器)在css3中为了区别伪元素和伪类在前面添加::</div><div class=\"line\">::first-letter</div><div class=\"line\">::first-line</div><div class=\"line\">::before (和content一起使用)</div><div class=\"line\">::after</div><div class=\"line\">::selection</div></pre></td></tr></table></figure>\n<h3 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">后代选择器</div><div class=\"line\">.main h2</div><div class=\"line\">子选择权</div><div class=\"line\">.main&gt;h12</div><div class=\"line\">兄弟选择器</div><div class=\"line\">h2+p(获取前面为h2的一个p元素)</div><div class=\"line\">h2~p(获取前面为h2的所有兄弟)</div></pre></td></tr></table></figure>\n<h3 id=\"选择器分组\"><a href=\"#选择器分组\" class=\"headerlink\" title=\"选择器分组\"></a>选择器分组</h3><p>  <code>h1,h2,h3...</code></p>\n<h2 id=\"css优先级\"><a href=\"#css优先级\" class=\"headerlink\" title=\"css优先级\"></a>css优先级</h2><p>  !important<br>  a = 行内样式                       <code>1000</code><br>  b = ID选择器的数量                  <code>100</code><br>  c = 类、属性选择器的数量             <code>10</code><br>  d = 标签选择器和伪元素选择器的数据量   <code>1</code></p>\n<h2 id=\"兼容性测试网站\"><a href=\"#兼容性测试网站\" class=\"headerlink\" title=\"兼容性测试网站\"></a>兼容性测试网站</h2><p>  <a href=\"https://www.quirksmode.org/css/\" target=\"_blank\" rel=\"external\">https://www.quirksmode.org/css/</a><br>  <a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"external\">http://caniuse.com/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>总结选择器感觉就是像在记流水账，，，不过css的选择器功能确实挺强大的，有些匹配和正则的匹配方式是一致的，有些是css3新增的，旧版本的浏览器可能会不支持，可以通过caniuse网站来查看兼容性。</p>\n</blockquote>\n<p><img src=\"/img/选择器.png\" alt=\"\"><br><a href=\"http://naotu.baidu.com/file/cb535512773b5dcc4ecc10ddcd92c0d3\" target=\"_blank\" rel=\"external\">详细脑图</a></p>\n<h2 id=\"css历史\"><a href=\"#css历史\" class=\"headerlink\" title=\"css历史\"></a>css历史</h2><blockquote>\n<p>css1 1996<br>  css2 1992<br>  css2.1 2007<br>  css3 2001-.</p>\n</blockquote>\n<h2 id=\"外部文件引入方式\"><a href=\"#外部文件引入方式\" class=\"headerlink\" title=\"外部文件引入方式\"></a>外部文件引入方式</h2><p> <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css.css&quot;&gt;&lt;/link&gt;</code></p>\n<h2 id=\"浏览器私有属性\"><a href=\"#浏览器私有属性\" class=\"headerlink\" title=\"浏览器私有属性\"></a>浏览器私有属性</h2><blockquote>\n<p>chrome，safari<br>  <code>-webkit-</code><br>  firefox<br>  <code>-moz-</code><br>  IE<br>  <code>-ms-</code><br>  opera<br>  <code>-o-</code></p>\n</blockquote>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>  注释<br>  <code>/**/</code><br>  选择器 {<br>    属性声明<br>  }</p>\n<p>  属性声明=属性名：属性值</p>\n<p>  属性值语法：<br>  margin:[<length>|<percentage>|auto]{1,4}<br>         基本元素 组合符号 数量符号</percentage></length></p>\n<p>  基本类型<br>  关键字, 类型, 符号（/,）, inherit, initial</p>\n<p> 组合符号<br>  空格（必填，顺序有关）<br>  &amp;&amp;（必填，顺序无关，）<br>  ||（至少出现一个）<br>  | （只能出现一个）<br>  [] 分组</p>\n<p> 数量符号<br>  无<br>  <code>+</code> 可以出现一次货多次<br>  <code>?</code> 可出现也可以不出现<br>  <code>{2,4}</code><br>  <code>*</code><br>  <code>#</code> 一次或者多次</p>\n<p>  规则语法<br>  @标示符 xxx;<br>  @ 标示符 {}</p>\n<p>  规则<br>  @media<br>  @keyframes<br>  @font-face<br>  @import</p>\n<h2 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h2><p>  ID选择器<br>  类选择器<br>  标签选择器<br>  <code>*</code>通配符选择器</p>\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">[attr]</div><div class=\"line\">[attr=&quot;val&quot;] 表示val中包含符号或者空格</div><div class=\"line\">[attr=val]  #nav&#123;&#125; == [id=nav]&#123;&#125;</div><div class=\"line\">[attr~=val] .sport&#123;&#125; == [class~=sports]&#123;&#125;，可用于除了class以为的其它属性</div><div class=\"line\">[attr|=val] 特定属性选择器，一般用于匹配属性lang的值</div><div class=\"line\">[attr^=val]</div><div class=\"line\">[attr$=val]</div><div class=\"line\">[attr*=val]</div></pre></td></tr></table></figure>\n<h3 id=\"伪类选择器\"><a href=\"#伪类选择器\" class=\"headerlink\" title=\"伪类选择器\"></a>伪类选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">a:link</div><div class=\"line\">a:visited</div><div class=\"line\">a:hover</div><div class=\"line\">a:active</div><div class=\"line\">:enabled, disabled, checked</div><div class=\"line\">:only-child</div><div class=\"line\"></div><div class=\"line\">:first-child</div><div class=\"line\">:last-child</div><div class=\"line\">:nth-child(even|odd)</div><div class=\"line\">:nth-child(n+1)</div><div class=\"line\">:nth-last-child(n+1)</div><div class=\"line\"></div><div class=\"line\">dd:first-of-type&#123;&#125;(同上)</div><div class=\"line\"></div><div class=\"line\">:empty</div><div class=\"line\">:root</div><div class=\"line\">:not eg: :not(p)选择非p元素</div><div class=\"line\">:target</div><div class=\"line\">:lang()</div></pre></td></tr></table></figure>\n<h3 id=\"伪元素选择器\"><a href=\"#伪元素选择器\" class=\"headerlink\" title=\"伪元素选择器\"></a>伪元素选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(应用在元素内容的选择器)在css3中为了区别伪元素和伪类在前面添加::</div><div class=\"line\">::first-letter</div><div class=\"line\">::first-line</div><div class=\"line\">::before (和content一起使用)</div><div class=\"line\">::after</div><div class=\"line\">::selection</div></pre></td></tr></table></figure>\n<h3 id=\"组合选择器\"><a href=\"#组合选择器\" class=\"headerlink\" title=\"组合选择器\"></a>组合选择器</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">后代选择器</div><div class=\"line\">.main h2</div><div class=\"line\">子选择权</div><div class=\"line\">.main&gt;h12</div><div class=\"line\">兄弟选择器</div><div class=\"line\">h2+p(获取前面为h2的一个p元素)</div><div class=\"line\">h2~p(获取前面为h2的所有兄弟)</div></pre></td></tr></table></figure>\n<h3 id=\"选择器分组\"><a href=\"#选择器分组\" class=\"headerlink\" title=\"选择器分组\"></a>选择器分组</h3><p>  <code>h1,h2,h3...</code></p>\n<h2 id=\"css优先级\"><a href=\"#css优先级\" class=\"headerlink\" title=\"css优先级\"></a>css优先级</h2><p>  !important<br>  a = 行内样式                       <code>1000</code><br>  b = ID选择器的数量                  <code>100</code><br>  c = 类、属性选择器的数量             <code>10</code><br>  d = 标签选择器和伪元素选择器的数据量   <code>1</code></p>\n<h2 id=\"兼容性测试网站\"><a href=\"#兼容性测试网站\" class=\"headerlink\" title=\"兼容性测试网站\"></a>兼容性测试网站</h2><p>  <a href=\"https://www.quirksmode.org/css/\" target=\"_blank\" rel=\"external\">https://www.quirksmode.org/css/</a><br>  <a href=\"http://caniuse.com/\" target=\"_blank\" rel=\"external\">http://caniuse.com/</a></p>\n"},{"title":"es6 函数总结","date":"2017-10-07T08:55:53.000Z","_content":"\n>es6增加了很多语法糖，比如增加了一些方便判断的属性，写法上更加简单了\n\n## 函数形参的默认值\n  形参默认值，即定义函数的时候可以给形参赋值，赋值的内容可以是`常量`，`变量`，`表达式`\n  >需要注意的是：\n  1 默认值对arguments对象有影响\n  2 默认参数的临时死区\n\n## 处理无命名参数\n  由于javascript函数的参数想传多少就传多少，之前会使用`arguments`对象处理无命名，现在可以使用`...arg`方式替代\n  >注意\n  1 不定参后面不能有其他参数\n  2 不定参不能用于对象字面量setter中，因为setter中的参数有且只有一个\n  3 无论是否有不定参，arguments对象总是包含所有传入的参数\n\n## 增强function构造函数\n  function构造函数，几乎没有用过...\n  ```\n  // 使用案例\n  var add = new function('first', 'second=1', 'return first + second');\n  ```\n\n## 展开运算符\n  这是一个语法糖，嘿嘿，和不定参很像，不定参可以让各自独立的一些参数最终以数组的方式访问，展开运算的则是将数组打乱成各自独立的参数\n  ```\n  Math.max(25, 50, 70, 100);\n  // 同样写法\n  let val = [25, 50, 70, 100];\n  Math.max(...val);\n\n  也支持这种写法\n  Math.max(...val, 101);\n  ```\n\n## name属性\n  `Function.name`, 方便开发者追踪栈记录\n\n## 函数的多重用途\n  ### 用途\n  1 和`new`一起使用作为构造函数 内部调用[[Constructor]]\n  2 函数使用 内部调用[[Call]]\n  ### 判断函数是否作为构造函数在使用\n  es5\n  `p1 instanceof Person` 但是无法区分是通过Person.call()还是new关键字得到的实例\n  es6\n  通过new.target来判断\n  当调用函数的[[Constructor]]方法时，会为new.target赋值new操作符的目标，通常为new时候的`构造函数`，如果函数调用的是[[Call]],new.target则为`undefined`\n  // 通过new关键字创建\n  eg: typeof new.target !== \"undefined\"\n\n## 块级函数\n  es5严格模式下，在代码块中声明函数会报异常，而在es6中作为一个块级声明（`严格模式`），在作用域内可以使用，一旦代码块执行完毕后，函数也结束了，非严格模式下会被提升至外围函数或者全局作用域中\n  块级函数与let函数表达式类似，区别为块级函数会被提升至块的顶部，let 函数表达式不会\n\n## 箭头函数\n  箭头函数很像c#中的lambda表达式\n  >特点\n  1 没有 this, super, arguments, new.target的绑定，这些都由外围最近一层的非箭头函数决定\n  2 不能通过new关键字调用\n  3 没有原型\n  4 不可改变this的绑定\n  5 不支持arguments对象\n  6 不支持重复的命名参数\n\n  ### 语法\n  ```\n  let doNothing = () => {}; // 创建空函数\n  let getName = () => Nicholas;// 无参\n  let reflect = value => value;// 一个参数\n  let sum = (num1, num2) => num1+mum2; // 多个参数，一个表达式的函数体\n  let sum = (num1, num2) => { // 多个参数，由多个表达式组成的函数体\n    return num1+mum2;\n  };\n\n  // 如果返回结果是对象，需要将该字面量包在`()`中,这样是为了与函数体区分\n  let getTempItem = id => ({id: id, name: 'temp'});\n\n  //创建立即执行函数\n  let person = ((name) => {\n    return {\n      getName: function() {\n        return name;\n      }\n    }\n  })('Nicholas');\n  ```\n\n  ### 其它\n  1 简化sort,map,reduce的写法，eg: `values.sort((a, b) => a-b)`\n  2 在箭头函数上调用apply, call, bind和普通函数类似，只是箭头函数中的this不会受这些方法的影响\n\n## 尾调用优化\n  >系统引擎优化\n\n  ```\n  function a() {\n    return b(); // 尾调用\n  }\n  ```\n","source":"_posts/es6-函数总结.md","raw":"---\ntitle: es6 函数总结\ndate: 2017-10-07 16:55:53\ncategories: js\ntags: es6\n---\n\n>es6增加了很多语法糖，比如增加了一些方便判断的属性，写法上更加简单了\n\n## 函数形参的默认值\n  形参默认值，即定义函数的时候可以给形参赋值，赋值的内容可以是`常量`，`变量`，`表达式`\n  >需要注意的是：\n  1 默认值对arguments对象有影响\n  2 默认参数的临时死区\n\n## 处理无命名参数\n  由于javascript函数的参数想传多少就传多少，之前会使用`arguments`对象处理无命名，现在可以使用`...arg`方式替代\n  >注意\n  1 不定参后面不能有其他参数\n  2 不定参不能用于对象字面量setter中，因为setter中的参数有且只有一个\n  3 无论是否有不定参，arguments对象总是包含所有传入的参数\n\n## 增强function构造函数\n  function构造函数，几乎没有用过...\n  ```\n  // 使用案例\n  var add = new function('first', 'second=1', 'return first + second');\n  ```\n\n## 展开运算符\n  这是一个语法糖，嘿嘿，和不定参很像，不定参可以让各自独立的一些参数最终以数组的方式访问，展开运算的则是将数组打乱成各自独立的参数\n  ```\n  Math.max(25, 50, 70, 100);\n  // 同样写法\n  let val = [25, 50, 70, 100];\n  Math.max(...val);\n\n  也支持这种写法\n  Math.max(...val, 101);\n  ```\n\n## name属性\n  `Function.name`, 方便开发者追踪栈记录\n\n## 函数的多重用途\n  ### 用途\n  1 和`new`一起使用作为构造函数 内部调用[[Constructor]]\n  2 函数使用 内部调用[[Call]]\n  ### 判断函数是否作为构造函数在使用\n  es5\n  `p1 instanceof Person` 但是无法区分是通过Person.call()还是new关键字得到的实例\n  es6\n  通过new.target来判断\n  当调用函数的[[Constructor]]方法时，会为new.target赋值new操作符的目标，通常为new时候的`构造函数`，如果函数调用的是[[Call]],new.target则为`undefined`\n  // 通过new关键字创建\n  eg: typeof new.target !== \"undefined\"\n\n## 块级函数\n  es5严格模式下，在代码块中声明函数会报异常，而在es6中作为一个块级声明（`严格模式`），在作用域内可以使用，一旦代码块执行完毕后，函数也结束了，非严格模式下会被提升至外围函数或者全局作用域中\n  块级函数与let函数表达式类似，区别为块级函数会被提升至块的顶部，let 函数表达式不会\n\n## 箭头函数\n  箭头函数很像c#中的lambda表达式\n  >特点\n  1 没有 this, super, arguments, new.target的绑定，这些都由外围最近一层的非箭头函数决定\n  2 不能通过new关键字调用\n  3 没有原型\n  4 不可改变this的绑定\n  5 不支持arguments对象\n  6 不支持重复的命名参数\n\n  ### 语法\n  ```\n  let doNothing = () => {}; // 创建空函数\n  let getName = () => Nicholas;// 无参\n  let reflect = value => value;// 一个参数\n  let sum = (num1, num2) => num1+mum2; // 多个参数，一个表达式的函数体\n  let sum = (num1, num2) => { // 多个参数，由多个表达式组成的函数体\n    return num1+mum2;\n  };\n\n  // 如果返回结果是对象，需要将该字面量包在`()`中,这样是为了与函数体区分\n  let getTempItem = id => ({id: id, name: 'temp'});\n\n  //创建立即执行函数\n  let person = ((name) => {\n    return {\n      getName: function() {\n        return name;\n      }\n    }\n  })('Nicholas');\n  ```\n\n  ### 其它\n  1 简化sort,map,reduce的写法，eg: `values.sort((a, b) => a-b)`\n  2 在箭头函数上调用apply, call, bind和普通函数类似，只是箭头函数中的this不会受这些方法的影响\n\n## 尾调用优化\n  >系统引擎优化\n\n  ```\n  function a() {\n    return b(); // 尾调用\n  }\n  ```\n","slug":"es6-函数总结","published":1,"updated":"2017-10-07T11:02:52.418Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk3i0008jsvc428b2kbe","content":"<blockquote>\n<p>es6增加了很多语法糖，比如增加了一些方便判断的属性，写法上更加简单了</p>\n</blockquote>\n<h2 id=\"函数形参的默认值\"><a href=\"#函数形参的默认值\" class=\"headerlink\" title=\"函数形参的默认值\"></a>函数形参的默认值</h2><p>  形参默认值，即定义函数的时候可以给形参赋值，赋值的内容可以是<code>常量</code>，<code>变量</code>，<code>表达式</code></p>\n<blockquote>\n<p>需要注意的是：<br>  1 默认值对arguments对象有影响<br>  2 默认参数的临时死区</p>\n</blockquote>\n<h2 id=\"处理无命名参数\"><a href=\"#处理无命名参数\" class=\"headerlink\" title=\"处理无命名参数\"></a>处理无命名参数</h2><p>  由于javascript函数的参数想传多少就传多少，之前会使用<code>arguments</code>对象处理无命名，现在可以使用<code>...arg</code>方式替代</p>\n<blockquote>\n<p>注意<br>  1 不定参后面不能有其他参数<br>  2 不定参不能用于对象字面量setter中，因为setter中的参数有且只有一个<br>  3 无论是否有不定参，arguments对象总是包含所有传入的参数</p>\n</blockquote>\n<h2 id=\"增强function构造函数\"><a href=\"#增强function构造函数\" class=\"headerlink\" title=\"增强function构造函数\"></a>增强function构造函数</h2><p>  function构造函数，几乎没有用过…<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 使用案例</div><div class=\"line\">var add = new function(&apos;first&apos;, &apos;second=1&apos;, &apos;return first + second&apos;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h2><p>  这是一个语法糖，嘿嘿，和不定参很像，不定参可以让各自独立的一些参数最终以数组的方式访问，展开运算的则是将数组打乱成各自独立的参数<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Math.max(25, 50, 70, 100);</div><div class=\"line\">// 同样写法</div><div class=\"line\">let val = [25, 50, 70, 100];</div><div class=\"line\">Math.max(...val);</div><div class=\"line\"></div><div class=\"line\">也支持这种写法</div><div class=\"line\">Math.max(...val, 101);</div></pre></td></tr></table></figure></p>\n<h2 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a>name属性</h2><p>  <code>Function.name</code>, 方便开发者追踪栈记录</p>\n<h2 id=\"函数的多重用途\"><a href=\"#函数的多重用途\" class=\"headerlink\" title=\"函数的多重用途\"></a>函数的多重用途</h2><h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><p>  1 和<code>new</code>一起使用作为构造函数 内部调用[[Constructor]]<br>  2 函数使用 内部调用[[Call]]</p>\n<h3 id=\"判断函数是否作为构造函数在使用\"><a href=\"#判断函数是否作为构造函数在使用\" class=\"headerlink\" title=\"判断函数是否作为构造函数在使用\"></a>判断函数是否作为构造函数在使用</h3><p>  es5<br>  <code>p1 instanceof Person</code> 但是无法区分是通过Person.call()还是new关键字得到的实例<br>  es6<br>  通过new.target来判断<br>  当调用函数的[[Constructor]]方法时，会为new.target赋值new操作符的目标，通常为new时候的<code>构造函数</code>，如果函数调用的是[[Call]],new.target则为<code>undefined</code><br>  // 通过new关键字创建<br>  eg: typeof new.target !== “undefined”</p>\n<h2 id=\"块级函数\"><a href=\"#块级函数\" class=\"headerlink\" title=\"块级函数\"></a>块级函数</h2><p>  es5严格模式下，在代码块中声明函数会报异常，而在es6中作为一个块级声明（<code>严格模式</code>），在作用域内可以使用，一旦代码块执行完毕后，函数也结束了，非严格模式下会被提升至外围函数或者全局作用域中<br>  块级函数与let函数表达式类似，区别为块级函数会被提升至块的顶部，let 函数表达式不会</p>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>  箭头函数很像c#中的lambda表达式</p>\n<blockquote>\n<p>特点<br>  1 没有 this, super, arguments, new.target的绑定，这些都由外围最近一层的非箭头函数决定<br>  2 不能通过new关键字调用<br>  3 没有原型<br>  4 不可改变this的绑定<br>  5 不支持arguments对象<br>  6 不支持重复的命名参数</p>\n</blockquote>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">let doNothing = () =&gt; &#123;&#125;; // 创建空函数</div><div class=\"line\">let getName = () =&gt; Nicholas;// 无参</div><div class=\"line\">let reflect = value =&gt; value;// 一个参数</div><div class=\"line\">let sum = (num1, num2) =&gt; num1+mum2; // 多个参数，一个表达式的函数体</div><div class=\"line\">let sum = (num1, num2) =&gt; &#123; // 多个参数，由多个表达式组成的函数体</div><div class=\"line\">  return num1+mum2;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// 如果返回结果是对象，需要将该字面量包在`()`中,这样是为了与函数体区分</div><div class=\"line\">let getTempItem = id =&gt; (&#123;id: id, name: &apos;temp&apos;&#125;);</div><div class=\"line\"></div><div class=\"line\">//创建立即执行函数</div><div class=\"line\">let person = ((name) =&gt; &#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    getName: function() &#123;</div><div class=\"line\">      return name;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)(&apos;Nicholas&apos;);</div></pre></td></tr></table></figure>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>  1 简化sort,map,reduce的写法，eg: <code>values.sort((a, b) =&gt; a-b)</code><br>  2 在箭头函数上调用apply, call, bind和普通函数类似，只是箭头函数中的this不会受这些方法的影响</p>\n<h2 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h2><blockquote>\n<p>系统引擎优化</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a() &#123;</div><div class=\"line\">  return b(); // 尾调用</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>es6增加了很多语法糖，比如增加了一些方便判断的属性，写法上更加简单了</p>\n</blockquote>\n<h2 id=\"函数形参的默认值\"><a href=\"#函数形参的默认值\" class=\"headerlink\" title=\"函数形参的默认值\"></a>函数形参的默认值</h2><p>  形参默认值，即定义函数的时候可以给形参赋值，赋值的内容可以是<code>常量</code>，<code>变量</code>，<code>表达式</code></p>\n<blockquote>\n<p>需要注意的是：<br>  1 默认值对arguments对象有影响<br>  2 默认参数的临时死区</p>\n</blockquote>\n<h2 id=\"处理无命名参数\"><a href=\"#处理无命名参数\" class=\"headerlink\" title=\"处理无命名参数\"></a>处理无命名参数</h2><p>  由于javascript函数的参数想传多少就传多少，之前会使用<code>arguments</code>对象处理无命名，现在可以使用<code>...arg</code>方式替代</p>\n<blockquote>\n<p>注意<br>  1 不定参后面不能有其他参数<br>  2 不定参不能用于对象字面量setter中，因为setter中的参数有且只有一个<br>  3 无论是否有不定参，arguments对象总是包含所有传入的参数</p>\n</blockquote>\n<h2 id=\"增强function构造函数\"><a href=\"#增强function构造函数\" class=\"headerlink\" title=\"增强function构造函数\"></a>增强function构造函数</h2><p>  function构造函数，几乎没有用过…<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 使用案例</div><div class=\"line\">var add = new function(&apos;first&apos;, &apos;second=1&apos;, &apos;return first + second&apos;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"展开运算符\"><a href=\"#展开运算符\" class=\"headerlink\" title=\"展开运算符\"></a>展开运算符</h2><p>  这是一个语法糖，嘿嘿，和不定参很像，不定参可以让各自独立的一些参数最终以数组的方式访问，展开运算的则是将数组打乱成各自独立的参数<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Math.max(25, 50, 70, 100);</div><div class=\"line\">// 同样写法</div><div class=\"line\">let val = [25, 50, 70, 100];</div><div class=\"line\">Math.max(...val);</div><div class=\"line\"></div><div class=\"line\">也支持这种写法</div><div class=\"line\">Math.max(...val, 101);</div></pre></td></tr></table></figure></p>\n<h2 id=\"name属性\"><a href=\"#name属性\" class=\"headerlink\" title=\"name属性\"></a>name属性</h2><p>  <code>Function.name</code>, 方便开发者追踪栈记录</p>\n<h2 id=\"函数的多重用途\"><a href=\"#函数的多重用途\" class=\"headerlink\" title=\"函数的多重用途\"></a>函数的多重用途</h2><h3 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h3><p>  1 和<code>new</code>一起使用作为构造函数 内部调用[[Constructor]]<br>  2 函数使用 内部调用[[Call]]</p>\n<h3 id=\"判断函数是否作为构造函数在使用\"><a href=\"#判断函数是否作为构造函数在使用\" class=\"headerlink\" title=\"判断函数是否作为构造函数在使用\"></a>判断函数是否作为构造函数在使用</h3><p>  es5<br>  <code>p1 instanceof Person</code> 但是无法区分是通过Person.call()还是new关键字得到的实例<br>  es6<br>  通过new.target来判断<br>  当调用函数的[[Constructor]]方法时，会为new.target赋值new操作符的目标，通常为new时候的<code>构造函数</code>，如果函数调用的是[[Call]],new.target则为<code>undefined</code><br>  // 通过new关键字创建<br>  eg: typeof new.target !== “undefined”</p>\n<h2 id=\"块级函数\"><a href=\"#块级函数\" class=\"headerlink\" title=\"块级函数\"></a>块级函数</h2><p>  es5严格模式下，在代码块中声明函数会报异常，而在es6中作为一个块级声明（<code>严格模式</code>），在作用域内可以使用，一旦代码块执行完毕后，函数也结束了，非严格模式下会被提升至外围函数或者全局作用域中<br>  块级函数与let函数表达式类似，区别为块级函数会被提升至块的顶部，let 函数表达式不会</p>\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><p>  箭头函数很像c#中的lambda表达式</p>\n<blockquote>\n<p>特点<br>  1 没有 this, super, arguments, new.target的绑定，这些都由外围最近一层的非箭头函数决定<br>  2 不能通过new关键字调用<br>  3 没有原型<br>  4 不可改变this的绑定<br>  5 不支持arguments对象<br>  6 不支持重复的命名参数</p>\n</blockquote>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">let doNothing = () =&gt; &#123;&#125;; // 创建空函数</div><div class=\"line\">let getName = () =&gt; Nicholas;// 无参</div><div class=\"line\">let reflect = value =&gt; value;// 一个参数</div><div class=\"line\">let sum = (num1, num2) =&gt; num1+mum2; // 多个参数，一个表达式的函数体</div><div class=\"line\">let sum = (num1, num2) =&gt; &#123; // 多个参数，由多个表达式组成的函数体</div><div class=\"line\">  return num1+mum2;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// 如果返回结果是对象，需要将该字面量包在`()`中,这样是为了与函数体区分</div><div class=\"line\">let getTempItem = id =&gt; (&#123;id: id, name: &apos;temp&apos;&#125;);</div><div class=\"line\"></div><div class=\"line\">//创建立即执行函数</div><div class=\"line\">let person = ((name) =&gt; &#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    getName: function() &#123;</div><div class=\"line\">      return name;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)(&apos;Nicholas&apos;);</div></pre></td></tr></table></figure>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>  1 简化sort,map,reduce的写法，eg: <code>values.sort((a, b) =&gt; a-b)</code><br>  2 在箭头函数上调用apply, call, bind和普通函数类似，只是箭头函数中的this不会受这些方法的影响</p>\n<h2 id=\"尾调用优化\"><a href=\"#尾调用优化\" class=\"headerlink\" title=\"尾调用优化\"></a>尾调用优化</h2><blockquote>\n<p>系统引擎优化</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a() &#123;</div><div class=\"line\">  return b(); // 尾调用</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"promise学习","date":"2017-12-06T11:51:27.000Z","_content":"\n>学习promise刚开始是相当痛苦的，抱着`深入理解es6`这本书就开始看promise是个什么东西，先读了事件和回调，并不知道promise存在的意义，读到串联promise我就放弃了，感觉学习这个知识一点也不开心，学起来也很费力。直到有一天学超分享了Promise.All()的方法，好像一下就顿悟了，js这个脚本语言根本就不会存在多线程这种概念，由于我们可以自定义promise类型，在then()方法中可以异步去执行一些逻辑，才知道promise用处不仅仅是在ajax外面new一个promise。promise其实很牛逼。\n\n## 异步编程的几种情况\npromise的出现不是取代其他的异步编程写法，而是在一些情况下使用promise处理时可以方便一些。\n1 事件模式\n2 回调函数（ajax）\n3 定时器（setTimeout, setInterval）\n4 promise\n\n## promise的生命周期\npending->settled\nsettled包括Fulfilled和Rejected,对应then方法的then(resolve, reject);有些类似于ajax请求的过程，pending时并不知道什么时候会处理完成，当promise处理完成已有就会根据成功和失败执行相应的回调，不同的是，then方法可以链式调用，resolve, reject也可以返回一个promise对象。\n\n## promise的方法和原型方法\n// ====================创建未处理的Promise=====================\n```\n  // 由于每次返回的都是Promise对象因此可以链式的调用下面的两个方法\n  Promise.prototype.catch() // 传入两个方法，resolve, reject\n  Promise.prototype.then()\n\n  let p = new Promise(function(resolve, reject) {\n    //...\n    resolve(res);\n    reject(err);\n  });\n  p.then();\n  p.catch();\n```\n\n\n// ====================创建已处理的Promise=====================\n```\n  // 创建一个已处理的promise，使用promise表示一个已知值，就可以直接使用下面方法创建已解决的promise。\n  Promise.reject()\n  Promise.resolve()\n\n  //二者都是接受一个已知的值，并返回一个promise对象，因此该对象就可以链式调用了\n  let p = Promise.resolve(42);\n  p.then((res) => {\n    console.log(res); // 42\n  });\n\n  // Thenable 对象：有用then()方法，并接受resolve，reject作为参数的普通对象就叫做Thenable 对象\n  let thenable = {\n    then: function(resolve, reject){\n      resolve(42);\n    }\n  }\n  // 通过调用Promise.resolve(),返回Promise对象。如果想Promise.resolve()传入一个promise对象，怎不会有任何变化\n  let p = Promise.resolve(thenable);\n  p.then(function(res) {\n      console.log(res); // 42\n  });\n```\n\n//=======================链式调用promise===================\n```\n  1 链式中没有return值调用then返回undefined\n  2 链式中return值返回对应的值\n  3 链式中return值返回Promise对象，then调用return中的Promise\n  new Promise((res) => {\n    res(123);\n  }).then((res1) => {\n    console.log(res1);\n    if(res.error_no !== 0 ) {\n      return Promise.reject(); // return一个自定义的Promise.reject()，那么调用then()方法只能执行第二参数，实现一些特殊效果\n    }\n  }).then(() => {}, ()=>{});\n```\n\n//=======================相应多个promise===================\n```\n  Promise.all() // 返回一个数组，对应相应的返回值。表示有一个执行成功就执行resolve，否则reject\n  Promise.race() //返回一个值，表示有一个执行成功就执行resolve\n```\n","source":"_posts/promise学习.md","raw":"---\ntitle: promise学习\ndate: 2017-12-06 19:51:27\ncategories: js\ntags: js基础\n---\n\n>学习promise刚开始是相当痛苦的，抱着`深入理解es6`这本书就开始看promise是个什么东西，先读了事件和回调，并不知道promise存在的意义，读到串联promise我就放弃了，感觉学习这个知识一点也不开心，学起来也很费力。直到有一天学超分享了Promise.All()的方法，好像一下就顿悟了，js这个脚本语言根本就不会存在多线程这种概念，由于我们可以自定义promise类型，在then()方法中可以异步去执行一些逻辑，才知道promise用处不仅仅是在ajax外面new一个promise。promise其实很牛逼。\n\n## 异步编程的几种情况\npromise的出现不是取代其他的异步编程写法，而是在一些情况下使用promise处理时可以方便一些。\n1 事件模式\n2 回调函数（ajax）\n3 定时器（setTimeout, setInterval）\n4 promise\n\n## promise的生命周期\npending->settled\nsettled包括Fulfilled和Rejected,对应then方法的then(resolve, reject);有些类似于ajax请求的过程，pending时并不知道什么时候会处理完成，当promise处理完成已有就会根据成功和失败执行相应的回调，不同的是，then方法可以链式调用，resolve, reject也可以返回一个promise对象。\n\n## promise的方法和原型方法\n// ====================创建未处理的Promise=====================\n```\n  // 由于每次返回的都是Promise对象因此可以链式的调用下面的两个方法\n  Promise.prototype.catch() // 传入两个方法，resolve, reject\n  Promise.prototype.then()\n\n  let p = new Promise(function(resolve, reject) {\n    //...\n    resolve(res);\n    reject(err);\n  });\n  p.then();\n  p.catch();\n```\n\n\n// ====================创建已处理的Promise=====================\n```\n  // 创建一个已处理的promise，使用promise表示一个已知值，就可以直接使用下面方法创建已解决的promise。\n  Promise.reject()\n  Promise.resolve()\n\n  //二者都是接受一个已知的值，并返回一个promise对象，因此该对象就可以链式调用了\n  let p = Promise.resolve(42);\n  p.then((res) => {\n    console.log(res); // 42\n  });\n\n  // Thenable 对象：有用then()方法，并接受resolve，reject作为参数的普通对象就叫做Thenable 对象\n  let thenable = {\n    then: function(resolve, reject){\n      resolve(42);\n    }\n  }\n  // 通过调用Promise.resolve(),返回Promise对象。如果想Promise.resolve()传入一个promise对象，怎不会有任何变化\n  let p = Promise.resolve(thenable);\n  p.then(function(res) {\n      console.log(res); // 42\n  });\n```\n\n//=======================链式调用promise===================\n```\n  1 链式中没有return值调用then返回undefined\n  2 链式中return值返回对应的值\n  3 链式中return值返回Promise对象，then调用return中的Promise\n  new Promise((res) => {\n    res(123);\n  }).then((res1) => {\n    console.log(res1);\n    if(res.error_no !== 0 ) {\n      return Promise.reject(); // return一个自定义的Promise.reject()，那么调用then()方法只能执行第二参数，实现一些特殊效果\n    }\n  }).then(() => {}, ()=>{});\n```\n\n//=======================相应多个promise===================\n```\n  Promise.all() // 返回一个数组，对应相应的返回值。表示有一个执行成功就执行resolve，否则reject\n  Promise.race() //返回一个值，表示有一个执行成功就执行resolve\n```\n","slug":"promise学习","published":1,"updated":"2017-12-06T14:02:02.941Z","_id":"cjauztk40000cjsvcy0j0qo8t","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>学习promise刚开始是相当痛苦的，抱着<code>深入理解es6</code>这本书就开始看promise是个什么东西，先读了事件和回调，并不知道promise存在的意义，读到串联promise我就放弃了，感觉学习这个知识一点也不开心，学起来也很费力。直到有一天学超分享了Promise.All()的方法，好像一下就顿悟了，js这个脚本语言根本就不会存在多线程这种概念，由于我们可以自定义promise类型，在then()方法中可以异步去执行一些逻辑，才知道promise用处不仅仅是在ajax外面new一个promise。promise其实很牛逼。</p>\n</blockquote>\n<h2 id=\"异步编程的几种情况\"><a href=\"#异步编程的几种情况\" class=\"headerlink\" title=\"异步编程的几种情况\"></a>异步编程的几种情况</h2><p>promise的出现不是取代其他的异步编程写法，而是在一些情况下使用promise处理时可以方便一些。<br>1 事件模式<br>2 回调函数（ajax）<br>3 定时器（setTimeout, setInterval）<br>4 promise</p>\n<h2 id=\"promise的生命周期\"><a href=\"#promise的生命周期\" class=\"headerlink\" title=\"promise的生命周期\"></a>promise的生命周期</h2><p>pending-&gt;settled<br>settled包括Fulfilled和Rejected,对应then方法的then(resolve, reject);有些类似于ajax请求的过程，pending时并不知道什么时候会处理完成，当promise处理完成已有就会根据成功和失败执行相应的回调，不同的是，then方法可以链式调用，resolve, reject也可以返回一个promise对象。</p>\n<h2 id=\"promise的方法和原型方法\"><a href=\"#promise的方法和原型方法\" class=\"headerlink\" title=\"promise的方法和原型方法\"></a>promise的方法和原型方法</h2><p>// ====================创建未处理的Promise=====================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 由于每次返回的都是Promise对象因此可以链式的调用下面的两个方法</div><div class=\"line\">Promise.prototype.catch() // 传入两个方法，resolve, reject</div><div class=\"line\">Promise.prototype.then()</div><div class=\"line\"></div><div class=\"line\">let p = new Promise(function(resolve, reject) &#123;</div><div class=\"line\">  //...</div><div class=\"line\">  resolve(res);</div><div class=\"line\">  reject(err);</div><div class=\"line\">&#125;);</div><div class=\"line\">p.then();</div><div class=\"line\">p.catch();</div></pre></td></tr></table></figure></p>\n<p>// ====================创建已处理的Promise=====================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建一个已处理的promise，使用promise表示一个已知值，就可以直接使用下面方法创建已解决的promise。</div><div class=\"line\">Promise.reject()</div><div class=\"line\">Promise.resolve()</div><div class=\"line\"></div><div class=\"line\">//二者都是接受一个已知的值，并返回一个promise对象，因此该对象就可以链式调用了</div><div class=\"line\">let p = Promise.resolve(42);</div><div class=\"line\">p.then((res) =&gt; &#123;</div><div class=\"line\">  console.log(res); // 42</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Thenable 对象：有用then()方法，并接受resolve，reject作为参数的普通对象就叫做Thenable 对象</div><div class=\"line\">let thenable = &#123;</div><div class=\"line\">  then: function(resolve, reject)&#123;</div><div class=\"line\">    resolve(42);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// 通过调用Promise.resolve(),返回Promise对象。如果想Promise.resolve()传入一个promise对象，怎不会有任何变化</div><div class=\"line\">let p = Promise.resolve(thenable);</div><div class=\"line\">p.then(function(res) &#123;</div><div class=\"line\">    console.log(res); // 42</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>//=======================链式调用promise===================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 链式中没有return值调用then返回undefined</div><div class=\"line\">2 链式中return值返回对应的值</div><div class=\"line\">3 链式中return值返回Promise对象，then调用return中的Promise</div><div class=\"line\">new Promise((res) =&gt; &#123;</div><div class=\"line\">  res(123);</div><div class=\"line\">&#125;).then((res1) =&gt; &#123;</div><div class=\"line\">  console.log(res1);</div><div class=\"line\">  if(res.error_no !== 0 ) &#123;</div><div class=\"line\">    return Promise.reject(); // return一个自定义的Promise.reject()，那么调用then()方法只能执行第二参数，实现一些特殊效果</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;).then(() =&gt; &#123;&#125;, ()=&gt;&#123;&#125;);</div></pre></td></tr></table></figure></p>\n<p>//=======================相应多个promise===================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Promise.all() // 返回一个数组，对应相应的返回值。表示有一个执行成功就执行resolve，否则reject</div><div class=\"line\">Promise.race() //返回一个值，表示有一个执行成功就执行resolve</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>学习promise刚开始是相当痛苦的，抱着<code>深入理解es6</code>这本书就开始看promise是个什么东西，先读了事件和回调，并不知道promise存在的意义，读到串联promise我就放弃了，感觉学习这个知识一点也不开心，学起来也很费力。直到有一天学超分享了Promise.All()的方法，好像一下就顿悟了，js这个脚本语言根本就不会存在多线程这种概念，由于我们可以自定义promise类型，在then()方法中可以异步去执行一些逻辑，才知道promise用处不仅仅是在ajax外面new一个promise。promise其实很牛逼。</p>\n</blockquote>\n<h2 id=\"异步编程的几种情况\"><a href=\"#异步编程的几种情况\" class=\"headerlink\" title=\"异步编程的几种情况\"></a>异步编程的几种情况</h2><p>promise的出现不是取代其他的异步编程写法，而是在一些情况下使用promise处理时可以方便一些。<br>1 事件模式<br>2 回调函数（ajax）<br>3 定时器（setTimeout, setInterval）<br>4 promise</p>\n<h2 id=\"promise的生命周期\"><a href=\"#promise的生命周期\" class=\"headerlink\" title=\"promise的生命周期\"></a>promise的生命周期</h2><p>pending-&gt;settled<br>settled包括Fulfilled和Rejected,对应then方法的then(resolve, reject);有些类似于ajax请求的过程，pending时并不知道什么时候会处理完成，当promise处理完成已有就会根据成功和失败执行相应的回调，不同的是，then方法可以链式调用，resolve, reject也可以返回一个promise对象。</p>\n<h2 id=\"promise的方法和原型方法\"><a href=\"#promise的方法和原型方法\" class=\"headerlink\" title=\"promise的方法和原型方法\"></a>promise的方法和原型方法</h2><p>// ====================创建未处理的Promise=====================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 由于每次返回的都是Promise对象因此可以链式的调用下面的两个方法</div><div class=\"line\">Promise.prototype.catch() // 传入两个方法，resolve, reject</div><div class=\"line\">Promise.prototype.then()</div><div class=\"line\"></div><div class=\"line\">let p = new Promise(function(resolve, reject) &#123;</div><div class=\"line\">  //...</div><div class=\"line\">  resolve(res);</div><div class=\"line\">  reject(err);</div><div class=\"line\">&#125;);</div><div class=\"line\">p.then();</div><div class=\"line\">p.catch();</div></pre></td></tr></table></figure></p>\n<p>// ====================创建已处理的Promise=====================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 创建一个已处理的promise，使用promise表示一个已知值，就可以直接使用下面方法创建已解决的promise。</div><div class=\"line\">Promise.reject()</div><div class=\"line\">Promise.resolve()</div><div class=\"line\"></div><div class=\"line\">//二者都是接受一个已知的值，并返回一个promise对象，因此该对象就可以链式调用了</div><div class=\"line\">let p = Promise.resolve(42);</div><div class=\"line\">p.then((res) =&gt; &#123;</div><div class=\"line\">  console.log(res); // 42</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Thenable 对象：有用then()方法，并接受resolve，reject作为参数的普通对象就叫做Thenable 对象</div><div class=\"line\">let thenable = &#123;</div><div class=\"line\">  then: function(resolve, reject)&#123;</div><div class=\"line\">    resolve(42);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// 通过调用Promise.resolve(),返回Promise对象。如果想Promise.resolve()传入一个promise对象，怎不会有任何变化</div><div class=\"line\">let p = Promise.resolve(thenable);</div><div class=\"line\">p.then(function(res) &#123;</div><div class=\"line\">    console.log(res); // 42</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>//=======================链式调用promise===================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">1 链式中没有return值调用then返回undefined</div><div class=\"line\">2 链式中return值返回对应的值</div><div class=\"line\">3 链式中return值返回Promise对象，then调用return中的Promise</div><div class=\"line\">new Promise((res) =&gt; &#123;</div><div class=\"line\">  res(123);</div><div class=\"line\">&#125;).then((res1) =&gt; &#123;</div><div class=\"line\">  console.log(res1);</div><div class=\"line\">  if(res.error_no !== 0 ) &#123;</div><div class=\"line\">    return Promise.reject(); // return一个自定义的Promise.reject()，那么调用then()方法只能执行第二参数，实现一些特殊效果</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;).then(() =&gt; &#123;&#125;, ()=&gt;&#123;&#125;);</div></pre></td></tr></table></figure></p>\n<p>//=======================相应多个promise===================<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Promise.all() // 返回一个数组，对应相应的返回值。表示有一个执行成功就执行resolve，否则reject</div><div class=\"line\">Promise.race() //返回一个值，表示有一个执行成功就执行resolve</div></pre></td></tr></table></figure></p>\n"},{"title":"js作用域","date":"2017-10-10T05:46:23.000Z","_content":"\n## javascript 作用域\n  ### 全局作用域\n  全局函数声明，`if`,`for`,`while`中定义的函数都属于全局作用域\n\n  ### 函数作用域\n  函数有自己的作用域,因此会有以下来定义局部作用域\n  ```\n  // 匿名函数被认为是表达式\n  (function() {})()\n  !function() {} ()\n  +function(){}();\n  (function(){}());\n  var a = function() {return s}();\n  ```\n\n  #### 函数声明和变量声明会被前置\n  ```\n  var myvar = 'my value';  \n  (function() {  \n      alert(myvar);  \n      var myvar = 'local value';  \n  })();  \n  ```\n\n  变量声明前置缺省值为undefined\n  >名称解析顺序：\n  1 当前作用域内是否有 var foo 的定义。\n  2 函数形式参数是否有使用 foo 名称的。\n  3 函数自身是否叫做 foo。\n  4 回溯到上一级作用域，然后从 `#1` 重新开始。\n\n  #### 命名空间\n  通过立即行函数实现，因为函数拥有自己的作用域。通过这种方式可以避免变量污染\n\n  ```\n  (function() {\n      // 函数创建一个命名空间\n      var $ = {};\n      $.foo = function() {\n        console.log(1)\n          // 对外公开的函数，创建了闭包\n      };\n      window.$ = $;\n\n  })(); // 立即执行此匿名函数\n  ```\n\n  ### eval作用域\n  eval('var a = 1;'),由于不建议使用eval，暂不研究\n\n  ### es6箭头函数作用域\n\n\n## es3执行作用域\n  执行上下文 Execution Context 简称ec\n  变量对象(VO) 抽象概念主要包括（变量， 函数声明， 行数参数）\n  活动对象(AO)\n  执行上下文概念： 是一个抽象概念，函数执行前创建，将一系列活动组成一个栈栈底总是全局执行山下文，栈顶总是当前执行上下文\n","source":"_posts/js作用域.md","raw":"---\ntitle: js作用域\ndate: 2017-10-10 13:46:23\ncategories: js\ntags: js基础\n---\n\n## javascript 作用域\n  ### 全局作用域\n  全局函数声明，`if`,`for`,`while`中定义的函数都属于全局作用域\n\n  ### 函数作用域\n  函数有自己的作用域,因此会有以下来定义局部作用域\n  ```\n  // 匿名函数被认为是表达式\n  (function() {})()\n  !function() {} ()\n  +function(){}();\n  (function(){}());\n  var a = function() {return s}();\n  ```\n\n  #### 函数声明和变量声明会被前置\n  ```\n  var myvar = 'my value';  \n  (function() {  \n      alert(myvar);  \n      var myvar = 'local value';  \n  })();  \n  ```\n\n  变量声明前置缺省值为undefined\n  >名称解析顺序：\n  1 当前作用域内是否有 var foo 的定义。\n  2 函数形式参数是否有使用 foo 名称的。\n  3 函数自身是否叫做 foo。\n  4 回溯到上一级作用域，然后从 `#1` 重新开始。\n\n  #### 命名空间\n  通过立即行函数实现，因为函数拥有自己的作用域。通过这种方式可以避免变量污染\n\n  ```\n  (function() {\n      // 函数创建一个命名空间\n      var $ = {};\n      $.foo = function() {\n        console.log(1)\n          // 对外公开的函数，创建了闭包\n      };\n      window.$ = $;\n\n  })(); // 立即执行此匿名函数\n  ```\n\n  ### eval作用域\n  eval('var a = 1;'),由于不建议使用eval，暂不研究\n\n  ### es6箭头函数作用域\n\n\n## es3执行作用域\n  执行上下文 Execution Context 简称ec\n  变量对象(VO) 抽象概念主要包括（变量， 函数声明， 行数参数）\n  活动对象(AO)\n  执行上下文概念： 是一个抽象概念，函数执行前创建，将一系列活动组成一个栈栈底总是全局执行山下文，栈顶总是当前执行上下文\n","slug":"js作用域","published":1,"updated":"2017-10-10T07:33:21.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk44000djsvcrff3xxpf","content":"<h2 id=\"javascript-作用域\"><a href=\"#javascript-作用域\" class=\"headerlink\" title=\"javascript 作用域\"></a>javascript 作用域</h2><h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><p>  全局函数声明，<code>if</code>,<code>for</code>,<code>while</code>中定义的函数都属于全局作用域</p>\n<h3 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h3><p>  函数有自己的作用域,因此会有以下来定义局部作用域<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 匿名函数被认为是表达式</div><div class=\"line\">(function() &#123;&#125;)()</div><div class=\"line\">!function() &#123;&#125; ()</div><div class=\"line\">+function()&#123;&#125;();</div><div class=\"line\">(function()&#123;&#125;());</div><div class=\"line\">var a = function() &#123;return s&#125;();</div></pre></td></tr></table></figure></p>\n<h4 id=\"函数声明和变量声明会被前置\"><a href=\"#函数声明和变量声明会被前置\" class=\"headerlink\" title=\"函数声明和变量声明会被前置\"></a>函数声明和变量声明会被前置</h4>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myvar = &apos;my value&apos;;  </div><div class=\"line\">(function() &#123;  </div><div class=\"line\">    alert(myvar);  </div><div class=\"line\">    var myvar = &apos;local value&apos;;  </div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>  变量声明前置缺省值为undefined</p>\n<blockquote>\n<p>名称解析顺序：<br>  1 当前作用域内是否有 var foo 的定义。<br>  2 函数形式参数是否有使用 foo 名称的。<br>  3 函数自身是否叫做 foo。<br>  4 回溯到上一级作用域，然后从 <code>#1</code> 重新开始。</p>\n</blockquote>\n<h4 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h4><p>  通过立即行函数实现，因为函数拥有自己的作用域。通过这种方式可以避免变量污染</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">    // 函数创建一个命名空间</div><div class=\"line\">    var $ = &#123;&#125;;</div><div class=\"line\">    $.foo = function() &#123;</div><div class=\"line\">      console.log(1)</div><div class=\"line\">        // 对外公开的函数，创建了闭包</div><div class=\"line\">    &#125;;</div><div class=\"line\">    window.$ = $;</div><div class=\"line\"></div><div class=\"line\">&#125;)(); // 立即执行此匿名函数</div></pre></td></tr></table></figure>\n<h3 id=\"eval作用域\"><a href=\"#eval作用域\" class=\"headerlink\" title=\"eval作用域\"></a>eval作用域</h3><p>  eval(‘var a = 1;’),由于不建议使用eval，暂不研究</p>\n<h3 id=\"es6箭头函数作用域\"><a href=\"#es6箭头函数作用域\" class=\"headerlink\" title=\"es6箭头函数作用域\"></a>es6箭头函数作用域</h3><h2 id=\"es3执行作用域\"><a href=\"#es3执行作用域\" class=\"headerlink\" title=\"es3执行作用域\"></a>es3执行作用域</h2><p>  执行上下文 Execution Context 简称ec<br>  变量对象(VO) 抽象概念主要包括（变量， 函数声明， 行数参数）<br>  活动对象(AO)<br>  执行上下文概念： 是一个抽象概念，函数执行前创建，将一系列活动组成一个栈栈底总是全局执行山下文，栈顶总是当前执行上下文</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"javascript-作用域\"><a href=\"#javascript-作用域\" class=\"headerlink\" title=\"javascript 作用域\"></a>javascript 作用域</h2><h3 id=\"全局作用域\"><a href=\"#全局作用域\" class=\"headerlink\" title=\"全局作用域\"></a>全局作用域</h3><p>  全局函数声明，<code>if</code>,<code>for</code>,<code>while</code>中定义的函数都属于全局作用域</p>\n<h3 id=\"函数作用域\"><a href=\"#函数作用域\" class=\"headerlink\" title=\"函数作用域\"></a>函数作用域</h3><p>  函数有自己的作用域,因此会有以下来定义局部作用域<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 匿名函数被认为是表达式</div><div class=\"line\">(function() &#123;&#125;)()</div><div class=\"line\">!function() &#123;&#125; ()</div><div class=\"line\">+function()&#123;&#125;();</div><div class=\"line\">(function()&#123;&#125;());</div><div class=\"line\">var a = function() &#123;return s&#125;();</div></pre></td></tr></table></figure></p>\n<h4 id=\"函数声明和变量声明会被前置\"><a href=\"#函数声明和变量声明会被前置\" class=\"headerlink\" title=\"函数声明和变量声明会被前置\"></a>函数声明和变量声明会被前置</h4>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myvar = &apos;my value&apos;;  </div><div class=\"line\">(function() &#123;  </div><div class=\"line\">    alert(myvar);  </div><div class=\"line\">    var myvar = &apos;local value&apos;;  </div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>  变量声明前置缺省值为undefined</p>\n<blockquote>\n<p>名称解析顺序：<br>  1 当前作用域内是否有 var foo 的定义。<br>  2 函数形式参数是否有使用 foo 名称的。<br>  3 函数自身是否叫做 foo。<br>  4 回溯到上一级作用域，然后从 <code>#1</code> 重新开始。</p>\n</blockquote>\n<h4 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h4><p>  通过立即行函数实现，因为函数拥有自己的作用域。通过这种方式可以避免变量污染</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">    // 函数创建一个命名空间</div><div class=\"line\">    var $ = &#123;&#125;;</div><div class=\"line\">    $.foo = function() &#123;</div><div class=\"line\">      console.log(1)</div><div class=\"line\">        // 对外公开的函数，创建了闭包</div><div class=\"line\">    &#125;;</div><div class=\"line\">    window.$ = $;</div><div class=\"line\"></div><div class=\"line\">&#125;)(); // 立即执行此匿名函数</div></pre></td></tr></table></figure>\n<h3 id=\"eval作用域\"><a href=\"#eval作用域\" class=\"headerlink\" title=\"eval作用域\"></a>eval作用域</h3><p>  eval(‘var a = 1;’),由于不建议使用eval，暂不研究</p>\n<h3 id=\"es6箭头函数作用域\"><a href=\"#es6箭头函数作用域\" class=\"headerlink\" title=\"es6箭头函数作用域\"></a>es6箭头函数作用域</h3><h2 id=\"es3执行作用域\"><a href=\"#es3执行作用域\" class=\"headerlink\" title=\"es3执行作用域\"></a>es3执行作用域</h2><p>  执行上下文 Execution Context 简称ec<br>  变量对象(VO) 抽象概念主要包括（变量， 函数声明， 行数参数）<br>  活动对象(AO)<br>  执行上下文概念： 是一个抽象概念，函数执行前创建，将一系列活动组成一个栈栈底总是全局执行山下文，栈顶总是当前执行上下文</p>\n"},{"title":"react 项目总结","date":"2017-11-28T12:42:10.000Z","_content":"\n## 格式规范\n1 将大部分的正则校验放入reg文件中，统一管理，方便复用\n2 将h5调用原生的方法统一放入util文件中，方便查看项目中都使用了哪些原生方法，同时可以达到复用的效果\n\n## 使用正则匹配style中为px的数据\n由于消息的详情页可能来自后台录入，录入的文章包含一些样式，由于项目中使用了flexible，使用px组件的显示都比较小，比较方便的方式就是通过正则匹配\n```javascript\n  pxToRem: function(_s){\n    //匹配:20px或: 20px不区分大小写\n    var reg = /(\\:\\s*)+(\\d)+(px)/gi;\n    let newStr= _s.replace(reg, function(_x){\n      _x = _x.replace(/(\\:|: )/,'').replace(/px/i,'');\n      return ':' + (parseFloat(_x) * 2 / 75).toFixed(5) + 'rem';\n    });\n    return newStr;\n  }\n```\n## 在一些安卓手机中border不显示\n由于1px转换为rem后可能只有0.01，数值过小导致边框显示不出，\n1 大多数的处理方法是不对1px的边框进行转换\n  postcss-pxtorem 文档说明\n\n  A message about ignoring properties\n  ```\n  // `px` is converted to `rem`\n  .convert {\n      font-size: 16px; // converted to 1rem\n  }\n\n  // `Px` or `PX` is ignored by `postcss-pxtorem` but still accepted by browsers\n  .ignore {\n      border: 1Px solid; // ignored\n      border-width: 2PX; // ignored\n  }\n  ```\n2 [7 种方法解决移动端 Retina 屏幕 1px 边框问题](https://juejin.im/entry/584e427361ff4b006cd22c7c)\n\n## 对js模块化理解增强\n理解初始于，这样的一段代码\n```\nimport React, { Component } from 'react';\nlet moduleList = [];\nclass Message extends Component {\n  componentDidMount() {\n    ...\n  }\n\n  componentWillUnmount() {\n    ...\n  }\n\n  render() {\n    return (\n      <div className=\"page page-msg\">\n        ...\n      </div>\n    );\n  }\n}\nexport default Message;\n```\n在class外部定义的变量`moduleList`并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。\n同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能\n\n```\n// 测试\n(function() {\n    var _userId = 1;\n    var exportTest = {};\n    function converter(userId) {\n        _userId = ++userId;\n        return _userId;\n    }\n    exportTest.getUserId = function() {\n        return converter(_userId);\n    }\n    window.exportTest = exportTest;\n} ());\nexportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用\n```\n>总结\n1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用\n2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）\n3 exportTest = null，闭包中的变量引用，以及闭包函数被释放\n\n## 对ref的理解\n1 复杂组件可以获取对外的一些属性和方法\n2 简单的可以获取一个dom节点\n\n## 高阶组件，及高阶组件生命周期\n## 生命周期\n\n## 滚动加载组件\n```\nimport React, { Component } from 'react';\n\nlet timer = null;\n\nclass LoadingMore extends Component {\n  constructor(props) {\n    super(props);\n    this.scroll = this.scroll.bind(this);\n  }\n\n  scroll() {\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      console.log('scrolling');\n      const loadMoreFn = this.props.loadMoreFn || function () {};\n      const loadingDom = this.refs.loading;\n      const loadingDomTop = loadingDom.getBoundingClientRect().top;\n      const windowHeight = window.innerHeight;\n      if (loadingDomTop && loadingDomTop < windowHeight) {\n        loadMoreFn();\n      }\n    }, 100);\n  }\n\n  componentDidMount() {\n    const pageContent = document.querySelector('.page-content');\n    if (pageContent) {\n      pageContent.addEventListener('scroll', this.scroll, false);\n    } else {\n      window.addEventListener('scroll', this.scroll, false);\n    }\n  }\n\n  componentWillUnmount() {\n    console.log('window removeEventListener');\n    const pageContent = document.querySelector('.page-content');\n\n    if (pageContent) {\n      pageContent.removeEventListener('scroll', this.scroll, false);\n    } else {\n      window.removeEventListener('scroll', this.scroll, false);\n    }\n    timer = null;\n  }\n\n  render() {\n    return (\n      <div className=\"loading-component\" ref=\"loading\">\n        <div>\n          <span className=\"font\">加载中...</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoadingMore;\n```\n优化，滚动至底部是显示没有更多数据\n\n## webpack神器\n配制：devtool: 'source-map', 结合react插件就可以打断点了\n## 思想转变\n由于惯性思维，设置一些status时，只想到通过两种状态如何控制视图的显示。有时候一些逻辑只用true或者false两种状态是不够的，可以使用status（1,2,3...）\n## 在入口页面判断是否登录\n之前错误的处理逻辑为，把入口页面index作为一个容器，根据情况平判断加载login页面还是首页，这样操作的问题是，在同一个页面中处理两套生命周期比较是比较复杂的\n1 render先执行根据默认值会加载login页面\n2 当didmound中拿到登录状态发现已经登录，再去加载首页\n\n处理：\n在没有拿到登录状态时先不渲染，拿到登录状态了，如果用户已经登陆在入口页加载首页，如果没有直接跳转至登录页面\n\n## ios fix 布局\n由于position: fixed在ios中存在的问题较大，使用了相对定位做了替代\n>页面结构修改\n由于ios对fix属性支持的不好，因此用absolute来替换\n需要处理的内容，如果不需要顶部固定可以做不处理\n1 顶部标题栏（header）和页面内容（page-content）和页脚（footer）为并列关系，被page包含，都是用绝对定位\n2 页面内容（page-content）需要设置为纵向滚动，据顶部的距离为头部的高度\n3 此时的滚动加载更多的组件滚动区域不是相对于window而是page-content\n4 需要定位的固定在底部的元素可以在page-content外面绝对定位，需要区别个别手机键盘将文字顶起的情况,还有滚动一段距离固定的问题\n\n## 低版本手机中不支持set\nreact 16 依赖 Set、Map、requestAnimationFrame，如果在不支持的浏览器请使用 pollyfil,处理这个问题的时候怂了，由于不清楚react16还有什么坑，我把版本设为了15.6。\n\n## h5资源本地化的理解\n就是将我们的部分文件放在手机内存中，目前的app仅有10M,由于菜单等信息都是接口获取的，暂时没有考虑资源本地化\n\n## react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps\n[React router 4 带参数的路由，从\"/album?id=1\"访问\"/album?id=2\"该如何重新渲染？](https://segmentfault.com/q/1010000012169944?_ea=2905143) 还是第一次在sf上回答，有点小激动，嘻嘻~\n\n## jsx语法遍历对象\n通过`Object.keys(obj)`来将对象转成数组，再用map去处理，其中需要注意的是，jsx语法中render的是一个对象他只会对这个对象执行，render一个组件才会被渲染在是视图中\neg:\n`{<component />}` // 不会被渲染\n`<component />` // 会渲染\n\n## require的神奇情况\nrequire在一些情况下直接读一个变量会报错，如果这样写require('../abc'+data)才可以，很神奇，情况不明\n\n\n## 待处理\n1 对应一个分页的页面，滚动一定的距离，进入详情页面，再返回的时候，列表页中滚动条的位置不应该被初始化到顶部\n2 对于项目中的四个tab也，每次切换的时候都会有接口调用，会出现屏闪的问题，页面优化\n","source":"_posts/react-项目总结.md","raw":"---\ntitle: react 项目总结\ndate: 2017-11-28 20:42:10\ncategories: react\ntags: 工作总结\n---\n\n## 格式规范\n1 将大部分的正则校验放入reg文件中，统一管理，方便复用\n2 将h5调用原生的方法统一放入util文件中，方便查看项目中都使用了哪些原生方法，同时可以达到复用的效果\n\n## 使用正则匹配style中为px的数据\n由于消息的详情页可能来自后台录入，录入的文章包含一些样式，由于项目中使用了flexible，使用px组件的显示都比较小，比较方便的方式就是通过正则匹配\n```javascript\n  pxToRem: function(_s){\n    //匹配:20px或: 20px不区分大小写\n    var reg = /(\\:\\s*)+(\\d)+(px)/gi;\n    let newStr= _s.replace(reg, function(_x){\n      _x = _x.replace(/(\\:|: )/,'').replace(/px/i,'');\n      return ':' + (parseFloat(_x) * 2 / 75).toFixed(5) + 'rem';\n    });\n    return newStr;\n  }\n```\n## 在一些安卓手机中border不显示\n由于1px转换为rem后可能只有0.01，数值过小导致边框显示不出，\n1 大多数的处理方法是不对1px的边框进行转换\n  postcss-pxtorem 文档说明\n\n  A message about ignoring properties\n  ```\n  // `px` is converted to `rem`\n  .convert {\n      font-size: 16px; // converted to 1rem\n  }\n\n  // `Px` or `PX` is ignored by `postcss-pxtorem` but still accepted by browsers\n  .ignore {\n      border: 1Px solid; // ignored\n      border-width: 2PX; // ignored\n  }\n  ```\n2 [7 种方法解决移动端 Retina 屏幕 1px 边框问题](https://juejin.im/entry/584e427361ff4b006cd22c7c)\n\n## 对js模块化理解增强\n理解初始于，这样的一段代码\n```\nimport React, { Component } from 'react';\nlet moduleList = [];\nclass Message extends Component {\n  componentDidMount() {\n    ...\n  }\n\n  componentWillUnmount() {\n    ...\n  }\n\n  render() {\n    return (\n      <div className=\"page page-msg\">\n        ...\n      </div>\n    );\n  }\n}\nexport default Message;\n```\n在class外部定义的变量`moduleList`并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。\n同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能\n\n```\n// 测试\n(function() {\n    var _userId = 1;\n    var exportTest = {};\n    function converter(userId) {\n        _userId = ++userId;\n        return _userId;\n    }\n    exportTest.getUserId = function() {\n        return converter(_userId);\n    }\n    window.exportTest = exportTest;\n} ());\nexportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用\n```\n>总结\n1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用\n2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）\n3 exportTest = null，闭包中的变量引用，以及闭包函数被释放\n\n## 对ref的理解\n1 复杂组件可以获取对外的一些属性和方法\n2 简单的可以获取一个dom节点\n\n## 高阶组件，及高阶组件生命周期\n## 生命周期\n\n## 滚动加载组件\n```\nimport React, { Component } from 'react';\n\nlet timer = null;\n\nclass LoadingMore extends Component {\n  constructor(props) {\n    super(props);\n    this.scroll = this.scroll.bind(this);\n  }\n\n  scroll() {\n    if (timer) {\n      clearTimeout(timer);\n    }\n    timer = setTimeout(() => {\n      console.log('scrolling');\n      const loadMoreFn = this.props.loadMoreFn || function () {};\n      const loadingDom = this.refs.loading;\n      const loadingDomTop = loadingDom.getBoundingClientRect().top;\n      const windowHeight = window.innerHeight;\n      if (loadingDomTop && loadingDomTop < windowHeight) {\n        loadMoreFn();\n      }\n    }, 100);\n  }\n\n  componentDidMount() {\n    const pageContent = document.querySelector('.page-content');\n    if (pageContent) {\n      pageContent.addEventListener('scroll', this.scroll, false);\n    } else {\n      window.addEventListener('scroll', this.scroll, false);\n    }\n  }\n\n  componentWillUnmount() {\n    console.log('window removeEventListener');\n    const pageContent = document.querySelector('.page-content');\n\n    if (pageContent) {\n      pageContent.removeEventListener('scroll', this.scroll, false);\n    } else {\n      window.removeEventListener('scroll', this.scroll, false);\n    }\n    timer = null;\n  }\n\n  render() {\n    return (\n      <div className=\"loading-component\" ref=\"loading\">\n        <div>\n          <span className=\"font\">加载中...</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LoadingMore;\n```\n优化，滚动至底部是显示没有更多数据\n\n## webpack神器\n配制：devtool: 'source-map', 结合react插件就可以打断点了\n## 思想转变\n由于惯性思维，设置一些status时，只想到通过两种状态如何控制视图的显示。有时候一些逻辑只用true或者false两种状态是不够的，可以使用status（1,2,3...）\n## 在入口页面判断是否登录\n之前错误的处理逻辑为，把入口页面index作为一个容器，根据情况平判断加载login页面还是首页，这样操作的问题是，在同一个页面中处理两套生命周期比较是比较复杂的\n1 render先执行根据默认值会加载login页面\n2 当didmound中拿到登录状态发现已经登录，再去加载首页\n\n处理：\n在没有拿到登录状态时先不渲染，拿到登录状态了，如果用户已经登陆在入口页加载首页，如果没有直接跳转至登录页面\n\n## ios fix 布局\n由于position: fixed在ios中存在的问题较大，使用了相对定位做了替代\n>页面结构修改\n由于ios对fix属性支持的不好，因此用absolute来替换\n需要处理的内容，如果不需要顶部固定可以做不处理\n1 顶部标题栏（header）和页面内容（page-content）和页脚（footer）为并列关系，被page包含，都是用绝对定位\n2 页面内容（page-content）需要设置为纵向滚动，据顶部的距离为头部的高度\n3 此时的滚动加载更多的组件滚动区域不是相对于window而是page-content\n4 需要定位的固定在底部的元素可以在page-content外面绝对定位，需要区别个别手机键盘将文字顶起的情况,还有滚动一段距离固定的问题\n\n## 低版本手机中不支持set\nreact 16 依赖 Set、Map、requestAnimationFrame，如果在不支持的浏览器请使用 pollyfil,处理这个问题的时候怂了，由于不清楚react16还有什么坑，我把版本设为了15.6。\n\n## h5资源本地化的理解\n就是将我们的部分文件放在手机内存中，目前的app仅有10M,由于菜单等信息都是接口获取的，暂时没有考虑资源本地化\n\n## react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps\n[React router 4 带参数的路由，从\"/album?id=1\"访问\"/album?id=2\"该如何重新渲染？](https://segmentfault.com/q/1010000012169944?_ea=2905143) 还是第一次在sf上回答，有点小激动，嘻嘻~\n\n## jsx语法遍历对象\n通过`Object.keys(obj)`来将对象转成数组，再用map去处理，其中需要注意的是，jsx语法中render的是一个对象他只会对这个对象执行，render一个组件才会被渲染在是视图中\neg:\n`{<component />}` // 不会被渲染\n`<component />` // 会渲染\n\n## require的神奇情况\nrequire在一些情况下直接读一个变量会报错，如果这样写require('../abc'+data)才可以，很神奇，情况不明\n\n\n## 待处理\n1 对应一个分页的页面，滚动一定的距离，进入详情页面，再返回的时候，列表页中滚动条的位置不应该被初始化到顶部\n2 对于项目中的四个tab也，每次切换的时候都会有接口调用，会出现屏闪的问题，页面优化\n","slug":"react-项目总结","published":1,"updated":"2017-11-28T14:02:49.928Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk4a000hjsvcrq3x9pcf","content":"<h2 id=\"格式规范\"><a href=\"#格式规范\" class=\"headerlink\" title=\"格式规范\"></a>格式规范</h2><p>1 将大部分的正则校验放入reg文件中，统一管理，方便复用<br>2 将h5调用原生的方法统一放入util文件中，方便查看项目中都使用了哪些原生方法，同时可以达到复用的效果</p>\n<h2 id=\"使用正则匹配style中为px的数据\"><a href=\"#使用正则匹配style中为px的数据\" class=\"headerlink\" title=\"使用正则匹配style中为px的数据\"></a>使用正则匹配style中为px的数据</h2><p>由于消息的详情页可能来自后台录入，录入的文章包含一些样式，由于项目中使用了flexible，使用px组件的显示都比较小，比较方便的方式就是通过正则匹配<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">pxToRem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_s</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//匹配:20px或: 20px不区分大小写</span></div><div class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\:\\s*)+(\\d)+(px)/gi</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> newStr= _s.replace(reg, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_x</span>)</span>&#123;</div><div class=\"line\">    _x = _x.replace(<span class=\"regexp\">/(\\:|: )/</span>,<span class=\"string\">''</span>).replace(<span class=\"regexp\">/px/i</span>,<span class=\"string\">''</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">':'</span> + (<span class=\"built_in\">parseFloat</span>(_x) * <span class=\"number\">2</span> / <span class=\"number\">75</span>).toFixed(<span class=\"number\">5</span>) + <span class=\"string\">'rem'</span>;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> newStr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"在一些安卓手机中border不显示\"><a href=\"#在一些安卓手机中border不显示\" class=\"headerlink\" title=\"在一些安卓手机中border不显示\"></a>在一些安卓手机中border不显示</h2><p>由于1px转换为rem后可能只有0.01，数值过小导致边框显示不出，<br>1 大多数的处理方法是不对1px的边框进行转换<br>  postcss-pxtorem 文档说明</p>\n<p>  A message about ignoring properties<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// `px` is converted to `rem`</div><div class=\"line\">.convert &#123;</div><div class=\"line\">    font-size: 16px; // converted to 1rem</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// `Px` or `PX` is ignored by `postcss-pxtorem` but still accepted by browsers</div><div class=\"line\">.ignore &#123;</div><div class=\"line\">    border: 1Px solid; // ignored</div><div class=\"line\">    border-width: 2PX; // ignored</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2 <a href=\"https://juejin.im/entry/584e427361ff4b006cd22c7c\" target=\"_blank\" rel=\"external\">7 种方法解决移动端 Retina 屏幕 1px 边框问题</a></p>\n<h2 id=\"对js模块化理解增强\"><a href=\"#对js模块化理解增强\" class=\"headerlink\" title=\"对js模块化理解增强\"></a>对js模块化理解增强</h2><p>理解初始于，这样的一段代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">let moduleList = [];</div><div class=\"line\">class Message extends Component &#123;</div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillUnmount() &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div className=&quot;page page-msg&quot;&gt;</div><div class=\"line\">        ...</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">export default Message;</div></pre></td></tr></table></figure></p>\n<p>在class外部定义的变量<code>moduleList</code>并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。<br>同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 测试</div><div class=\"line\">(function() &#123;</div><div class=\"line\">    var _userId = 1;</div><div class=\"line\">    var exportTest = &#123;&#125;;</div><div class=\"line\">    function converter(userId) &#123;</div><div class=\"line\">        _userId = ++userId;</div><div class=\"line\">        return _userId;</div><div class=\"line\">    &#125;</div><div class=\"line\">    exportTest.getUserId = function() &#123;</div><div class=\"line\">        return converter(_userId);</div><div class=\"line\">    &#125;</div><div class=\"line\">    window.exportTest = exportTest;</div><div class=\"line\">&#125; ());</div><div class=\"line\">exportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用</div></pre></td></tr></table></figure>\n<blockquote>\n<p>总结<br>1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用<br>2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）<br>3 exportTest = null，闭包中的变量引用，以及闭包函数被释放</p>\n</blockquote>\n<h2 id=\"对ref的理解\"><a href=\"#对ref的理解\" class=\"headerlink\" title=\"对ref的理解\"></a>对ref的理解</h2><p>1 复杂组件可以获取对外的一些属性和方法<br>2 简单的可以获取一个dom节点</p>\n<h2 id=\"高阶组件，及高阶组件生命周期\"><a href=\"#高阶组件，及高阶组件生命周期\" class=\"headerlink\" title=\"高阶组件，及高阶组件生命周期\"></a>高阶组件，及高阶组件生命周期</h2><h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h2 id=\"滚动加载组件\"><a href=\"#滚动加载组件\" class=\"headerlink\" title=\"滚动加载组件\"></a>滚动加载组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\"></div><div class=\"line\">let timer = null;</div><div class=\"line\"></div><div class=\"line\">class LoadingMore extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">    this.scroll = this.scroll.bind(this);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  scroll() &#123;</div><div class=\"line\">    if (timer) &#123;</div><div class=\"line\">      clearTimeout(timer);</div><div class=\"line\">    &#125;</div><div class=\"line\">    timer = setTimeout(() =&gt; &#123;</div><div class=\"line\">      console.log(&apos;scrolling&apos;);</div><div class=\"line\">      const loadMoreFn = this.props.loadMoreFn || function () &#123;&#125;;</div><div class=\"line\">      const loadingDom = this.refs.loading;</div><div class=\"line\">      const loadingDomTop = loadingDom.getBoundingClientRect().top;</div><div class=\"line\">      const windowHeight = window.innerHeight;</div><div class=\"line\">      if (loadingDomTop &amp;&amp; loadingDomTop &lt; windowHeight) &#123;</div><div class=\"line\">        loadMoreFn();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;, 100);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    const pageContent = document.querySelector(&apos;.page-content&apos;);</div><div class=\"line\">    if (pageContent) &#123;</div><div class=\"line\">      pageContent.addEventListener(&apos;scroll&apos;, this.scroll, false);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      window.addEventListener(&apos;scroll&apos;, this.scroll, false);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillUnmount() &#123;</div><div class=\"line\">    console.log(&apos;window removeEventListener&apos;);</div><div class=\"line\">    const pageContent = document.querySelector(&apos;.page-content&apos;);</div><div class=\"line\"></div><div class=\"line\">    if (pageContent) &#123;</div><div class=\"line\">      pageContent.removeEventListener(&apos;scroll&apos;, this.scroll, false);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      window.removeEventListener(&apos;scroll&apos;, this.scroll, false);</div><div class=\"line\">    &#125;</div><div class=\"line\">    timer = null;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div className=&quot;loading-component&quot; ref=&quot;loading&quot;&gt;</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          &lt;span className=&quot;font&quot;&gt;加载中...&lt;/span&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default LoadingMore;</div></pre></td></tr></table></figure>\n<p>优化，滚动至底部是显示没有更多数据</p>\n<h2 id=\"webpack神器\"><a href=\"#webpack神器\" class=\"headerlink\" title=\"webpack神器\"></a>webpack神器</h2><p>配制：devtool: ‘source-map’, 结合react插件就可以打断点了</p>\n<h2 id=\"思想转变\"><a href=\"#思想转变\" class=\"headerlink\" title=\"思想转变\"></a>思想转变</h2><p>由于惯性思维，设置一些status时，只想到通过两种状态如何控制视图的显示。有时候一些逻辑只用true或者false两种状态是不够的，可以使用status（1,2,3…）</p>\n<h2 id=\"在入口页面判断是否登录\"><a href=\"#在入口页面判断是否登录\" class=\"headerlink\" title=\"在入口页面判断是否登录\"></a>在入口页面判断是否登录</h2><p>之前错误的处理逻辑为，把入口页面index作为一个容器，根据情况平判断加载login页面还是首页，这样操作的问题是，在同一个页面中处理两套生命周期比较是比较复杂的<br>1 render先执行根据默认值会加载login页面<br>2 当didmound中拿到登录状态发现已经登录，再去加载首页</p>\n<p>处理：<br>在没有拿到登录状态时先不渲染，拿到登录状态了，如果用户已经登陆在入口页加载首页，如果没有直接跳转至登录页面</p>\n<h2 id=\"ios-fix-布局\"><a href=\"#ios-fix-布局\" class=\"headerlink\" title=\"ios fix 布局\"></a>ios fix 布局</h2><p>由于position: fixed在ios中存在的问题较大，使用了相对定位做了替代</p>\n<blockquote>\n<p>页面结构修改<br>由于ios对fix属性支持的不好，因此用absolute来替换<br>需要处理的内容，如果不需要顶部固定可以做不处理<br>1 顶部标题栏（header）和页面内容（page-content）和页脚（footer）为并列关系，被page包含，都是用绝对定位<br>2 页面内容（page-content）需要设置为纵向滚动，据顶部的距离为头部的高度<br>3 此时的滚动加载更多的组件滚动区域不是相对于window而是page-content<br>4 需要定位的固定在底部的元素可以在page-content外面绝对定位，需要区别个别手机键盘将文字顶起的情况,还有滚动一段距离固定的问题</p>\n</blockquote>\n<h2 id=\"低版本手机中不支持set\"><a href=\"#低版本手机中不支持set\" class=\"headerlink\" title=\"低版本手机中不支持set\"></a>低版本手机中不支持set</h2><p>react 16 依赖 Set、Map、requestAnimationFrame，如果在不支持的浏览器请使用 pollyfil,处理这个问题的时候怂了，由于不清楚react16还有什么坑，我把版本设为了15.6。</p>\n<h2 id=\"h5资源本地化的理解\"><a href=\"#h5资源本地化的理解\" class=\"headerlink\" title=\"h5资源本地化的理解\"></a>h5资源本地化的理解</h2><p>就是将我们的部分文件放在手机内存中，目前的app仅有10M,由于菜单等信息都是接口获取的，暂时没有考虑资源本地化</p>\n<h2 id=\"react路由以及props改变时触发的触发的钩子函数-componentWillReceiveProps\"><a href=\"#react路由以及props改变时触发的触发的钩子函数-componentWillReceiveProps\" class=\"headerlink\" title=\"react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps\"></a>react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps</h2><p><a href=\"https://segmentfault.com/q/1010000012169944?_ea=2905143\" target=\"_blank\" rel=\"external\">React router 4 带参数的路由，从”/album?id=1”访问”/album?id=2”该如何重新渲染？</a> 还是第一次在sf上回答，有点小激动，嘻嘻~</p>\n<h2 id=\"jsx语法遍历对象\"><a href=\"#jsx语法遍历对象\" class=\"headerlink\" title=\"jsx语法遍历对象\"></a>jsx语法遍历对象</h2><p>通过<code>Object.keys(obj)</code>来将对象转成数组，再用map去处理，其中需要注意的是，jsx语法中render的是一个对象他只会对这个对象执行，render一个组件才会被渲染在是视图中<br>eg:<br><code>{&lt;component /&gt;}</code> // 不会被渲染<br><code>&lt;component /&gt;</code> // 会渲染</p>\n<h2 id=\"require的神奇情况\"><a href=\"#require的神奇情况\" class=\"headerlink\" title=\"require的神奇情况\"></a>require的神奇情况</h2><p>require在一些情况下直接读一个变量会报错，如果这样写require(‘../abc’+data)才可以，很神奇，情况不明</p>\n<h2 id=\"待处理\"><a href=\"#待处理\" class=\"headerlink\" title=\"待处理\"></a>待处理</h2><p>1 对应一个分页的页面，滚动一定的距离，进入详情页面，再返回的时候，列表页中滚动条的位置不应该被初始化到顶部<br>2 对于项目中的四个tab也，每次切换的时候都会有接口调用，会出现屏闪的问题，页面优化</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"格式规范\"><a href=\"#格式规范\" class=\"headerlink\" title=\"格式规范\"></a>格式规范</h2><p>1 将大部分的正则校验放入reg文件中，统一管理，方便复用<br>2 将h5调用原生的方法统一放入util文件中，方便查看项目中都使用了哪些原生方法，同时可以达到复用的效果</p>\n<h2 id=\"使用正则匹配style中为px的数据\"><a href=\"#使用正则匹配style中为px的数据\" class=\"headerlink\" title=\"使用正则匹配style中为px的数据\"></a>使用正则匹配style中为px的数据</h2><p>由于消息的详情页可能来自后台录入，录入的文章包含一些样式，由于项目中使用了flexible，使用px组件的显示都比较小，比较方便的方式就是通过正则匹配<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">pxToRem: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_s</span>)</span>&#123;</div><div class=\"line\">  <span class=\"comment\">//匹配:20px或: 20px不区分大小写</span></div><div class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"regexp\">/(\\:\\s*)+(\\d)+(px)/gi</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> newStr= _s.replace(reg, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">_x</span>)</span>&#123;</div><div class=\"line\">    _x = _x.replace(<span class=\"regexp\">/(\\:|: )/</span>,<span class=\"string\">''</span>).replace(<span class=\"regexp\">/px/i</span>,<span class=\"string\">''</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">':'</span> + (<span class=\"built_in\">parseFloat</span>(_x) * <span class=\"number\">2</span> / <span class=\"number\">75</span>).toFixed(<span class=\"number\">5</span>) + <span class=\"string\">'rem'</span>;</div><div class=\"line\">  &#125;);</div><div class=\"line\">  <span class=\"keyword\">return</span> newStr;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"在一些安卓手机中border不显示\"><a href=\"#在一些安卓手机中border不显示\" class=\"headerlink\" title=\"在一些安卓手机中border不显示\"></a>在一些安卓手机中border不显示</h2><p>由于1px转换为rem后可能只有0.01，数值过小导致边框显示不出，<br>1 大多数的处理方法是不对1px的边框进行转换<br>  postcss-pxtorem 文档说明</p>\n<p>  A message about ignoring properties<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// `px` is converted to `rem`</div><div class=\"line\">.convert &#123;</div><div class=\"line\">    font-size: 16px; // converted to 1rem</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// `Px` or `PX` is ignored by `postcss-pxtorem` but still accepted by browsers</div><div class=\"line\">.ignore &#123;</div><div class=\"line\">    border: 1Px solid; // ignored</div><div class=\"line\">    border-width: 2PX; // ignored</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>2 <a href=\"https://juejin.im/entry/584e427361ff4b006cd22c7c\" target=\"_blank\" rel=\"external\">7 种方法解决移动端 Retina 屏幕 1px 边框问题</a></p>\n<h2 id=\"对js模块化理解增强\"><a href=\"#对js模块化理解增强\" class=\"headerlink\" title=\"对js模块化理解增强\"></a>对js模块化理解增强</h2><p>理解初始于，这样的一段代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">let moduleList = [];</div><div class=\"line\">class Message extends Component &#123;</div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillUnmount() &#123;</div><div class=\"line\">    ...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div className=&quot;page page-msg&quot;&gt;</div><div class=\"line\">        ...</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">export default Message;</div></pre></td></tr></table></figure></p>\n<p>在class外部定义的变量<code>moduleList</code>并不会被销毁，babel把一个个的实例变成了立即执行函数，查看babel编译后的文件可以看到该字段是闭包中的一个私有变量，由于在闭包中字段不会销毁并且能保留数据操作后的状态，同时也可以通过调用class中的方法来修改该字段。当然该字段也存在闭包所存在的方法，正确使用有助于提高代码的质量。<br>同时想到那些require.js sea.js import export, jquery之类的处理方法为了不污染外部变量都采用了再立即执行的作用域内最终return对外公开的对象，通过该对象可以操作闭包中的方法和属性，达到一些代码封装和模块加载的功能</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 测试</div><div class=\"line\">(function() &#123;</div><div class=\"line\">    var _userId = 1;</div><div class=\"line\">    var exportTest = &#123;&#125;;</div><div class=\"line\">    function converter(userId) &#123;</div><div class=\"line\">        _userId = ++userId;</div><div class=\"line\">        return _userId;</div><div class=\"line\">    &#125;</div><div class=\"line\">    exportTest.getUserId = function() &#123;</div><div class=\"line\">        return converter(_userId);</div><div class=\"line\">    &#125;</div><div class=\"line\">    window.exportTest = exportTest;</div><div class=\"line\">&#125; ());</div><div class=\"line\">exportTest.getUserId()// 此时的user id 会不断增加，因为闭包中的私有变量不会被清除，除非exportTest = null,释放对闭包函数的引用</div></pre></td></tr></table></figure>\n<blockquote>\n<p>总结<br>1 过程立即执行函数执行，同时export一个闭包函数，保存着对闭包的引用<br>2 当执行exportTest.getUserId() 私有变量_userId被重新赋值，呈自增（空间从未被释放）<br>3 exportTest = null，闭包中的变量引用，以及闭包函数被释放</p>\n</blockquote>\n<h2 id=\"对ref的理解\"><a href=\"#对ref的理解\" class=\"headerlink\" title=\"对ref的理解\"></a>对ref的理解</h2><p>1 复杂组件可以获取对外的一些属性和方法<br>2 简单的可以获取一个dom节点</p>\n<h2 id=\"高阶组件，及高阶组件生命周期\"><a href=\"#高阶组件，及高阶组件生命周期\" class=\"headerlink\" title=\"高阶组件，及高阶组件生命周期\"></a>高阶组件，及高阶组件生命周期</h2><h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><h2 id=\"滚动加载组件\"><a href=\"#滚动加载组件\" class=\"headerlink\" title=\"滚动加载组件\"></a>滚动加载组件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\"></div><div class=\"line\">let timer = null;</div><div class=\"line\"></div><div class=\"line\">class LoadingMore extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">    this.scroll = this.scroll.bind(this);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  scroll() &#123;</div><div class=\"line\">    if (timer) &#123;</div><div class=\"line\">      clearTimeout(timer);</div><div class=\"line\">    &#125;</div><div class=\"line\">    timer = setTimeout(() =&gt; &#123;</div><div class=\"line\">      console.log(&apos;scrolling&apos;);</div><div class=\"line\">      const loadMoreFn = this.props.loadMoreFn || function () &#123;&#125;;</div><div class=\"line\">      const loadingDom = this.refs.loading;</div><div class=\"line\">      const loadingDomTop = loadingDom.getBoundingClientRect().top;</div><div class=\"line\">      const windowHeight = window.innerHeight;</div><div class=\"line\">      if (loadingDomTop &amp;&amp; loadingDomTop &lt; windowHeight) &#123;</div><div class=\"line\">        loadMoreFn();</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;, 100);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    const pageContent = document.querySelector(&apos;.page-content&apos;);</div><div class=\"line\">    if (pageContent) &#123;</div><div class=\"line\">      pageContent.addEventListener(&apos;scroll&apos;, this.scroll, false);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      window.addEventListener(&apos;scroll&apos;, this.scroll, false);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillUnmount() &#123;</div><div class=\"line\">    console.log(&apos;window removeEventListener&apos;);</div><div class=\"line\">    const pageContent = document.querySelector(&apos;.page-content&apos;);</div><div class=\"line\"></div><div class=\"line\">    if (pageContent) &#123;</div><div class=\"line\">      pageContent.removeEventListener(&apos;scroll&apos;, this.scroll, false);</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">      window.removeEventListener(&apos;scroll&apos;, this.scroll, false);</div><div class=\"line\">    &#125;</div><div class=\"line\">    timer = null;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div className=&quot;loading-component&quot; ref=&quot;loading&quot;&gt;</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          &lt;span className=&quot;font&quot;&gt;加载中...&lt;/span&gt;</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export default LoadingMore;</div></pre></td></tr></table></figure>\n<p>优化，滚动至底部是显示没有更多数据</p>\n<h2 id=\"webpack神器\"><a href=\"#webpack神器\" class=\"headerlink\" title=\"webpack神器\"></a>webpack神器</h2><p>配制：devtool: ‘source-map’, 结合react插件就可以打断点了</p>\n<h2 id=\"思想转变\"><a href=\"#思想转变\" class=\"headerlink\" title=\"思想转变\"></a>思想转变</h2><p>由于惯性思维，设置一些status时，只想到通过两种状态如何控制视图的显示。有时候一些逻辑只用true或者false两种状态是不够的，可以使用status（1,2,3…）</p>\n<h2 id=\"在入口页面判断是否登录\"><a href=\"#在入口页面判断是否登录\" class=\"headerlink\" title=\"在入口页面判断是否登录\"></a>在入口页面判断是否登录</h2><p>之前错误的处理逻辑为，把入口页面index作为一个容器，根据情况平判断加载login页面还是首页，这样操作的问题是，在同一个页面中处理两套生命周期比较是比较复杂的<br>1 render先执行根据默认值会加载login页面<br>2 当didmound中拿到登录状态发现已经登录，再去加载首页</p>\n<p>处理：<br>在没有拿到登录状态时先不渲染，拿到登录状态了，如果用户已经登陆在入口页加载首页，如果没有直接跳转至登录页面</p>\n<h2 id=\"ios-fix-布局\"><a href=\"#ios-fix-布局\" class=\"headerlink\" title=\"ios fix 布局\"></a>ios fix 布局</h2><p>由于position: fixed在ios中存在的问题较大，使用了相对定位做了替代</p>\n<blockquote>\n<p>页面结构修改<br>由于ios对fix属性支持的不好，因此用absolute来替换<br>需要处理的内容，如果不需要顶部固定可以做不处理<br>1 顶部标题栏（header）和页面内容（page-content）和页脚（footer）为并列关系，被page包含，都是用绝对定位<br>2 页面内容（page-content）需要设置为纵向滚动，据顶部的距离为头部的高度<br>3 此时的滚动加载更多的组件滚动区域不是相对于window而是page-content<br>4 需要定位的固定在底部的元素可以在page-content外面绝对定位，需要区别个别手机键盘将文字顶起的情况,还有滚动一段距离固定的问题</p>\n</blockquote>\n<h2 id=\"低版本手机中不支持set\"><a href=\"#低版本手机中不支持set\" class=\"headerlink\" title=\"低版本手机中不支持set\"></a>低版本手机中不支持set</h2><p>react 16 依赖 Set、Map、requestAnimationFrame，如果在不支持的浏览器请使用 pollyfil,处理这个问题的时候怂了，由于不清楚react16还有什么坑，我把版本设为了15.6。</p>\n<h2 id=\"h5资源本地化的理解\"><a href=\"#h5资源本地化的理解\" class=\"headerlink\" title=\"h5资源本地化的理解\"></a>h5资源本地化的理解</h2><p>就是将我们的部分文件放在手机内存中，目前的app仅有10M,由于菜单等信息都是接口获取的，暂时没有考虑资源本地化</p>\n<h2 id=\"react路由以及props改变时触发的触发的钩子函数-componentWillReceiveProps\"><a href=\"#react路由以及props改变时触发的触发的钩子函数-componentWillReceiveProps\" class=\"headerlink\" title=\"react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps\"></a>react路由以及props改变时触发的触发的钩子函数 componentWillReceiveProps</h2><p><a href=\"https://segmentfault.com/q/1010000012169944?_ea=2905143\" target=\"_blank\" rel=\"external\">React router 4 带参数的路由，从”/album?id=1”访问”/album?id=2”该如何重新渲染？</a> 还是第一次在sf上回答，有点小激动，嘻嘻~</p>\n<h2 id=\"jsx语法遍历对象\"><a href=\"#jsx语法遍历对象\" class=\"headerlink\" title=\"jsx语法遍历对象\"></a>jsx语法遍历对象</h2><p>通过<code>Object.keys(obj)</code>来将对象转成数组，再用map去处理，其中需要注意的是，jsx语法中render的是一个对象他只会对这个对象执行，render一个组件才会被渲染在是视图中<br>eg:<br><code>{&lt;component /&gt;}</code> // 不会被渲染<br><code>&lt;component /&gt;</code> // 会渲染</p>\n<h2 id=\"require的神奇情况\"><a href=\"#require的神奇情况\" class=\"headerlink\" title=\"require的神奇情况\"></a>require的神奇情况</h2><p>require在一些情况下直接读一个变量会报错，如果这样写require(‘../abc’+data)才可以，很神奇，情况不明</p>\n<h2 id=\"待处理\"><a href=\"#待处理\" class=\"headerlink\" title=\"待处理\"></a>待处理</h2><p>1 对应一个分页的页面，滚动一定的距离，进入详情页面，再返回的时候，列表页中滚动条的位置不应该被初始化到顶部<br>2 对于项目中的四个tab也，每次切换的时候都会有接口调用，会出现屏闪的问题，页面优化</p>\n"},{"title":"this的工作原理","date":"2017-10-10T05:34:38.000Z","_content":"this有一下五种指向\n1 全局范围内的this，指向全局对象\n2 function中的this，指向全局对象\n3 方法中的this,指向当前对象\n4 通过new关键字生成的，指向新生成的对象\n5 通过call, apply, bind方法时，函数的this指向第一个参数\n\n[参考页面，js秘密花园](http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this)\n","source":"_posts/this的工作原理.md","raw":"---\ntitle: this的工作原理\ndate: 2017-10-10 13:34:38\ncategories: js\ntags: js基础\n---\nthis有一下五种指向\n1 全局范围内的this，指向全局对象\n2 function中的this，指向全局对象\n3 方法中的this,指向当前对象\n4 通过new关键字生成的，指向新生成的对象\n5 通过call, apply, bind方法时，函数的this指向第一个参数\n\n[参考页面，js秘密花园](http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this)\n","slug":"this的工作原理","published":1,"updated":"2017-10-10T05:44:01.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk4g000kjsvcxuy6lgmg","content":"<p>this有一下五种指向<br>1 全局范围内的this，指向全局对象<br>2 function中的this，指向全局对象<br>3 方法中的this,指向当前对象<br>4 通过new关键字生成的，指向新生成的对象<br>5 通过call, apply, bind方法时，函数的this指向第一个参数</p>\n<p><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this\" target=\"_blank\" rel=\"external\">参考页面，js秘密花园</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>this有一下五种指向<br>1 全局范围内的this，指向全局对象<br>2 function中的this，指向全局对象<br>3 方法中的this,指向当前对象<br>4 通过new关键字生成的，指向新生成的对象<br>5 通过call, apply, bind方法时，函数的this指向第一个参数</p>\n<p><a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/#function.this\" target=\"_blank\" rel=\"external\">参考页面，js秘密花园</a></p>\n"},{"title":"创建对象","date":"2017-09-29T05:09:17.000Z","_content":"\n  ![](/img/创建对象.png)\n  对象描述： 无序的key,value键值对\n\n  >整个对象发展的过程：\n    ——》先是有个new一个对象的写法\n      简化写法\n    ——》对象字面量（可以使用对象写法）\n      批量生产\n    ——》工厂模式（new Object）\n      区别自定义对象类型\n    ——》构造函数类型（可以new 自定义类型, 构造函数定义来了）\n      解决函数类型实例化造成的空间浪费\n    ——》原型模式（出现原型对象）\n      原型对象为实例共享，引用类型修改时会对其它实例造成影响\n    ——》组合使用构造函数原型模式（1+1 = ？）\n    ...\n  一系列的相关的问题\n  this指向，改变this指向的途径，作用域，识别实例来自哪个构造函数，对象看成一个key,value列表因此出现元素遍历,区别实例属性原型链属相->for in->..\n\n## 创建自定义对象\n  对象字面量\n  ```\n  var person = {\n    name: 'aa',\n    age: 18\n  }\n\n  Object实例创建\n  var person = new Object();\n  person.name = 'aa';\n  person.age = 18;\n  ```\n\n## 属性\n  数据属性\n  访问器属性： 封装一些组件时一些高级用法时使用\n\n## 工厂模式\n  ```\n  function createPerson(name, age) {\n    var o =  new Object();\n    o.name = name;\n    o.age = age;\n    return o;\n  }\n\n  var p1 = createPerson('abc', '16');\n  ```\n  解决构造函数或者对象字面量重复的问题，就好比一个蛋糕模子，每次创造出一模一样的东西，缺点：无法区别这些蛋糕（没有解决对象的识别问题）\n\n## 构造函数模式\n  ![](/img/构造函数执行过程.png)\n  与工厂模式比较有点是可以将实例识别为某一种特定的类型\n  为了区别构造函数和普通函数构造函数首字符大写，构造函数本质就是普通函数，当使用关键字new的时候会产生神奇的变化\n  1 创建新对象\n  2 将构造函数的作用域赋值给新对象（this指向改变）\n  3 执行构造函数的代码（为新对象添加属性）\n  4 返回新对象\n\n  ```\n  function Person(name, age) {\n    this.name = name;\n    this.age = age;\n    console.log(1);\n  }\n  var p1 = new Person();\n  ```\n  缺点：属性为function类型时，多次创建实例的同时也会创建多个function实例\n\n## 原型模式\n  原型模式需要理清 构造函数，实例，原型对象之间的关系\n  ### 1 理解原型对象\n  每个函数都有prototype属性，存储了原型对象。创建原型对象后会自动获取constructor属相，其余属性都是从Object上继承而来\n  方法：\n  ```\n  function Person() {}\n  Person.prototype.name = 'name';\n  Person.prototype.age = 'agePro';\n  var person1 = new Person();\n  person1.age = 'age';\n\n  Person.prototype.isPrototypeOf(person1)// true;\n\n  // 返回原型链上的值\n  Object.getPrototypeOf(person1);\n\n  // 使用delete可以删除实例属性，那么就可以正常获取原型属性了\n  delete person1.age\n\n  // hasOwnProperty,判断属相是否为实例属性\n  person1.hasOwnProperty('age') //boolean\n  ```\n\n  ### 原型与in操作符\n  in 两种使用方式 单独使用/ for in 循环\n  for in循环可以遍历可枚举的属性，因此位于原型或者实例的都可以扫描到\n  in 使用\n  ```\n  \"age\" in person1\n  // 判断属相属于实例还是原型：\n  function hasPrototypePropertype(obj, name) {\n    return !obj.hasOwnProperty(name) && (name in obj);\n  }\n\n  // Object添加keys()属性，返回所有可枚举的属性（字符串数组）\n  Object.keys(person1)\n  // 返回所有属性，包括不可以枚举属性\n  Object.getOwnPropertyNames(person1)\n  Object.getOwnPropertyNames(Person.prototype)\n\n  ```\n  ### 更简单的原型语法\n  ```\n  function Person() {}\n  Person.prototype = {\n    constructor: Person, // 需要添加这个，否则constructor指针将不指向person，重新设置constructor属性会导致该属性标记为可枚举类型，不过可以重新定义为definePropoty(Person.prototype, 'constructor', {\n      enumerable: false,\n      value: Person\n      })\n    name: 'name',\n    age: 'age'\n  }\n  ```\n\n  ### 原型的动态性\n  ```\n  function Person() {}\n  var p2 = new Person();\n  Person.prototype = {\n    constructor: Person,\n    name: 'name',\n    age: 'age'\n  }\n  p2.age // undefined\n\n  function Person() {}\n  var person1 = new Person();\n  Person.prototype.name = 'name';\n  Person.prototype.age = 'agePro';\n  person1.age; // agePro\n  ```\n\n  ### 原生对象的原型\n  所有原生的引用类型都是通过原型模式创建的，他们都在构造函数的原型上添加了方法，因此可以给这些原生对象添加原型属性，这样不好，，\n\n  ### 原型对象的问题\n  实例可以更改引用类型的属性，导致其他的实例受影响\n\n## 组合使用构造函数原型模式\n  没啥好说的，结合了两种模式的优点，是使用最广泛的模式了\n\n## 动态原型模式\n  模仿其他oop语言，将所有信息封装在构造函数中。增加`if`判断语句，在执行构造函数时初始化实例方法。\n\n## 寄生构造函数模式\n  和工厂模式一样，除了实例化时使用了new关键字调用构造函数,在某些特殊情况使用，比如创建一个具有额外方法的数组。\n  ```\n  function createPerson(name, age) {\n    var o =  new Object();\n    o.name = name;\n    o.age = age;\n    return o;\n  }\n\n  var p1 = new createPerson('abc', '16');\n  ```\n\n## 稳妥构造函数模式\n  和寄生构造函数类似，不同的是： 1 构造函数中不能使用`this`；2 不能用`new`关键字调用构造函数； 3 可以定义私有变量，不能通过实例直接访问属性，有点像oop中的`私有属性`，哭，，\n  ```\n  function createPerson(name) {\n    var o =  new Object();\n    // 可以定义私有变量\n    o.sayName = function() {\n      alert(name)\n    }\n    return o;\n  }\n\n  var p1 = createPerson('abc');\n  p1.sayName();// 只能通过调用sayName方法访问属性。\n  ```\n\n## 问题\n  [操作符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete) `in` `typeof` `instanceof` `delete`\n  [Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object) 好神奇\n  [Function.prototype](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call).[call|aplly|bind|isGenerator|toSource|toString]\n\n  bind：改变this指向，不执行函数体，返回改变this后的函数引用\n  call,apply: 改变this指向，执行函数体，返回执行结果\n  ```\n  this.x=10;\n  var obj = {\n    x: 100,\n    num: function(desc) {\n      console.log(desc+this.x)\n    }\n  }\n\n  obj.x; // 100\n  obj.num('d'); // 100\n  var b = obj.num;// 此刻的this为函数的this，指向全局\n  b('e'); // 10\n  var b2 = b.bind(obj,'a');\n  b2('f'); // 100\n  var b3 = b.call(obj, 'b') // 100\n  var b3 = b.apply(obj, ['c']) // 100\n  ```\n\n  this指向\n  new一个对象都做了什么\n  constructor属性指向构造函数,作用？ https://segmentfault.com/q/1010000000347868\n  函数作用域，函数的this指向\n  作用域（函数作用域，全局作用域，es6块作用域）\n  好像没有删除原型属性的方法\n  [参考网站](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n","source":"_posts/创建对象.md","raw":"---\ntitle: 创建对象\ndate: 2017-09-29 13:09:17\ncategories: js\ntags: js基础\n---\n\n  ![](/img/创建对象.png)\n  对象描述： 无序的key,value键值对\n\n  >整个对象发展的过程：\n    ——》先是有个new一个对象的写法\n      简化写法\n    ——》对象字面量（可以使用对象写法）\n      批量生产\n    ——》工厂模式（new Object）\n      区别自定义对象类型\n    ——》构造函数类型（可以new 自定义类型, 构造函数定义来了）\n      解决函数类型实例化造成的空间浪费\n    ——》原型模式（出现原型对象）\n      原型对象为实例共享，引用类型修改时会对其它实例造成影响\n    ——》组合使用构造函数原型模式（1+1 = ？）\n    ...\n  一系列的相关的问题\n  this指向，改变this指向的途径，作用域，识别实例来自哪个构造函数，对象看成一个key,value列表因此出现元素遍历,区别实例属性原型链属相->for in->..\n\n## 创建自定义对象\n  对象字面量\n  ```\n  var person = {\n    name: 'aa',\n    age: 18\n  }\n\n  Object实例创建\n  var person = new Object();\n  person.name = 'aa';\n  person.age = 18;\n  ```\n\n## 属性\n  数据属性\n  访问器属性： 封装一些组件时一些高级用法时使用\n\n## 工厂模式\n  ```\n  function createPerson(name, age) {\n    var o =  new Object();\n    o.name = name;\n    o.age = age;\n    return o;\n  }\n\n  var p1 = createPerson('abc', '16');\n  ```\n  解决构造函数或者对象字面量重复的问题，就好比一个蛋糕模子，每次创造出一模一样的东西，缺点：无法区别这些蛋糕（没有解决对象的识别问题）\n\n## 构造函数模式\n  ![](/img/构造函数执行过程.png)\n  与工厂模式比较有点是可以将实例识别为某一种特定的类型\n  为了区别构造函数和普通函数构造函数首字符大写，构造函数本质就是普通函数，当使用关键字new的时候会产生神奇的变化\n  1 创建新对象\n  2 将构造函数的作用域赋值给新对象（this指向改变）\n  3 执行构造函数的代码（为新对象添加属性）\n  4 返回新对象\n\n  ```\n  function Person(name, age) {\n    this.name = name;\n    this.age = age;\n    console.log(1);\n  }\n  var p1 = new Person();\n  ```\n  缺点：属性为function类型时，多次创建实例的同时也会创建多个function实例\n\n## 原型模式\n  原型模式需要理清 构造函数，实例，原型对象之间的关系\n  ### 1 理解原型对象\n  每个函数都有prototype属性，存储了原型对象。创建原型对象后会自动获取constructor属相，其余属性都是从Object上继承而来\n  方法：\n  ```\n  function Person() {}\n  Person.prototype.name = 'name';\n  Person.prototype.age = 'agePro';\n  var person1 = new Person();\n  person1.age = 'age';\n\n  Person.prototype.isPrototypeOf(person1)// true;\n\n  // 返回原型链上的值\n  Object.getPrototypeOf(person1);\n\n  // 使用delete可以删除实例属性，那么就可以正常获取原型属性了\n  delete person1.age\n\n  // hasOwnProperty,判断属相是否为实例属性\n  person1.hasOwnProperty('age') //boolean\n  ```\n\n  ### 原型与in操作符\n  in 两种使用方式 单独使用/ for in 循环\n  for in循环可以遍历可枚举的属性，因此位于原型或者实例的都可以扫描到\n  in 使用\n  ```\n  \"age\" in person1\n  // 判断属相属于实例还是原型：\n  function hasPrototypePropertype(obj, name) {\n    return !obj.hasOwnProperty(name) && (name in obj);\n  }\n\n  // Object添加keys()属性，返回所有可枚举的属性（字符串数组）\n  Object.keys(person1)\n  // 返回所有属性，包括不可以枚举属性\n  Object.getOwnPropertyNames(person1)\n  Object.getOwnPropertyNames(Person.prototype)\n\n  ```\n  ### 更简单的原型语法\n  ```\n  function Person() {}\n  Person.prototype = {\n    constructor: Person, // 需要添加这个，否则constructor指针将不指向person，重新设置constructor属性会导致该属性标记为可枚举类型，不过可以重新定义为definePropoty(Person.prototype, 'constructor', {\n      enumerable: false,\n      value: Person\n      })\n    name: 'name',\n    age: 'age'\n  }\n  ```\n\n  ### 原型的动态性\n  ```\n  function Person() {}\n  var p2 = new Person();\n  Person.prototype = {\n    constructor: Person,\n    name: 'name',\n    age: 'age'\n  }\n  p2.age // undefined\n\n  function Person() {}\n  var person1 = new Person();\n  Person.prototype.name = 'name';\n  Person.prototype.age = 'agePro';\n  person1.age; // agePro\n  ```\n\n  ### 原生对象的原型\n  所有原生的引用类型都是通过原型模式创建的，他们都在构造函数的原型上添加了方法，因此可以给这些原生对象添加原型属性，这样不好，，\n\n  ### 原型对象的问题\n  实例可以更改引用类型的属性，导致其他的实例受影响\n\n## 组合使用构造函数原型模式\n  没啥好说的，结合了两种模式的优点，是使用最广泛的模式了\n\n## 动态原型模式\n  模仿其他oop语言，将所有信息封装在构造函数中。增加`if`判断语句，在执行构造函数时初始化实例方法。\n\n## 寄生构造函数模式\n  和工厂模式一样，除了实例化时使用了new关键字调用构造函数,在某些特殊情况使用，比如创建一个具有额外方法的数组。\n  ```\n  function createPerson(name, age) {\n    var o =  new Object();\n    o.name = name;\n    o.age = age;\n    return o;\n  }\n\n  var p1 = new createPerson('abc', '16');\n  ```\n\n## 稳妥构造函数模式\n  和寄生构造函数类似，不同的是： 1 构造函数中不能使用`this`；2 不能用`new`关键字调用构造函数； 3 可以定义私有变量，不能通过实例直接访问属性，有点像oop中的`私有属性`，哭，，\n  ```\n  function createPerson(name) {\n    var o =  new Object();\n    // 可以定义私有变量\n    o.sayName = function() {\n      alert(name)\n    }\n    return o;\n  }\n\n  var p1 = createPerson('abc');\n  p1.sayName();// 只能通过调用sayName方法访问属性。\n  ```\n\n## 问题\n  [操作符](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete) `in` `typeof` `instanceof` `delete`\n  [Object](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object) 好神奇\n  [Function.prototype](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call).[call|aplly|bind|isGenerator|toSource|toString]\n\n  bind：改变this指向，不执行函数体，返回改变this后的函数引用\n  call,apply: 改变this指向，执行函数体，返回执行结果\n  ```\n  this.x=10;\n  var obj = {\n    x: 100,\n    num: function(desc) {\n      console.log(desc+this.x)\n    }\n  }\n\n  obj.x; // 100\n  obj.num('d'); // 100\n  var b = obj.num;// 此刻的this为函数的this，指向全局\n  b('e'); // 10\n  var b2 = b.bind(obj,'a');\n  b2('f'); // 100\n  var b3 = b.call(obj, 'b') // 100\n  var b3 = b.apply(obj, ['c']) // 100\n  ```\n\n  this指向\n  new一个对象都做了什么\n  constructor属性指向构造函数,作用？ https://segmentfault.com/q/1010000000347868\n  函数作用域，函数的this指向\n  作用域（函数作用域，全局作用域，es6块作用域）\n  好像没有删除原型属性的方法\n  [参考网站](http://bonsaiden.github.io/JavaScript-Garden/zh/)\n","slug":"创建对象","published":1,"updated":"2017-10-11T02:46:45.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk4m000ojsvcj62uidza","content":"<p>  <img src=\"/img/创建对象.png\" alt=\"\"><br>  对象描述： 无序的key,value键值对</p>\n<blockquote>\n<p>整个对象发展的过程：<br>    ——》先是有个new一个对象的写法<br>      简化写法<br>    ——》对象字面量（可以使用对象写法）<br>      批量生产<br>    ——》工厂模式（new Object）<br>      区别自定义对象类型<br>    ——》构造函数类型（可以new 自定义类型, 构造函数定义来了）<br>      解决函数类型实例化造成的空间浪费<br>    ——》原型模式（出现原型对象）<br>      原型对象为实例共享，引用类型修改时会对其它实例造成影响<br>    ——》组合使用构造函数原型模式（1+1 = ？）<br>    …<br>  一系列的相关的问题<br>  this指向，改变this指向的途径，作用域，识别实例来自哪个构造函数，对象看成一个key,value列表因此出现元素遍历,区别实例属性原型链属相-&gt;for in-&gt;..</p>\n</blockquote>\n<h2 id=\"创建自定义对象\"><a href=\"#创建自定义对象\" class=\"headerlink\" title=\"创建自定义对象\"></a>创建自定义对象</h2><p>  对象字面量<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = &#123;</div><div class=\"line\">  name: &apos;aa&apos;,</div><div class=\"line\">  age: 18</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Object实例创建</div><div class=\"line\">var person = new Object();</div><div class=\"line\">person.name = &apos;aa&apos;;</div><div class=\"line\">person.age = 18;</div></pre></td></tr></table></figure></p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>  数据属性<br>  访问器属性： 封装一些组件时一些高级用法时使用</p>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createPerson(name, age) &#123;</div><div class=\"line\">  var o =  new Object();</div><div class=\"line\">  o.name = name;</div><div class=\"line\">  o.age = age;</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p1 = createPerson(&apos;abc&apos;, &apos;16&apos;);</div></pre></td></tr></table></figure>\n<p>  解决构造函数或者对象字面量重复的问题，就好比一个蛋糕模子，每次创造出一模一样的东西，缺点：无法区别这些蛋糕（没有解决对象的识别问题）</p>\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><p>  <img src=\"/img/构造函数执行过程.png\" alt=\"\"><br>  与工厂模式比较有点是可以将实例识别为某一种特定的类型<br>  为了区别构造函数和普通函数构造函数首字符大写，构造函数本质就是普通函数，当使用关键字new的时候会产生神奇的变化<br>  1 创建新对象<br>  2 将构造函数的作用域赋值给新对象（this指向改变）<br>  3 执行构造函数的代码（为新对象添加属性）<br>  4 返回新对象</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  console.log(1);</div><div class=\"line\">&#125;</div><div class=\"line\">var p1 = new Person();</div></pre></td></tr></table></figure>\n<p>  缺点：属性为function类型时，多次创建实例的同时也会创建多个function实例</p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>  原型模式需要理清 构造函数，实例，原型对象之间的关系</p>\n<h3 id=\"1-理解原型对象\"><a href=\"#1-理解原型对象\" class=\"headerlink\" title=\"1 理解原型对象\"></a>1 理解原型对象</h3><p>  每个函数都有prototype属性，存储了原型对象。创建原型对象后会自动获取constructor属相，其余属性都是从Object上继承而来<br>  方法：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;&#125;</div><div class=\"line\">Person.prototype.name = &apos;name&apos;;</div><div class=\"line\">Person.prototype.age = &apos;agePro&apos;;</div><div class=\"line\">var person1 = new Person();</div><div class=\"line\">person1.age = &apos;age&apos;;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.isPrototypeOf(person1)// true;</div><div class=\"line\"></div><div class=\"line\">// 返回原型链上的值</div><div class=\"line\">Object.getPrototypeOf(person1);</div><div class=\"line\"></div><div class=\"line\">// 使用delete可以删除实例属性，那么就可以正常获取原型属性了</div><div class=\"line\">delete person1.age</div><div class=\"line\"></div><div class=\"line\">// hasOwnProperty,判断属相是否为实例属性</div><div class=\"line\">person1.hasOwnProperty(&apos;age&apos;) //boolean</div></pre></td></tr></table></figure></p>\n<h3 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h3><p>  in 两种使用方式 单独使用/ for in 循环<br>  for in循环可以遍历可枚举的属性，因此位于原型或者实例的都可以扫描到<br>  in 使用<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;age&quot; in person1</div><div class=\"line\">// 判断属相属于实例还是原型：</div><div class=\"line\">function hasPrototypePropertype(obj, name) &#123;</div><div class=\"line\">  return !obj.hasOwnProperty(name) &amp;&amp; (name in obj);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Object添加keys()属性，返回所有可枚举的属性（字符串数组）</div><div class=\"line\">Object.keys(person1)</div><div class=\"line\">// 返回所有属性，包括不可以枚举属性</div><div class=\"line\">Object.getOwnPropertyNames(person1)</div><div class=\"line\">Object.getOwnPropertyNames(Person.prototype)</div></pre></td></tr></table></figure></p>\n<h3 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  constructor: Person, // 需要添加这个，否则constructor指针将不指向person，重新设置constructor属性会导致该属性标记为可枚举类型，不过可以重新定义为definePropoty(Person.prototype, &apos;constructor&apos;, &#123;</div><div class=\"line\">    enumerable: false,</div><div class=\"line\">    value: Person</div><div class=\"line\">    &#125;)</div><div class=\"line\">  name: &apos;name&apos;,</div><div class=\"line\">  age: &apos;age&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"原型的动态性\"><a href=\"#原型的动态性\" class=\"headerlink\" title=\"原型的动态性\"></a>原型的动态性</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;&#125;</div><div class=\"line\">var p2 = new Person();</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  constructor: Person,</div><div class=\"line\">  name: &apos;name&apos;,</div><div class=\"line\">  age: &apos;age&apos;</div><div class=\"line\">&#125;</div><div class=\"line\">p2.age // undefined</div><div class=\"line\"></div><div class=\"line\">function Person() &#123;&#125;</div><div class=\"line\">var person1 = new Person();</div><div class=\"line\">Person.prototype.name = &apos;name&apos;;</div><div class=\"line\">Person.prototype.age = &apos;agePro&apos;;</div><div class=\"line\">person1.age; // agePro</div></pre></td></tr></table></figure>\n<h3 id=\"原生对象的原型\"><a href=\"#原生对象的原型\" class=\"headerlink\" title=\"原生对象的原型\"></a>原生对象的原型</h3><p>  所有原生的引用类型都是通过原型模式创建的，他们都在构造函数的原型上添加了方法，因此可以给这些原生对象添加原型属性，这样不好，，</p>\n<h3 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h3><p>  实例可以更改引用类型的属性，导致其他的实例受影响</p>\n<h2 id=\"组合使用构造函数原型模式\"><a href=\"#组合使用构造函数原型模式\" class=\"headerlink\" title=\"组合使用构造函数原型模式\"></a>组合使用构造函数原型模式</h2><p>  没啥好说的，结合了两种模式的优点，是使用最广泛的模式了</p>\n<h2 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h2><p>  模仿其他oop语言，将所有信息封装在构造函数中。增加<code>if</code>判断语句，在执行构造函数时初始化实例方法。</p>\n<h2 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h2><p>  和工厂模式一样，除了实例化时使用了new关键字调用构造函数,在某些特殊情况使用，比如创建一个具有额外方法的数组。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createPerson(name, age) &#123;</div><div class=\"line\">  var o =  new Object();</div><div class=\"line\">  o.name = name;</div><div class=\"line\">  o.age = age;</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p1 = new createPerson(&apos;abc&apos;, &apos;16&apos;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h2><p>  和寄生构造函数类似，不同的是： 1 构造函数中不能使用<code>this</code>；2 不能用<code>new</code>关键字调用构造函数； 3 可以定义私有变量，不能通过实例直接访问属性，有点像oop中的<code>私有属性</code>，哭，，<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createPerson(name) &#123;</div><div class=\"line\">  var o =  new Object();</div><div class=\"line\">  // 可以定义私有变量</div><div class=\"line\">  o.sayName = function() &#123;</div><div class=\"line\">    alert(name)</div><div class=\"line\">  &#125;</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p1 = createPerson(&apos;abc&apos;);</div><div class=\"line\">p1.sayName();// 只能通过调用sayName方法访问属性。</div></pre></td></tr></table></figure></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\" target=\"_blank\" rel=\"external\">操作符</a> <code>in</code> <code>typeof</code> <code>instanceof</code> <code>delete</code><br>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"external\">Object</a> 好神奇<br>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"external\">Function.prototype</a>.[call|aplly|bind|isGenerator|toSource|toString]</p>\n<p>  bind：改变this指向，不执行函数体，返回改变this后的函数引用<br>  call,apply: 改变this指向，执行函数体，返回执行结果<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.x=10;</div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  x: 100,</div><div class=\"line\">  num: function(desc) &#123;</div><div class=\"line\">    console.log(desc+this.x)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.x; // 100</div><div class=\"line\">obj.num(&apos;d&apos;); // 100</div><div class=\"line\">var b = obj.num;// 此刻的this为函数的this，指向全局</div><div class=\"line\">b(&apos;e&apos;); // 10</div><div class=\"line\">var b2 = b.bind(obj,&apos;a&apos;);</div><div class=\"line\">b2(&apos;f&apos;); // 100</div><div class=\"line\">var b3 = b.call(obj, &apos;b&apos;) // 100</div><div class=\"line\">var b3 = b.apply(obj, [&apos;c&apos;]) // 100</div></pre></td></tr></table></figure></p>\n<p>  this指向<br>  new一个对象都做了什么<br>  constructor属性指向构造函数,作用？ <a href=\"https://segmentfault.com/q/1010000000347868\" target=\"_blank\" rel=\"external\">https://segmentfault.com/q/1010000000347868</a><br>  函数作用域，函数的this指向<br>  作用域（函数作用域，全局作用域，es6块作用域）<br>  好像没有删除原型属性的方法<br>  <a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"external\">参考网站</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>  <img src=\"/img/创建对象.png\" alt=\"\"><br>  对象描述： 无序的key,value键值对</p>\n<blockquote>\n<p>整个对象发展的过程：<br>    ——》先是有个new一个对象的写法<br>      简化写法<br>    ——》对象字面量（可以使用对象写法）<br>      批量生产<br>    ——》工厂模式（new Object）<br>      区别自定义对象类型<br>    ——》构造函数类型（可以new 自定义类型, 构造函数定义来了）<br>      解决函数类型实例化造成的空间浪费<br>    ——》原型模式（出现原型对象）<br>      原型对象为实例共享，引用类型修改时会对其它实例造成影响<br>    ——》组合使用构造函数原型模式（1+1 = ？）<br>    …<br>  一系列的相关的问题<br>  this指向，改变this指向的途径，作用域，识别实例来自哪个构造函数，对象看成一个key,value列表因此出现元素遍历,区别实例属性原型链属相-&gt;for in-&gt;..</p>\n</blockquote>\n<h2 id=\"创建自定义对象\"><a href=\"#创建自定义对象\" class=\"headerlink\" title=\"创建自定义对象\"></a>创建自定义对象</h2><p>  对象字面量<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = &#123;</div><div class=\"line\">  name: &apos;aa&apos;,</div><div class=\"line\">  age: 18</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Object实例创建</div><div class=\"line\">var person = new Object();</div><div class=\"line\">person.name = &apos;aa&apos;;</div><div class=\"line\">person.age = 18;</div></pre></td></tr></table></figure></p>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>  数据属性<br>  访问器属性： 封装一些组件时一些高级用法时使用</p>\n<h2 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createPerson(name, age) &#123;</div><div class=\"line\">  var o =  new Object();</div><div class=\"line\">  o.name = name;</div><div class=\"line\">  o.age = age;</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p1 = createPerson(&apos;abc&apos;, &apos;16&apos;);</div></pre></td></tr></table></figure>\n<p>  解决构造函数或者对象字面量重复的问题，就好比一个蛋糕模子，每次创造出一模一样的东西，缺点：无法区别这些蛋糕（没有解决对象的识别问题）</p>\n<h2 id=\"构造函数模式\"><a href=\"#构造函数模式\" class=\"headerlink\" title=\"构造函数模式\"></a>构造函数模式</h2><p>  <img src=\"/img/构造函数执行过程.png\" alt=\"\"><br>  与工厂模式比较有点是可以将实例识别为某一种特定的类型<br>  为了区别构造函数和普通函数构造函数首字符大写，构造函数本质就是普通函数，当使用关键字new的时候会产生神奇的变化<br>  1 创建新对象<br>  2 将构造函数的作用域赋值给新对象（this指向改变）<br>  3 执行构造函数的代码（为新对象添加属性）<br>  4 返回新对象</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  console.log(1);</div><div class=\"line\">&#125;</div><div class=\"line\">var p1 = new Person();</div></pre></td></tr></table></figure>\n<p>  缺点：属性为function类型时，多次创建实例的同时也会创建多个function实例</p>\n<h2 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h2><p>  原型模式需要理清 构造函数，实例，原型对象之间的关系</p>\n<h3 id=\"1-理解原型对象\"><a href=\"#1-理解原型对象\" class=\"headerlink\" title=\"1 理解原型对象\"></a>1 理解原型对象</h3><p>  每个函数都有prototype属性，存储了原型对象。创建原型对象后会自动获取constructor属相，其余属性都是从Object上继承而来<br>  方法：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;&#125;</div><div class=\"line\">Person.prototype.name = &apos;name&apos;;</div><div class=\"line\">Person.prototype.age = &apos;agePro&apos;;</div><div class=\"line\">var person1 = new Person();</div><div class=\"line\">person1.age = &apos;age&apos;;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.isPrototypeOf(person1)// true;</div><div class=\"line\"></div><div class=\"line\">// 返回原型链上的值</div><div class=\"line\">Object.getPrototypeOf(person1);</div><div class=\"line\"></div><div class=\"line\">// 使用delete可以删除实例属性，那么就可以正常获取原型属性了</div><div class=\"line\">delete person1.age</div><div class=\"line\"></div><div class=\"line\">// hasOwnProperty,判断属相是否为实例属性</div><div class=\"line\">person1.hasOwnProperty(&apos;age&apos;) //boolean</div></pre></td></tr></table></figure></p>\n<h3 id=\"原型与in操作符\"><a href=\"#原型与in操作符\" class=\"headerlink\" title=\"原型与in操作符\"></a>原型与in操作符</h3><p>  in 两种使用方式 单独使用/ for in 循环<br>  for in循环可以遍历可枚举的属性，因此位于原型或者实例的都可以扫描到<br>  in 使用<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;age&quot; in person1</div><div class=\"line\">// 判断属相属于实例还是原型：</div><div class=\"line\">function hasPrototypePropertype(obj, name) &#123;</div><div class=\"line\">  return !obj.hasOwnProperty(name) &amp;&amp; (name in obj);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Object添加keys()属性，返回所有可枚举的属性（字符串数组）</div><div class=\"line\">Object.keys(person1)</div><div class=\"line\">// 返回所有属性，包括不可以枚举属性</div><div class=\"line\">Object.getOwnPropertyNames(person1)</div><div class=\"line\">Object.getOwnPropertyNames(Person.prototype)</div></pre></td></tr></table></figure></p>\n<h3 id=\"更简单的原型语法\"><a href=\"#更简单的原型语法\" class=\"headerlink\" title=\"更简单的原型语法\"></a>更简单的原型语法</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;&#125;</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  constructor: Person, // 需要添加这个，否则constructor指针将不指向person，重新设置constructor属性会导致该属性标记为可枚举类型，不过可以重新定义为definePropoty(Person.prototype, &apos;constructor&apos;, &#123;</div><div class=\"line\">    enumerable: false,</div><div class=\"line\">    value: Person</div><div class=\"line\">    &#125;)</div><div class=\"line\">  name: &apos;name&apos;,</div><div class=\"line\">  age: &apos;age&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"原型的动态性\"><a href=\"#原型的动态性\" class=\"headerlink\" title=\"原型的动态性\"></a>原型的动态性</h3>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;&#125;</div><div class=\"line\">var p2 = new Person();</div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  constructor: Person,</div><div class=\"line\">  name: &apos;name&apos;,</div><div class=\"line\">  age: &apos;age&apos;</div><div class=\"line\">&#125;</div><div class=\"line\">p2.age // undefined</div><div class=\"line\"></div><div class=\"line\">function Person() &#123;&#125;</div><div class=\"line\">var person1 = new Person();</div><div class=\"line\">Person.prototype.name = &apos;name&apos;;</div><div class=\"line\">Person.prototype.age = &apos;agePro&apos;;</div><div class=\"line\">person1.age; // agePro</div></pre></td></tr></table></figure>\n<h3 id=\"原生对象的原型\"><a href=\"#原生对象的原型\" class=\"headerlink\" title=\"原生对象的原型\"></a>原生对象的原型</h3><p>  所有原生的引用类型都是通过原型模式创建的，他们都在构造函数的原型上添加了方法，因此可以给这些原生对象添加原型属性，这样不好，，</p>\n<h3 id=\"原型对象的问题\"><a href=\"#原型对象的问题\" class=\"headerlink\" title=\"原型对象的问题\"></a>原型对象的问题</h3><p>  实例可以更改引用类型的属性，导致其他的实例受影响</p>\n<h2 id=\"组合使用构造函数原型模式\"><a href=\"#组合使用构造函数原型模式\" class=\"headerlink\" title=\"组合使用构造函数原型模式\"></a>组合使用构造函数原型模式</h2><p>  没啥好说的，结合了两种模式的优点，是使用最广泛的模式了</p>\n<h2 id=\"动态原型模式\"><a href=\"#动态原型模式\" class=\"headerlink\" title=\"动态原型模式\"></a>动态原型模式</h2><p>  模仿其他oop语言，将所有信息封装在构造函数中。增加<code>if</code>判断语句，在执行构造函数时初始化实例方法。</p>\n<h2 id=\"寄生构造函数模式\"><a href=\"#寄生构造函数模式\" class=\"headerlink\" title=\"寄生构造函数模式\"></a>寄生构造函数模式</h2><p>  和工厂模式一样，除了实例化时使用了new关键字调用构造函数,在某些特殊情况使用，比如创建一个具有额外方法的数组。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createPerson(name, age) &#123;</div><div class=\"line\">  var o =  new Object();</div><div class=\"line\">  o.name = name;</div><div class=\"line\">  o.age = age;</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p1 = new createPerson(&apos;abc&apos;, &apos;16&apos;);</div></pre></td></tr></table></figure></p>\n<h2 id=\"稳妥构造函数模式\"><a href=\"#稳妥构造函数模式\" class=\"headerlink\" title=\"稳妥构造函数模式\"></a>稳妥构造函数模式</h2><p>  和寄生构造函数类似，不同的是： 1 构造函数中不能使用<code>this</code>；2 不能用<code>new</code>关键字调用构造函数； 3 可以定义私有变量，不能通过实例直接访问属性，有点像oop中的<code>私有属性</code>，哭，，<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createPerson(name) &#123;</div><div class=\"line\">  var o =  new Object();</div><div class=\"line\">  // 可以定义私有变量</div><div class=\"line\">  o.sayName = function() &#123;</div><div class=\"line\">    alert(name)</div><div class=\"line\">  &#125;</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var p1 = createPerson(&apos;abc&apos;);</div><div class=\"line\">p1.sayName();// 只能通过调用sayName方法访问属性。</div></pre></td></tr></table></figure></p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\" target=\"_blank\" rel=\"external\">操作符</a> <code>in</code> <code>typeof</code> <code>instanceof</code> <code>delete</code><br>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"external\">Object</a> 好神奇<br>  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" target=\"_blank\" rel=\"external\">Function.prototype</a>.[call|aplly|bind|isGenerator|toSource|toString]</p>\n<p>  bind：改变this指向，不执行函数体，返回改变this后的函数引用<br>  call,apply: 改变this指向，执行函数体，返回执行结果<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.x=10;</div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  x: 100,</div><div class=\"line\">  num: function(desc) &#123;</div><div class=\"line\">    console.log(desc+this.x)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">obj.x; // 100</div><div class=\"line\">obj.num(&apos;d&apos;); // 100</div><div class=\"line\">var b = obj.num;// 此刻的this为函数的this，指向全局</div><div class=\"line\">b(&apos;e&apos;); // 10</div><div class=\"line\">var b2 = b.bind(obj,&apos;a&apos;);</div><div class=\"line\">b2(&apos;f&apos;); // 100</div><div class=\"line\">var b3 = b.call(obj, &apos;b&apos;) // 100</div><div class=\"line\">var b3 = b.apply(obj, [&apos;c&apos;]) // 100</div></pre></td></tr></table></figure></p>\n<p>  this指向<br>  new一个对象都做了什么<br>  constructor属性指向构造函数,作用？ <a href=\"https://segmentfault.com/q/1010000000347868\" target=\"_blank\" rel=\"external\">https://segmentfault.com/q/1010000000347868</a><br>  函数作用域，函数的this指向<br>  作用域（函数作用域，全局作用域，es6块作用域）<br>  好像没有删除原型属性的方法<br>  <a href=\"http://bonsaiden.github.io/JavaScript-Garden/zh/\" target=\"_blank\" rel=\"external\">参考网站</a></p>\n"},{"title":"国金项目总结","date":"2017-08-24T08:30:50.000Z","_content":"\n# node地址转发\n>方案一种使用由于请求地址不同源存在跨域问题，因此使用使用node地址进行了一次转发\n\n```javascript\n  'use strict';\n\n  const path = require('path');\n  const express = require('express');\n  const proxy = require('express-http-proxy');\n  const proxyUrl = 'https://webapps.yongjinbao.com.cn';\n\n  const app = express();\n  app.use(express.static(__dirname));\n\n\n  app.use('/api', proxy(proxyUrl, { // 当访问含有/api的地址时做转发处理\n    proxyReqPathResolver: (req) => {\n      return require('url').parse(req.url).path;\n    }\n  }));\n\n  app.use('*', function (req, res){// 项目启动后加载的页面\n    res.sendFile(path.resolve(__dirname, 'fund.html'));\n  });\n\n  app.listen(8880, () => {\n    console.log('App is running on port 8880');\n  });\n```\n\n# 数据逻辑处理（同步以及异步处理）\n>方案二，由于客户端不能对接口进行转发，数据仅存在服务器的静态文件中，使用了一种类似于jsonp的请求方式，但不是jsonp,即在静态文件中将所有的数据放在一个变量中。前端通过动态的add `<script>`标签的方式获取在静态文件中定义的变量取值。\n数据分四次获取，每个文件50条，滚动分页的方式加载数据，每次加载10条\n实现思路\n将异步和同步数据的处理逻辑分开写。可能遇到的滚动时获取异步数据时可能取不到，需要添加一个flag标志，当数据获取以后再去做数据渲染\n\n```javascript\n  // 动态加载script\n  function loadScript(url,callback) {\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = 'async';\n    script.src = url;\n    document.body.appendChild(script);\n    script.onload = function(){\n      callback();\n    }\n  }\n\n  // 分情况加载数据\n  function getNews(news_page_num, page_num, isGetScript) {\n    newsLoading = false;\n    var newsData = [];\n    if (isGetScript) {\n      loadScript('https://devtest.yjbtest.com/gjzqwxtest3g/information/data/newsData'+news_page_num+'.json', function() {\n        newsLoading = true;\n        switch (news_page_num) {\n          case 1:\n            newsData = window.newsData1;\n            break;\n          case 2:\n            newsData = window.newsData2;\n            break;\n          case 3:\n            newsData = window.newsData3;\n            break;\n          default:\n            newsData = window.newsData0;\n            break;\n        }\n        renderNews(newsData.slice(0,10));\n      });\n    } else {\n      newsLoading = true;\n      var data = [];\n      switch (news_page_num) {\n        case 1:\n          newsData = window.newsData1;\n          break;\n        case 2:\n          newsData = window.newsData2;\n          break;\n        case 3:\n          newsData = window.newsData3;\n          break;\n        default:\n          newsData = window.newsData0;\n          break;\n      }\n      switch (page_num%5) {\n        case 2:\n          data = newsData.slice(10,20);\n          break;\n        case 3:\n          data = newsData.slice(20,30);\n          break;\n        case 4:\n          data = newsData.slice(30,40);\n          break;\n        case 0:\n          data = newsData.slice(40,50);\n          break;\n      }\n      renderNews(data);\n    }\n  }\n```\n# 无限滚动\n>监听window的scroll事件，在页面的底部放一个loading的div，当滚动事件触发的时候判断loading div据顶部高度是否小于当前文档的高度，如果小于那么loading div就已经展示在页面中了，那么去进行数据获取\n防止数据请求过于频繁添加了一个定时器\n在页面数据加载完成的时候移除滚动事件\n\n```javascript\nwindow.addEventListener('scroll', scrollLoad, false);\nfunction scrollLoad() {\n  if (scrollTimer) {\n    setTimeout(scrollTimer);\n  }\n\n  scrollTimer = setTimeout(function(){\n    var loadingDom = document.querySelector('.scroll-stance-element');\n    var loadingDomTop = loadingDom.getBoundingClientRect().top;\n    var windowHeight = window.innerHeight;\n    if (loadingDomTop && loadingDomTop < windowHeight) {\n      if ($('.new-con-tpl .block').length < 200) {\n        if (!newsLoading) {\n          return;\n        }\n        if (pageNum%5 == 0) {\n          newsPageNum++;\n        }\n        pageNum++;\n        if (pageNum%5 == 1) {\n          getNews(newsPageNum, pageNum, true);\n        } else {\n          getNews(newsPageNum, pageNum);\n        }\n      } else {\n        $('.scroll-stance-element').addClass('hidden');\n        $('.new-nomore').removeClass('hidden');\n        window.removeEventListener('scroll', scrollLoad, false);\n      }\n    }\n  }, 100);\n\n}\n```\n# 根据屏幕宽度对字符串动态进行截取\n>截取字符串\n计算文档的宽度\n获取当前的字号\n计算当前可以容纳的字数\n\n# 进入其他项目咨询页面配置页面路由\n>由于需要跳转至另一个framework7项目中，因此配置了相关的进入页面的路由\n\n```javascript\n  // 获取url里的信息\n  function getQueryValue(name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n    var r = window.location.search.substr(1).match(reg);\n    if (r != null)return unescape(r[2]);\n    return null;\n  }\n```\n# jsonp和直接引入静态js文件(理解jsonp)\n本次中由于只有静态文件，本次以引入文件的方式，在文件加载完成的时候获取约定的变量的方式获取和引入本地文件一样的道理\n比较通俗易懂的方式理解jsonp: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n\n# 其它\n文档加载的两个函数`DOMContentLoaded`， `load`\n\n>在chrome network面板中可以很清新的看到`DOMContentLoaded`页面基本结构加载完成后显示完成时间。和jquery中的$(function(){})一致\n当初始HTML文档已完全加载和解析时，将触发DOMContentLoaded事件，而无需等待样式表，图像和子框架完成加载。——MDN\nhttps://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\n\n```javascript\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n   // ...代码...\n}, false);\n// DOMContentLoaded\n$(document).ready(function() {\n    // ...代码...\n});\n```\n\n`load`页面完全加载显示完成时间\n>当一个资源及其依赖资源已完成加载时，将触发load事件。 ——MDN\n\n```javascript\n  window.addEventListener(\"load\", function() {\n      // ...代码...\n  }, false);\n  $(document).load(function() {\n      // ...代码...\n  });\n```\n","source":"_posts/国金项目总结.md","raw":"---\ntitle: 国金项目总结\ndate: 2017-08-24 16:30:50\ncategories: js\ntags: 工作总结\n---\n\n# node地址转发\n>方案一种使用由于请求地址不同源存在跨域问题，因此使用使用node地址进行了一次转发\n\n```javascript\n  'use strict';\n\n  const path = require('path');\n  const express = require('express');\n  const proxy = require('express-http-proxy');\n  const proxyUrl = 'https://webapps.yongjinbao.com.cn';\n\n  const app = express();\n  app.use(express.static(__dirname));\n\n\n  app.use('/api', proxy(proxyUrl, { // 当访问含有/api的地址时做转发处理\n    proxyReqPathResolver: (req) => {\n      return require('url').parse(req.url).path;\n    }\n  }));\n\n  app.use('*', function (req, res){// 项目启动后加载的页面\n    res.sendFile(path.resolve(__dirname, 'fund.html'));\n  });\n\n  app.listen(8880, () => {\n    console.log('App is running on port 8880');\n  });\n```\n\n# 数据逻辑处理（同步以及异步处理）\n>方案二，由于客户端不能对接口进行转发，数据仅存在服务器的静态文件中，使用了一种类似于jsonp的请求方式，但不是jsonp,即在静态文件中将所有的数据放在一个变量中。前端通过动态的add `<script>`标签的方式获取在静态文件中定义的变量取值。\n数据分四次获取，每个文件50条，滚动分页的方式加载数据，每次加载10条\n实现思路\n将异步和同步数据的处理逻辑分开写。可能遇到的滚动时获取异步数据时可能取不到，需要添加一个flag标志，当数据获取以后再去做数据渲染\n\n```javascript\n  // 动态加载script\n  function loadScript(url,callback) {\n    var script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = 'async';\n    script.src = url;\n    document.body.appendChild(script);\n    script.onload = function(){\n      callback();\n    }\n  }\n\n  // 分情况加载数据\n  function getNews(news_page_num, page_num, isGetScript) {\n    newsLoading = false;\n    var newsData = [];\n    if (isGetScript) {\n      loadScript('https://devtest.yjbtest.com/gjzqwxtest3g/information/data/newsData'+news_page_num+'.json', function() {\n        newsLoading = true;\n        switch (news_page_num) {\n          case 1:\n            newsData = window.newsData1;\n            break;\n          case 2:\n            newsData = window.newsData2;\n            break;\n          case 3:\n            newsData = window.newsData3;\n            break;\n          default:\n            newsData = window.newsData0;\n            break;\n        }\n        renderNews(newsData.slice(0,10));\n      });\n    } else {\n      newsLoading = true;\n      var data = [];\n      switch (news_page_num) {\n        case 1:\n          newsData = window.newsData1;\n          break;\n        case 2:\n          newsData = window.newsData2;\n          break;\n        case 3:\n          newsData = window.newsData3;\n          break;\n        default:\n          newsData = window.newsData0;\n          break;\n      }\n      switch (page_num%5) {\n        case 2:\n          data = newsData.slice(10,20);\n          break;\n        case 3:\n          data = newsData.slice(20,30);\n          break;\n        case 4:\n          data = newsData.slice(30,40);\n          break;\n        case 0:\n          data = newsData.slice(40,50);\n          break;\n      }\n      renderNews(data);\n    }\n  }\n```\n# 无限滚动\n>监听window的scroll事件，在页面的底部放一个loading的div，当滚动事件触发的时候判断loading div据顶部高度是否小于当前文档的高度，如果小于那么loading div就已经展示在页面中了，那么去进行数据获取\n防止数据请求过于频繁添加了一个定时器\n在页面数据加载完成的时候移除滚动事件\n\n```javascript\nwindow.addEventListener('scroll', scrollLoad, false);\nfunction scrollLoad() {\n  if (scrollTimer) {\n    setTimeout(scrollTimer);\n  }\n\n  scrollTimer = setTimeout(function(){\n    var loadingDom = document.querySelector('.scroll-stance-element');\n    var loadingDomTop = loadingDom.getBoundingClientRect().top;\n    var windowHeight = window.innerHeight;\n    if (loadingDomTop && loadingDomTop < windowHeight) {\n      if ($('.new-con-tpl .block').length < 200) {\n        if (!newsLoading) {\n          return;\n        }\n        if (pageNum%5 == 0) {\n          newsPageNum++;\n        }\n        pageNum++;\n        if (pageNum%5 == 1) {\n          getNews(newsPageNum, pageNum, true);\n        } else {\n          getNews(newsPageNum, pageNum);\n        }\n      } else {\n        $('.scroll-stance-element').addClass('hidden');\n        $('.new-nomore').removeClass('hidden');\n        window.removeEventListener('scroll', scrollLoad, false);\n      }\n    }\n  }, 100);\n\n}\n```\n# 根据屏幕宽度对字符串动态进行截取\n>截取字符串\n计算文档的宽度\n获取当前的字号\n计算当前可以容纳的字数\n\n# 进入其他项目咨询页面配置页面路由\n>由于需要跳转至另一个framework7项目中，因此配置了相关的进入页面的路由\n\n```javascript\n  // 获取url里的信息\n  function getQueryValue(name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\");\n    var r = window.location.search.substr(1).match(reg);\n    if (r != null)return unescape(r[2]);\n    return null;\n  }\n```\n# jsonp和直接引入静态js文件(理解jsonp)\n本次中由于只有静态文件，本次以引入文件的方式，在文件加载完成的时候获取约定的变量的方式获取和引入本地文件一样的道理\n比较通俗易懂的方式理解jsonp: http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\n\n# 其它\n文档加载的两个函数`DOMContentLoaded`， `load`\n\n>在chrome network面板中可以很清新的看到`DOMContentLoaded`页面基本结构加载完成后显示完成时间。和jquery中的$(function(){})一致\n当初始HTML文档已完全加载和解析时，将触发DOMContentLoaded事件，而无需等待样式表，图像和子框架完成加载。——MDN\nhttps://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\n\n```javascript\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n   // ...代码...\n}, false);\n// DOMContentLoaded\n$(document).ready(function() {\n    // ...代码...\n});\n```\n\n`load`页面完全加载显示完成时间\n>当一个资源及其依赖资源已完成加载时，将触发load事件。 ——MDN\n\n```javascript\n  window.addEventListener(\"load\", function() {\n      // ...代码...\n  }, false);\n  $(document).load(function() {\n      // ...代码...\n  });\n```\n","slug":"国金项目总结","published":1,"updated":"2017-08-24T09:41:24.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk4q000rjsvc0w6besyr","content":"<h1 id=\"node地址转发\"><a href=\"#node地址转发\" class=\"headerlink\" title=\"node地址转发\"></a>node地址转发</h1><blockquote>\n<p>方案一种使用由于请求地址不同源存在跨域问题，因此使用使用node地址进行了一次转发</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">'express-http-proxy'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> proxyUrl = <span class=\"string\">'https://webapps.yongjinbao.com.cn'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> app = express();</div><div class=\"line\">app.use(express.static(__dirname));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/api'</span>, proxy(proxyUrl, &#123; <span class=\"comment\">// 当访问含有/api的地址时做转发处理</span></div><div class=\"line\">  proxyReqPathResolver: <span class=\"function\">(<span class=\"params\">req</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(req.url).path;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;<span class=\"comment\">// 项目启动后加载的页面</span></div><div class=\"line\">  res.sendFile(path.resolve(__dirname, <span class=\"string\">'fund.html'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">8880</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'App is running on port 8880'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"数据逻辑处理（同步以及异步处理）\"><a href=\"#数据逻辑处理（同步以及异步处理）\" class=\"headerlink\" title=\"数据逻辑处理（同步以及异步处理）\"></a>数据逻辑处理（同步以及异步处理）</h1><blockquote>\n<p>方案二，由于客户端不能对接口进行转发，数据仅存在服务器的静态文件中，使用了一种类似于jsonp的请求方式，但不是jsonp,即在静态文件中将所有的数据放在一个变量中。前端通过动态的add <code>&lt;script&gt;</code>标签的方式获取在静态文件中定义的变量取值。<br>数据分四次获取，每个文件50条，滚动分页的方式加载数据，每次加载10条<br>实现思路<br>将异步和同步数据的处理逻辑分开写。可能遇到的滚动时获取异步数据时可能取不到，需要添加一个flag标志，当数据获取以后再去做数据渲染</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 动态加载script</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url,callback</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">  script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">  script.async = <span class=\"string\">'async'</span>;</div><div class=\"line\">  script.src = url;</div><div class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">  script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    callback();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 分情况加载数据</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNews</span>(<span class=\"params\">news_page_num, page_num, isGetScript</span>) </span>&#123;</div><div class=\"line\">  newsLoading = <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> newsData = [];</div><div class=\"line\">  <span class=\"keyword\">if</span> (isGetScript) &#123;</div><div class=\"line\">    loadScript(<span class=\"string\">'https://devtest.yjbtest.com/gjzqwxtest3g/information/data/newsData'</span>+news_page_num+<span class=\"string\">'.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      newsLoading = <span class=\"literal\">true</span>;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (news_page_num) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData1;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData2;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData3;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData0;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      renderNews(newsData.slice(<span class=\"number\">0</span>,<span class=\"number\">10</span>));</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    newsLoading = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = [];</div><div class=\"line\">    <span class=\"keyword\">switch</span> (news_page_num) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData1;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData2;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData3;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData0;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (page_num%<span class=\"number\">5</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">        data = newsData.slice(<span class=\"number\">10</span>,<span class=\"number\">20</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">        data = newsData.slice(<span class=\"number\">20</span>,<span class=\"number\">30</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">        data = newsData.slice(<span class=\"number\">30</span>,<span class=\"number\">40</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">        data = newsData.slice(<span class=\"number\">40</span>,<span class=\"number\">50</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    renderNews(data);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"无限滚动\"><a href=\"#无限滚动\" class=\"headerlink\" title=\"无限滚动\"></a>无限滚动</h1><blockquote>\n<p>监听window的scroll事件，在页面的底部放一个loading的div，当滚动事件触发的时候判断loading div据顶部高度是否小于当前文档的高度，如果小于那么loading div就已经展示在页面中了，那么去进行数据获取<br>防止数据请求过于频繁添加了一个定时器<br>在页面数据加载完成的时候移除滚动事件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, scrollLoad, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scrollLoad</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (scrollTimer) &#123;</div><div class=\"line\">    setTimeout(scrollTimer);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  scrollTimer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> loadingDom = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.scroll-stance-element'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> loadingDomTop = loadingDom.getBoundingClientRect().top;</div><div class=\"line\">    <span class=\"keyword\">var</span> windowHeight = <span class=\"built_in\">window</span>.innerHeight;</div><div class=\"line\">    <span class=\"keyword\">if</span> (loadingDomTop &amp;&amp; loadingDomTop &lt; windowHeight) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(<span class=\"string\">'.new-con-tpl .block'</span>).length &lt; <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!newsLoading) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pageNum%<span class=\"number\">5</span> == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          newsPageNum++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        pageNum++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pageNum%<span class=\"number\">5</span> == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          getNews(newsPageNum, pageNum, <span class=\"literal\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          getNews(newsPageNum, pageNum);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        $(<span class=\"string\">'.scroll-stance-element'</span>).addClass(<span class=\"string\">'hidden'</span>);</div><div class=\"line\">        $(<span class=\"string\">'.new-nomore'</span>).removeClass(<span class=\"string\">'hidden'</span>);</div><div class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>, scrollLoad, <span class=\"literal\">false</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, <span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"根据屏幕宽度对字符串动态进行截取\"><a href=\"#根据屏幕宽度对字符串动态进行截取\" class=\"headerlink\" title=\"根据屏幕宽度对字符串动态进行截取\"></a>根据屏幕宽度对字符串动态进行截取</h1><blockquote>\n<p>截取字符串<br>计算文档的宽度<br>获取当前的字号<br>计算当前可以容纳的字数</p>\n</blockquote>\n<h1 id=\"进入其他项目咨询页面配置页面路由\"><a href=\"#进入其他项目咨询页面配置页面路由\" class=\"headerlink\" title=\"进入其他项目咨询页面配置页面路由\"></a>进入其他项目咨询页面配置页面路由</h1><blockquote>\n<p>由于需要跳转至另一个framework7项目中，因此配置了相关的进入页面的路由</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取url里的信息</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryValue</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> r = <span class=\"built_in\">window</span>.location.search.substr(<span class=\"number\">1</span>).match(reg);</div><div class=\"line\">  <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>)<span class=\"keyword\">return</span> <span class=\"built_in\">unescape</span>(r[<span class=\"number\">2</span>]);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"jsonp和直接引入静态js文件-理解jsonp\"><a href=\"#jsonp和直接引入静态js文件-理解jsonp\" class=\"headerlink\" title=\"jsonp和直接引入静态js文件(理解jsonp)\"></a>jsonp和直接引入静态js文件(理解jsonp)</h1><p>本次中由于只有静态文件，本次以引入文件的方式，在文件加载完成的时候获取约定的变量的方式获取和引入本地文件一样的道理<br>比较通俗易懂的方式理解jsonp: <a href=\"http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html</a></p>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><p>文档加载的两个函数<code>DOMContentLoaded</code>， <code>load</code></p>\n<blockquote>\n<p>在chrome network面板中可以很清新的看到<code>DOMContentLoaded</code>页面基本结构加载完成后显示完成时间。和jquery中的$(function(){})一致<br>当初始HTML文档已完全加载和解析时，将触发DOMContentLoaded事件，而无需等待样式表，图像和子框架完成加载。——MDN<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// ...代码...</span></div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">// DOMContentLoaded</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...代码...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>load</code>页面完全加载显示完成时间</p>\n<blockquote>\n<p>当一个资源及其依赖资源已完成加载时，将触发load事件。 ——MDN</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...代码...</span></div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">$(<span class=\"built_in\">document</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...代码...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"node地址转发\"><a href=\"#node地址转发\" class=\"headerlink\" title=\"node地址转发\"></a>node地址转发</h1><blockquote>\n<p>方案一种使用由于请求地址不同源存在跨域问题，因此使用使用node地址进行了一次转发</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> proxy = <span class=\"built_in\">require</span>(<span class=\"string\">'express-http-proxy'</span>);</div><div class=\"line\"><span class=\"keyword\">const</span> proxyUrl = <span class=\"string\">'https://webapps.yongjinbao.com.cn'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> app = express();</div><div class=\"line\">app.use(express.static(__dirname));</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/api'</span>, proxy(proxyUrl, &#123; <span class=\"comment\">// 当访问含有/api的地址时做转发处理</span></div><div class=\"line\">  proxyReqPathResolver: <span class=\"function\">(<span class=\"params\">req</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(req.url).path;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;));</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'*'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>)</span>&#123;<span class=\"comment\">// 项目启动后加载的页面</span></div><div class=\"line\">  res.sendFile(path.resolve(__dirname, <span class=\"string\">'fund.html'</span>));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">8880</span>, () =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'App is running on port 8880'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"数据逻辑处理（同步以及异步处理）\"><a href=\"#数据逻辑处理（同步以及异步处理）\" class=\"headerlink\" title=\"数据逻辑处理（同步以及异步处理）\"></a>数据逻辑处理（同步以及异步处理）</h1><blockquote>\n<p>方案二，由于客户端不能对接口进行转发，数据仅存在服务器的静态文件中，使用了一种类似于jsonp的请求方式，但不是jsonp,即在静态文件中将所有的数据放在一个变量中。前端通过动态的add <code>&lt;script&gt;</code>标签的方式获取在静态文件中定义的变量取值。<br>数据分四次获取，每个文件50条，滚动分页的方式加载数据，每次加载10条<br>实现思路<br>将异步和同步数据的处理逻辑分开写。可能遇到的滚动时获取异步数据时可能取不到，需要添加一个flag标志，当数据获取以后再去做数据渲染</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 动态加载script</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">url,callback</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>);</div><div class=\"line\">  script.type = <span class=\"string\">'text/javascript'</span>;</div><div class=\"line\">  script.async = <span class=\"string\">'async'</span>;</div><div class=\"line\">  script.src = url;</div><div class=\"line\">  <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">  script.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    callback();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 分情况加载数据</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNews</span>(<span class=\"params\">news_page_num, page_num, isGetScript</span>) </span>&#123;</div><div class=\"line\">  newsLoading = <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">var</span> newsData = [];</div><div class=\"line\">  <span class=\"keyword\">if</span> (isGetScript) &#123;</div><div class=\"line\">    loadScript(<span class=\"string\">'https://devtest.yjbtest.com/gjzqwxtest3g/information/data/newsData'</span>+news_page_num+<span class=\"string\">'.json'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      newsLoading = <span class=\"literal\">true</span>;</div><div class=\"line\">      <span class=\"keyword\">switch</span> (news_page_num) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData1;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData2;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData3;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">          newsData = <span class=\"built_in\">window</span>.newsData0;</div><div class=\"line\">          <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      renderNews(newsData.slice(<span class=\"number\">0</span>,<span class=\"number\">10</span>));</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    newsLoading = <span class=\"literal\">true</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = [];</div><div class=\"line\">    <span class=\"keyword\">switch</span> (news_page_num) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData1;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData2;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData3;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">default</span>:</div><div class=\"line\">        newsData = <span class=\"built_in\">window</span>.newsData0;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">switch</span> (page_num%<span class=\"number\">5</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">        data = newsData.slice(<span class=\"number\">10</span>,<span class=\"number\">20</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">        data = newsData.slice(<span class=\"number\">20</span>,<span class=\"number\">30</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</div><div class=\"line\">        data = newsData.slice(<span class=\"number\">30</span>,<span class=\"number\">40</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">      <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">        data = newsData.slice(<span class=\"number\">40</span>,<span class=\"number\">50</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    renderNews(data);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"无限滚动\"><a href=\"#无限滚动\" class=\"headerlink\" title=\"无限滚动\"></a>无限滚动</h1><blockquote>\n<p>监听window的scroll事件，在页面的底部放一个loading的div，当滚动事件触发的时候判断loading div据顶部高度是否小于当前文档的高度，如果小于那么loading div就已经展示在页面中了，那么去进行数据获取<br>防止数据请求过于频繁添加了一个定时器<br>在页面数据加载完成的时候移除滚动事件</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'scroll'</span>, scrollLoad, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scrollLoad</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (scrollTimer) &#123;</div><div class=\"line\">    setTimeout(scrollTimer);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  scrollTimer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> loadingDom = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.scroll-stance-element'</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> loadingDomTop = loadingDom.getBoundingClientRect().top;</div><div class=\"line\">    <span class=\"keyword\">var</span> windowHeight = <span class=\"built_in\">window</span>.innerHeight;</div><div class=\"line\">    <span class=\"keyword\">if</span> (loadingDomTop &amp;&amp; loadingDomTop &lt; windowHeight) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> ($(<span class=\"string\">'.new-con-tpl .block'</span>).length &lt; <span class=\"number\">200</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!newsLoading) &#123;</div><div class=\"line\">          <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pageNum%<span class=\"number\">5</span> == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          newsPageNum++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        pageNum++;</div><div class=\"line\">        <span class=\"keyword\">if</span> (pageNum%<span class=\"number\">5</span> == <span class=\"number\">1</span>) &#123;</div><div class=\"line\">          getNews(newsPageNum, pageNum, <span class=\"literal\">true</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">          getNews(newsPageNum, pageNum);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        $(<span class=\"string\">'.scroll-stance-element'</span>).addClass(<span class=\"string\">'hidden'</span>);</div><div class=\"line\">        $(<span class=\"string\">'.new-nomore'</span>).removeClass(<span class=\"string\">'hidden'</span>);</div><div class=\"line\">        <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'scroll'</span>, scrollLoad, <span class=\"literal\">false</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;, <span class=\"number\">100</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"根据屏幕宽度对字符串动态进行截取\"><a href=\"#根据屏幕宽度对字符串动态进行截取\" class=\"headerlink\" title=\"根据屏幕宽度对字符串动态进行截取\"></a>根据屏幕宽度对字符串动态进行截取</h1><blockquote>\n<p>截取字符串<br>计算文档的宽度<br>获取当前的字号<br>计算当前可以容纳的字数</p>\n</blockquote>\n<h1 id=\"进入其他项目咨询页面配置页面路由\"><a href=\"#进入其他项目咨询页面配置页面路由\" class=\"headerlink\" title=\"进入其他项目咨询页面配置页面路由\"></a>进入其他项目咨询页面配置页面路由</h1><blockquote>\n<p>由于需要跳转至另一个framework7项目中，因此配置了相关的进入页面的路由</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 获取url里的信息</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getQueryValue</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(^|&amp;)\"</span> + name + <span class=\"string\">\"=([^&amp;]*)(&amp;|$)\"</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> r = <span class=\"built_in\">window</span>.location.search.substr(<span class=\"number\">1</span>).match(reg);</div><div class=\"line\">  <span class=\"keyword\">if</span> (r != <span class=\"literal\">null</span>)<span class=\"keyword\">return</span> <span class=\"built_in\">unescape</span>(r[<span class=\"number\">2</span>]);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"jsonp和直接引入静态js文件-理解jsonp\"><a href=\"#jsonp和直接引入静态js文件-理解jsonp\" class=\"headerlink\" title=\"jsonp和直接引入静态js文件(理解jsonp)\"></a>jsonp和直接引入静态js文件(理解jsonp)</h1><p>本次中由于只有静态文件，本次以引入文件的方式，在文件加载完成的时候获取约定的变量的方式获取和引入本地文件一样的道理<br>比较通俗易懂的方式理解jsonp: <a href=\"http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html</a></p>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><p>文档加载的两个函数<code>DOMContentLoaded</code>， <code>load</code></p>\n<blockquote>\n<p>在chrome network面板中可以很清新的看到<code>DOMContentLoaded</code>页面基本结构加载完成后显示完成时间。和jquery中的$(function(){})一致<br>当初始HTML文档已完全加载和解析时，将触发DOMContentLoaded事件，而无需等待样式表，图像和子框架完成加载。——MDN<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded\" target=\"_blank\" rel=\"external\">https://developer.mozilla.org/zh-CN/docs/Web/Events/DOMContentLoaded</a></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.addEventListener(<span class=\"string\">\"DOMContentLoaded\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// ...代码...</span></div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div><div class=\"line\"><span class=\"comment\">// DOMContentLoaded</span></div><div class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...代码...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>load</code>页面完全加载显示完成时间</p>\n<blockquote>\n<p>当一个资源及其依赖资源已完成加载时，将触发load事件。 ——MDN</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...代码...</span></div><div class=\"line\">&#125;, <span class=\"literal\">false</span>);</div><div class=\"line\">$(<span class=\"built_in\">document</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// ...代码...</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n"},{"title":"原型，原型链笔记","date":"2017-06-30T07:43:40.000Z","_content":"\n![](/img/javascript 原型及原型链.png)\n  `了解原型，原型链需要了解 原型对象 构造函数 实例三者之间的关系`\n\n  ### `原型` \n  >每个对象(Person)都会有一个原型对象，对象的实例(p1)包含一个隐式的指针指向原型对象\n  p1.__propo__  ===     Person.prototype  \n\n  ### `原型链`  \n  >如图所示 存在一个对象Student，想拥有Person的一些属性和方法，那么Student.proportype = new Person();那么new Student（）的实例就会存在Student 存在一个隐士指针指向Student的原型对象，而Student的原型指向了person的原型，由于所有自定义对象都是从Object对象继承来的，那么person的原型有指向了Object的原型\n\n  ### 总结（摘自红宝书，第6章）\n  1 原型链之间为引用关系，因此对象实例共享所有的属性和方法，在原型链中的引用类型，因此不适宜单独使用，解决这个问题是利用构造函数，在子类构造函数的内部调用超类的构造函数(Person.call(this, name,,))，这样可以做到每个实例都具有自己的属性，同时还能保证只是用构造函数模式来定义类型。 \n  2 对象可以在编码执行过程中创建和增强，因此具有动态性而非严格定义的实体。\n  ```javascript\n    function object(o) {\n      function f() {};\n      f.prototype = o;\n      return new f();\n    }\n\n    function inher(sub,sup){\n      var prototype = object(sup.prototype); // 创建对象\n      prototype.constructor = sub; // 增强对象\n      sub.prototype = prototype; // 指定对象\n    }\n\n    function sup(name) {\n      this.name = name;\n      this.color = ['blue','red']\n    }\n    sup.prototype.sayName = function() {\n      console.log(this.name)\n    }\n\n    function sub(name,age) {\n      sup.call(this, name);\n      this.age = age;\n    }    \n\n    inher(sub,sup);\n\n    sub.prototype.sayAge = function() {\n      console.log(this.age);\n    }\n\n    var s1 = new sub()\n  ```\n\n### 其它\n一个不错的在线编辑绘制图片工具：[processon](http://processon.com/)\n在问答网站回答问题可以促使去各处查资料，优化表达，学习更全面的知识","source":"_posts/原型，原型链笔记.md","raw":"---\ntitle: 原型，原型链笔记\ndate: 2017-06-30 15:43:40\ncategories: js\ntags: js基础\n---\n\n![](/img/javascript 原型及原型链.png)\n  `了解原型，原型链需要了解 原型对象 构造函数 实例三者之间的关系`\n\n  ### `原型` \n  >每个对象(Person)都会有一个原型对象，对象的实例(p1)包含一个隐式的指针指向原型对象\n  p1.__propo__  ===     Person.prototype  \n\n  ### `原型链`  \n  >如图所示 存在一个对象Student，想拥有Person的一些属性和方法，那么Student.proportype = new Person();那么new Student（）的实例就会存在Student 存在一个隐士指针指向Student的原型对象，而Student的原型指向了person的原型，由于所有自定义对象都是从Object对象继承来的，那么person的原型有指向了Object的原型\n\n  ### 总结（摘自红宝书，第6章）\n  1 原型链之间为引用关系，因此对象实例共享所有的属性和方法，在原型链中的引用类型，因此不适宜单独使用，解决这个问题是利用构造函数，在子类构造函数的内部调用超类的构造函数(Person.call(this, name,,))，这样可以做到每个实例都具有自己的属性，同时还能保证只是用构造函数模式来定义类型。 \n  2 对象可以在编码执行过程中创建和增强，因此具有动态性而非严格定义的实体。\n  ```javascript\n    function object(o) {\n      function f() {};\n      f.prototype = o;\n      return new f();\n    }\n\n    function inher(sub,sup){\n      var prototype = object(sup.prototype); // 创建对象\n      prototype.constructor = sub; // 增强对象\n      sub.prototype = prototype; // 指定对象\n    }\n\n    function sup(name) {\n      this.name = name;\n      this.color = ['blue','red']\n    }\n    sup.prototype.sayName = function() {\n      console.log(this.name)\n    }\n\n    function sub(name,age) {\n      sup.call(this, name);\n      this.age = age;\n    }    \n\n    inher(sub,sup);\n\n    sub.prototype.sayAge = function() {\n      console.log(this.age);\n    }\n\n    var s1 = new sub()\n  ```\n\n### 其它\n一个不错的在线编辑绘制图片工具：[processon](http://processon.com/)\n在问答网站回答问题可以促使去各处查资料，优化表达，学习更全面的知识","slug":"原型，原型链笔记","published":1,"updated":"2017-07-01T01:32:39.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk4y000vjsvc6o67stdf","content":"<p><img src=\"/img/javascript 原型及原型链.png\" alt=\"\"><br>  <code>了解原型，原型链需要了解 原型对象 构造函数 实例三者之间的关系</code></p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a><code>原型</code></h3><blockquote>\n<p>每个对象(Person)都会有一个原型对象，对象的实例(p1)包含一个隐式的指针指向原型对象<br>  p1.<strong>propo</strong>  ===     Person.prototype  </p>\n</blockquote>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a><code>原型链</code></h3><blockquote>\n<p>如图所示 存在一个对象Student，想拥有Person的一些属性和方法，那么Student.proportype = new Person();那么new Student（）的实例就会存在Student 存在一个隐士指针指向Student的原型对象，而Student的原型指向了person的原型，由于所有自定义对象都是从Object对象继承来的，那么person的原型有指向了Object的原型</p>\n</blockquote>\n<h3 id=\"总结（摘自红宝书，第6章）\"><a href=\"#总结（摘自红宝书，第6章）\" class=\"headerlink\" title=\"总结（摘自红宝书，第6章）\"></a>总结（摘自红宝书，第6章）</h3><p>  1 原型链之间为引用关系，因此对象实例共享所有的属性和方法，在原型链中的引用类型，因此不适宜单独使用，解决这个问题是利用构造函数，在子类构造函数的内部调用超类的构造函数(Person.call(this, name,,))，这样可以做到每个实例都具有自己的属性，同时还能保证只是用构造函数模式来定义类型。<br>  2 对象可以在编码执行过程中创建和增强，因此具有动态性而非严格定义的实体。<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">  f.prototype = o;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> f();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inher</span>(<span class=\"params\">sub,sup</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> prototype = object(sup.prototype); <span class=\"comment\">// 创建对象</span></div><div class=\"line\">  prototype.constructor = sub; <span class=\"comment\">// 增强对象</span></div><div class=\"line\">  sub.prototype = prototype; <span class=\"comment\">// 指定对象</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sup</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  <span class=\"keyword\">this</span>.color = [<span class=\"string\">'blue'</span>,<span class=\"string\">'red'</span>]</div><div class=\"line\">&#125;</div><div class=\"line\">sup.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sub</span>(<span class=\"params\">name,age</span>) </span>&#123;</div><div class=\"line\">  sup.call(<span class=\"keyword\">this</span>, name);</div><div class=\"line\">  <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;    </div><div class=\"line\"></div><div class=\"line\">inher(sub,sup);</div><div class=\"line\"></div><div class=\"line\">sub.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> sub()</div></pre></td></tr></table></figure></p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>一个不错的在线编辑绘制图片工具：<a href=\"http://processon.com/\" target=\"_blank\" rel=\"external\">processon</a><br>在问答网站回答问题可以促使去各处查资料，优化表达，学习更全面的知识</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/img/javascript 原型及原型链.png\" alt=\"\"><br>  <code>了解原型，原型链需要了解 原型对象 构造函数 实例三者之间的关系</code></p>\n<h3 id=\"原型\"><a href=\"#原型\" class=\"headerlink\" title=\"原型\"></a><code>原型</code></h3><blockquote>\n<p>每个对象(Person)都会有一个原型对象，对象的实例(p1)包含一个隐式的指针指向原型对象<br>  p1.<strong>propo</strong>  ===     Person.prototype  </p>\n</blockquote>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a><code>原型链</code></h3><blockquote>\n<p>如图所示 存在一个对象Student，想拥有Person的一些属性和方法，那么Student.proportype = new Person();那么new Student（）的实例就会存在Student 存在一个隐士指针指向Student的原型对象，而Student的原型指向了person的原型，由于所有自定义对象都是从Object对象继承来的，那么person的原型有指向了Object的原型</p>\n</blockquote>\n<h3 id=\"总结（摘自红宝书，第6章）\"><a href=\"#总结（摘自红宝书，第6章）\" class=\"headerlink\" title=\"总结（摘自红宝书，第6章）\"></a>总结（摘自红宝书，第6章）</h3><p>  1 原型链之间为引用关系，因此对象实例共享所有的属性和方法，在原型链中的引用类型，因此不适宜单独使用，解决这个问题是利用构造函数，在子类构造函数的内部调用超类的构造函数(Person.call(this, name,,))，这样可以做到每个实例都具有自己的属性，同时还能保证只是用构造函数模式来定义类型。<br>  2 对象可以在编码执行过程中创建和增强，因此具有动态性而非严格定义的实体。<br>  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">  f.prototype = o;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> f();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inher</span>(<span class=\"params\">sub,sup</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> prototype = object(sup.prototype); <span class=\"comment\">// 创建对象</span></div><div class=\"line\">  prototype.constructor = sub; <span class=\"comment\">// 增强对象</span></div><div class=\"line\">  sub.prototype = prototype; <span class=\"comment\">// 指定对象</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sup</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  <span class=\"keyword\">this</span>.color = [<span class=\"string\">'blue'</span>,<span class=\"string\">'red'</span>]</div><div class=\"line\">&#125;</div><div class=\"line\">sup.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sub</span>(<span class=\"params\">name,age</span>) </span>&#123;</div><div class=\"line\">  sup.call(<span class=\"keyword\">this</span>, name);</div><div class=\"line\">  <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;    </div><div class=\"line\"></div><div class=\"line\">inher(sub,sup);</div><div class=\"line\"></div><div class=\"line\">sub.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> sub()</div></pre></td></tr></table></figure></p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>一个不错的在线编辑绘制图片工具：<a href=\"http://processon.com/\" target=\"_blank\" rel=\"external\">processon</a><br>在问答网站回答问题可以促使去各处查资料，优化表达，学习更全面的知识</p>\n"},{"title":"实现列表标题标题头第一列最后一列固定","date":"2017-05-24T05:20:33.000Z","_content":"\n# 实现列表标题标题头第一列最后一列固定\n>实现思路：\n创建三个div，布局为左中右，其中每个div中设置为上下结构（上为列表的表头，下为数据部分）\n左右：{overflow：hide, 宽度：固定值， 高度：根绝文档设置高度} \n中间：{overflow：auto, 宽度：文档宽度-左右宽度， 高度：根绝文档设置高度}\njs代码处理：\n上下滚动，左右的div scrollTop和当前滚动的divscrollTop, 左右滚动同理\n\n### 代码：\n#### html\n```html\n<script type=\"text/template7\" id=\"container-fluid-tpl\">\n  <div class=\"left_div\">\n    <div class=\"left_div1\">\n      <table class=\"left_table1\">\n        <tr>\n          <th>基金名称</th>\n        </tr>\n      </table>\n    </div>\n    <div class=\"left_div2\">\n      <table class=\"left_table2\">\n        {{#each dataLeft}}\n          <tr>\n            <th>\n              <div class=\"name {{font}}\">{{name}}</div>\n              <div class=\"code\">{{code}}</div>\n            </th>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n  <div class=\"data_div\">\n    <div class=\"data_div1\">\n      <div class=\"data_divx\">\n        <table class=\"data_table1\">\n          <tr>\n            <th>认/申购费率</th>\n            <th class=\"active\">日涨幅<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近1周<i class=\"iconfont icon-arrow-down2\"></i></th>\n            <th>近1月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近3月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近6月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>今年以来<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近一年<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近三年<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>成立以来<i class=\"iconfont icon-arrow-up2\"></i></th>\n          </tr>\n        </table>\n      </div>\n    </div>\n    <div class=\"data_div2\">\n      <table class=\"data_table2\">\n        {{#each dataCenter}}\n          <tr>\n            <td>\n              <div class=\"{{center1.status11}}\">{{center1.center11}}</div>\n              <div class=\"{{center1.status12}}\">{{center1.center12}}</div>\n            </td>\n            <td class=\"{{center2.status}}\">{{center2.center2}}</td>\n            <td>{{center3}}</td>\n            <td>{{center4}}</td>\n            <td>{{center5}}</td>\n            <td>{{center6}}</td>\n            <td>{{center7}}</td>\n            <td>{{center8}}</td>\n            <td>{{center9}}</td>\n            <td>{{center10}}</td>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n  <div class=\"right_div\">\n    <div class=\"right_div1\">\n      <table class=\"right_table1\">\n        <tr>\n          <th>操作</th>\n        </tr>\n      </table>\n    </div>\n    <div class=\"right_div2\">\n      <table class=\"right_table2\">\n        {{#each dataRight}}\n          <tr>\n            <th>\n              <div class=\"buy-btn\">{{this}}</div>\n            </th>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n</script>\n```\n#### css\n```css\n  .container-fluid {\n    table {\n      width: 100%;\n      max-width: 100%;\n      margin-bottom: 20px;\n    }\n    .red {\n      color: #ff0000;\n    }\n    .green {\n      color: #1bc01b;\n    }\n    .gray {\n      color: #a3a3a3;\n    }\n    .tlt{\n      color: #a3a3a3;\n      text-decoration: line-through;\n    }\n\n  }\n  .left_table1 th, .data_table1 th, .right_table1 th {\n    font-size: 13px;\n    font-weight: 500;\n    color: #686868;\n    text-align: center;\n    background: #F0F1F3;\n    padding: 7px 0;\n  }\n  .left_table2 th, .data_table2 td, .right_table2 th {\n    word-break: break-all;\n    font-size: 15px;\n    font-weight: 500;\n    text-align: center;\n    background: #fff;\n    border-bottom: 1px solid #efeff4;\n    height: 90px;\n    .fs15 {\n      font-size: 15px;\n    } \n    .fs13 {\n      font-size: 13px;\n    } \n  }\n  .left_div{\n    width:120px;\n    float: left;\n    .left_div1{\n      width: 100%;\n    }\n    .left_div2{\n      margin-top:-20px;\n      width: 100%;\n      overflow: hidden;\n    }\n    .left_table1 th {\n      text-align: left;\n      padding-left: 16px;\n    }\n    .left_table2 th {\n      text-align: left;\n      padding-left: 16px;\n      .name {\n        color: #424647;\n      }\n      .code {\n        font-size: 13px;\n        color: #888;\n      }\n    }\n  }\n  \n  .right_div{\n    width:80px;\n    float: left;\n    .right_div1{\n      width: 100%;\n    }\n    .right_div2{\n      margin-top:-20px;\n      width: 100%;\n      // height: 72vh;\n      overflow: hidden;\n    }\n    .right_table2 .buy-btn{\n      font-size: 14px;\n      color: #fff;\n      background: #e15b54;\n      display: inline-block;\n      width: 60px;\n      height: 24px;\n      line-height: 24px;\n      border-radius: 2px;\n    }\n  }\n\n  .data_div{\n    float: left;\n    .data_div1{\n      width: 100%;\n      overflow: auto;\n    }\n    .data_divx{\n        width: 900px;\n    }\n    .data_div2{\n      margin-top:-20px;\n      width:100%;\n      // height:72vh;\n      overflow: auto;\n      -webkit-overflow-scrolling: auto; \n      // -webkit-overflow-scrolling: touch;\n    }\n    .data_table1{\n      width: 880px;\n      .iconfont {\n        font-size: 12px;\n      }\n      th.active{\n        color: #e15b54;\n      }\n    }\n    .data_table2{\n      /**width和max-width一起写，手机浏览器打开也能固定长度**/\n        width: 880px;\n        max-width: 880px;\n        white-space:nowrap;\n    }\n    .data_table1 th{\n      width:10%;\n    }\n    .data_table2 td{\n      width:10%;\n    }\n  }\n```\n#### js\n```javascript\nfunction createTab(selector, data) {\n  var template = $$('#container-fluid-tpl').html();\n  var complieTemplate = Template7.compile(template);\n  var renderTemplate = complieTemplate(data);\n  $$(selector+' .container-fluid').html(renderTemplate);\n\n  var right_div2 = document.querySelector(selector+' .data_div2');\n  var data_div1 = document.querySelector(selector+' .data_div1');\n  right_div2.onscroll = function(){\n      var right_div2_top = this.scrollTop;\n      var right_div2_left = this.scrollLeft;\n      document.querySelector(selector+' .left_div2').scrollTop = right_div2_top;\n      document.querySelector(selector+' .right_div2').scrollTop = right_div2_top;\n      document.querySelector(selector+' .data_div1').scrollLeft = right_div2_left;\n  }\n  data_div1.onscroll = function(){\n      var data_div1_left = this.scrollLeft;\n      document.querySelector(selector+' .data_div2').scrollLeft = data_div1_left;\n  }\n  //设置右边div宽度\n  var tabHeight = $$('body').height()-$$('.navbar').height()-$$('.tab-nav').height()-$$(selector+' .data_divx').height()\n  document.querySelector(selector+' .data_div').style.width=\"\"+$$('body').width()-200+\"px\";  \n  document.querySelector(selector+' .left_div2').style.height=tabHeight+\"px\";  \n  document.querySelector(selector+' .data_div2').style.height=tabHeight+\"px\";  \n  document.querySelector(selector+' .right_div2').style.height=tabHeight+\"px\";  \n}\n```\n#### 问题&总结\n###### 1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\n  -webkit-overflow-scrolling: auto; // 橡皮条效果，滚动速度较慢\n  -webkit-overflow-scrolling: touch; // 默认效果\n###### 2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\n###### 3 元素距离[参考图片](http://blog.csdn.net/xxb2008/article/details/9109329)\n  offset-\n    offsetWidth(包含padding、border、不包含margin)\n    offsetHeight(同上)\n    offsetLeft(返回元素的x坐标，相对于offsetParent；如果offsetParent为null,则返回对应的文档坐标)\n    offsetTop(同上,返回元素的y坐标)\n    offsetParent(返回最近的包含该元素的定位元素)\n\n  client-\n    clientWidth(不包含border、margin、滚动条)\n    clientHeight(同上)\n    clientLeft(相当于border-left-width,属性设置元素的左边框的宽度。)\n    clientTop(相当于border-top-width)\n\n  scroll-\n    scrollWidth(不包含border、margin，返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth。)\n    scroHeight(同上)\n    scrollLeft(可读写，获取或设置元素滚动条的位置)\n    scrollTop(同上)\n\n","source":"_posts/实现列表标题标题头第一列最后一列固定.md","raw":"---\ntitle: 实现列表标题标题头第一列最后一列固定\ndate: 2017-05-24 13:20:33\ncategories: css\ntags: 布局\n---\n\n# 实现列表标题标题头第一列最后一列固定\n>实现思路：\n创建三个div，布局为左中右，其中每个div中设置为上下结构（上为列表的表头，下为数据部分）\n左右：{overflow：hide, 宽度：固定值， 高度：根绝文档设置高度} \n中间：{overflow：auto, 宽度：文档宽度-左右宽度， 高度：根绝文档设置高度}\njs代码处理：\n上下滚动，左右的div scrollTop和当前滚动的divscrollTop, 左右滚动同理\n\n### 代码：\n#### html\n```html\n<script type=\"text/template7\" id=\"container-fluid-tpl\">\n  <div class=\"left_div\">\n    <div class=\"left_div1\">\n      <table class=\"left_table1\">\n        <tr>\n          <th>基金名称</th>\n        </tr>\n      </table>\n    </div>\n    <div class=\"left_div2\">\n      <table class=\"left_table2\">\n        {{#each dataLeft}}\n          <tr>\n            <th>\n              <div class=\"name {{font}}\">{{name}}</div>\n              <div class=\"code\">{{code}}</div>\n            </th>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n  <div class=\"data_div\">\n    <div class=\"data_div1\">\n      <div class=\"data_divx\">\n        <table class=\"data_table1\">\n          <tr>\n            <th>认/申购费率</th>\n            <th class=\"active\">日涨幅<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近1周<i class=\"iconfont icon-arrow-down2\"></i></th>\n            <th>近1月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近3月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近6月<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>今年以来<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近一年<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>近三年<i class=\"iconfont icon-arrow-up2\"></i></th>\n            <th>成立以来<i class=\"iconfont icon-arrow-up2\"></i></th>\n          </tr>\n        </table>\n      </div>\n    </div>\n    <div class=\"data_div2\">\n      <table class=\"data_table2\">\n        {{#each dataCenter}}\n          <tr>\n            <td>\n              <div class=\"{{center1.status11}}\">{{center1.center11}}</div>\n              <div class=\"{{center1.status12}}\">{{center1.center12}}</div>\n            </td>\n            <td class=\"{{center2.status}}\">{{center2.center2}}</td>\n            <td>{{center3}}</td>\n            <td>{{center4}}</td>\n            <td>{{center5}}</td>\n            <td>{{center6}}</td>\n            <td>{{center7}}</td>\n            <td>{{center8}}</td>\n            <td>{{center9}}</td>\n            <td>{{center10}}</td>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n  <div class=\"right_div\">\n    <div class=\"right_div1\">\n      <table class=\"right_table1\">\n        <tr>\n          <th>操作</th>\n        </tr>\n      </table>\n    </div>\n    <div class=\"right_div2\">\n      <table class=\"right_table2\">\n        {{#each dataRight}}\n          <tr>\n            <th>\n              <div class=\"buy-btn\">{{this}}</div>\n            </th>\n          </tr>\n        {{/each}}\n      </table>\n    </div>\n  </div>\n</script>\n```\n#### css\n```css\n  .container-fluid {\n    table {\n      width: 100%;\n      max-width: 100%;\n      margin-bottom: 20px;\n    }\n    .red {\n      color: #ff0000;\n    }\n    .green {\n      color: #1bc01b;\n    }\n    .gray {\n      color: #a3a3a3;\n    }\n    .tlt{\n      color: #a3a3a3;\n      text-decoration: line-through;\n    }\n\n  }\n  .left_table1 th, .data_table1 th, .right_table1 th {\n    font-size: 13px;\n    font-weight: 500;\n    color: #686868;\n    text-align: center;\n    background: #F0F1F3;\n    padding: 7px 0;\n  }\n  .left_table2 th, .data_table2 td, .right_table2 th {\n    word-break: break-all;\n    font-size: 15px;\n    font-weight: 500;\n    text-align: center;\n    background: #fff;\n    border-bottom: 1px solid #efeff4;\n    height: 90px;\n    .fs15 {\n      font-size: 15px;\n    } \n    .fs13 {\n      font-size: 13px;\n    } \n  }\n  .left_div{\n    width:120px;\n    float: left;\n    .left_div1{\n      width: 100%;\n    }\n    .left_div2{\n      margin-top:-20px;\n      width: 100%;\n      overflow: hidden;\n    }\n    .left_table1 th {\n      text-align: left;\n      padding-left: 16px;\n    }\n    .left_table2 th {\n      text-align: left;\n      padding-left: 16px;\n      .name {\n        color: #424647;\n      }\n      .code {\n        font-size: 13px;\n        color: #888;\n      }\n    }\n  }\n  \n  .right_div{\n    width:80px;\n    float: left;\n    .right_div1{\n      width: 100%;\n    }\n    .right_div2{\n      margin-top:-20px;\n      width: 100%;\n      // height: 72vh;\n      overflow: hidden;\n    }\n    .right_table2 .buy-btn{\n      font-size: 14px;\n      color: #fff;\n      background: #e15b54;\n      display: inline-block;\n      width: 60px;\n      height: 24px;\n      line-height: 24px;\n      border-radius: 2px;\n    }\n  }\n\n  .data_div{\n    float: left;\n    .data_div1{\n      width: 100%;\n      overflow: auto;\n    }\n    .data_divx{\n        width: 900px;\n    }\n    .data_div2{\n      margin-top:-20px;\n      width:100%;\n      // height:72vh;\n      overflow: auto;\n      -webkit-overflow-scrolling: auto; \n      // -webkit-overflow-scrolling: touch;\n    }\n    .data_table1{\n      width: 880px;\n      .iconfont {\n        font-size: 12px;\n      }\n      th.active{\n        color: #e15b54;\n      }\n    }\n    .data_table2{\n      /**width和max-width一起写，手机浏览器打开也能固定长度**/\n        width: 880px;\n        max-width: 880px;\n        white-space:nowrap;\n    }\n    .data_table1 th{\n      width:10%;\n    }\n    .data_table2 td{\n      width:10%;\n    }\n  }\n```\n#### js\n```javascript\nfunction createTab(selector, data) {\n  var template = $$('#container-fluid-tpl').html();\n  var complieTemplate = Template7.compile(template);\n  var renderTemplate = complieTemplate(data);\n  $$(selector+' .container-fluid').html(renderTemplate);\n\n  var right_div2 = document.querySelector(selector+' .data_div2');\n  var data_div1 = document.querySelector(selector+' .data_div1');\n  right_div2.onscroll = function(){\n      var right_div2_top = this.scrollTop;\n      var right_div2_left = this.scrollLeft;\n      document.querySelector(selector+' .left_div2').scrollTop = right_div2_top;\n      document.querySelector(selector+' .right_div2').scrollTop = right_div2_top;\n      document.querySelector(selector+' .data_div1').scrollLeft = right_div2_left;\n  }\n  data_div1.onscroll = function(){\n      var data_div1_left = this.scrollLeft;\n      document.querySelector(selector+' .data_div2').scrollLeft = data_div1_left;\n  }\n  //设置右边div宽度\n  var tabHeight = $$('body').height()-$$('.navbar').height()-$$('.tab-nav').height()-$$(selector+' .data_divx').height()\n  document.querySelector(selector+' .data_div').style.width=\"\"+$$('body').width()-200+\"px\";  \n  document.querySelector(selector+' .left_div2').style.height=tabHeight+\"px\";  \n  document.querySelector(selector+' .data_div2').style.height=tabHeight+\"px\";  \n  document.querySelector(selector+' .right_div2').style.height=tabHeight+\"px\";  \n}\n```\n#### 问题&总结\n###### 1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\n  -webkit-overflow-scrolling: auto; // 橡皮条效果，滚动速度较慢\n  -webkit-overflow-scrolling: touch; // 默认效果\n###### 2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\n###### 3 元素距离[参考图片](http://blog.csdn.net/xxb2008/article/details/9109329)\n  offset-\n    offsetWidth(包含padding、border、不包含margin)\n    offsetHeight(同上)\n    offsetLeft(返回元素的x坐标，相对于offsetParent；如果offsetParent为null,则返回对应的文档坐标)\n    offsetTop(同上,返回元素的y坐标)\n    offsetParent(返回最近的包含该元素的定位元素)\n\n  client-\n    clientWidth(不包含border、margin、滚动条)\n    clientHeight(同上)\n    clientLeft(相当于border-left-width,属性设置元素的左边框的宽度。)\n    clientTop(相当于border-top-width)\n\n  scroll-\n    scrollWidth(不包含border、margin，返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth。)\n    scroHeight(同上)\n    scrollLeft(可读写，获取或设置元素滚动条的位置)\n    scrollTop(同上)\n\n","slug":"实现列表标题标题头第一列最后一列固定","published":1,"updated":"2017-05-24T06:16:01.610Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk55000yjsvcpd65j4b6","content":"<h1 id=\"实现列表标题标题头第一列最后一列固定\"><a href=\"#实现列表标题标题头第一列最后一列固定\" class=\"headerlink\" title=\"实现列表标题标题头第一列最后一列固定\"></a>实现列表标题标题头第一列最后一列固定</h1><blockquote>\n<p>实现思路：<br>创建三个div，布局为左中右，其中每个div中设置为上下结构（上为列表的表头，下为数据部分）<br>左右：{overflow：hide, 宽度：固定值， 高度：根绝文档设置高度}<br>中间：{overflow：auto, 宽度：文档宽度-左右宽度， 高度：根绝文档设置高度}<br>js代码处理：<br>上下滚动，左右的div scrollTop和当前滚动的divscrollTop, 左右滚动同理</p>\n</blockquote>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><h4 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/template7\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container-fluid-tpl\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div1\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_table1\"</span>&gt;</span></div><div class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>基金名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div2\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_table2\"</span>&gt;</span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataLeft&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"name &#123;&#123;font&#125;&#125;\"</span>&gt;&#123;&#123;name&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"code\"</span>&gt;&#123;&#123;code&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div1\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_divx\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">        &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_table1\"</span>&gt;</span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>认/申购费率<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"active\"</span>&gt;日涨幅&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">1</span>周&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-down2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">1</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">3</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">6</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;今年以来&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近一年&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近三年&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;成立以来&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div2\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_table2\"</span>&gt;</span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataCenter&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center1.status11&#125;&#125;\"</span>&gt;&#123;&#123;center1.center11&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center1.status12&#125;&#125;\"</span>&gt;&#123;&#123;center1.center12&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;td <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center2.status&#125;&#125;\"</span>&gt;&#123;&#123;center2.center2&#125;&#125;&lt;<span class=\"regexp\">/td&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center3&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center4&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center5&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center6&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center7&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center8&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center9&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center10&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div1\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_table1\"</span>&gt;</span></div><div class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div2\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_table2\"</span>&gt;</span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataRight&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"buy-btn\"</span>&gt;&#123;&#123;<span class=\"keyword\">this</span>&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container-fluid</span> &#123;</div><div class=\"line\">  table &#123;</div><div class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</div><div class=\"line\">    <span class=\"selector-tag\">max-width</span>: 100%;</div><div class=\"line\">    <span class=\"selector-tag\">margin-bottom</span>: 20<span class=\"selector-tag\">px</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.red</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ff0000</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.green</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#1bc01b</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.gray</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#a3a3a3</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.tlt</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#a3a3a3</span>;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: line-through;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.left_table1</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.data_table1</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.right_table1</span> <span class=\"selector-tag\">th</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#686868</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F0F1F3</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">7px</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.left_table2</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.data_table2</span> <span class=\"selector-tag\">td</span>, <span class=\"selector-class\">.right_table2</span> <span class=\"selector-tag\">th</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#efeff4</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</div><div class=\"line\">  .fs15 &#123;</div><div class=\"line\">    <span class=\"selector-tag\">font-size</span>: 15<span class=\"selector-tag\">px</span>;</div><div class=\"line\">  &#125; </div><div class=\"line\">  <span class=\"selector-class\">.fs13</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.left_div</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">120px</span>;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  .left_div1&#123;</div><div class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.left_div2</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.left_table1</span> <span class=\"selector-tag\">th</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: left;</div><div class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">16px</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.left_table2</span> <span class=\"selector-tag\">th</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: left;</div><div class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">16px</span>;</div><div class=\"line\">    .name &#123;</div><div class=\"line\">      <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#424647</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-class\">.code</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.right_div</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">80px</span>;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  .right_div1&#123;</div><div class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.right_div2</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    // height: 72vh;</div><div class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.right_table2</span> <span class=\"selector-class\">.buy-btn</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#e15b54</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.data_div</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  .data_div1&#123;</div><div class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</div><div class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">auto</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_divx</span>&#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">900px</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_div2</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</div><div class=\"line\">    // height:72vh;</div><div class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">auto</span>;</div><div class=\"line\">    <span class=\"selector-tag\">-webkit-overflow-scrolling</span>: <span class=\"selector-tag\">auto</span>; </div><div class=\"line\">    // -webkit-overflow-scrolling: touch;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_table1</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">880px</span>;</div><div class=\"line\">    .iconfont &#123;</div><div class=\"line\">      <span class=\"selector-tag\">font-size</span>: 12<span class=\"selector-tag\">px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">th</span><span class=\"selector-class\">.active</span>&#123;</div><div class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#e15b54</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_table2</span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**width和max-width一起写，手机浏览器打开也能固定长度**/</span></div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">880px</span>;</div><div class=\"line\">      <span class=\"attribute\">max-width</span>: <span class=\"number\">880px</span>;</div><div class=\"line\">      <span class=\"attribute\">white-space</span>:nowrap;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_table1</span> <span class=\"selector-tag\">th</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">10%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_table2</span> <span class=\"selector-tag\">td</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">10%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTab</span>(<span class=\"params\">selector, data</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> template = $$(<span class=\"string\">'#container-fluid-tpl'</span>).html();</div><div class=\"line\">  <span class=\"keyword\">var</span> complieTemplate = Template7.compile(template);</div><div class=\"line\">  <span class=\"keyword\">var</span> renderTemplate = complieTemplate(data);</div><div class=\"line\">  $$(selector+<span class=\"string\">' .container-fluid'</span>).html(renderTemplate);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> right_div2 = <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> data_div1 = <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div1'</span>);</div><div class=\"line\">  right_div2.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> right_div2_top = <span class=\"keyword\">this</span>.scrollTop;</div><div class=\"line\">      <span class=\"keyword\">var</span> right_div2_left = <span class=\"keyword\">this</span>.scrollLeft;</div><div class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .left_div2'</span>).scrollTop = right_div2_top;</div><div class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .right_div2'</span>).scrollTop = right_div2_top;</div><div class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div1'</span>).scrollLeft = right_div2_left;</div><div class=\"line\">  &#125;</div><div class=\"line\">  data_div1.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> data_div1_left = <span class=\"keyword\">this</span>.scrollLeft;</div><div class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>).scrollLeft = data_div1_left;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//设置右边div宽度</span></div><div class=\"line\">  <span class=\"keyword\">var</span> tabHeight = $$(<span class=\"string\">'body'</span>).height()-$$(<span class=\"string\">'.navbar'</span>).height()-$$(<span class=\"string\">'.tab-nav'</span>).height()-$$(selector+<span class=\"string\">' .data_divx'</span>).height()</div><div class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div'</span>).style.width=<span class=\"string\">\"\"</span>+$$(<span class=\"string\">'body'</span>).width()<span class=\"number\">-200</span>+<span class=\"string\">\"px\"</span>;  </div><div class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .left_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </div><div class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </div><div class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .right_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"问题-amp-总结\"><a href=\"#问题-amp-总结\" class=\"headerlink\" title=\"问题&amp;总结\"></a>问题&amp;总结</h4><h6 id=\"1-苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\"><a href=\"#1-苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\" class=\"headerlink\" title=\"1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\"></a>1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置</h6><p>  -webkit-overflow-scrolling: auto; // 橡皮条效果，滚动速度较慢<br>  -webkit-overflow-scrolling: touch; // 默认效果</p>\n<h6 id=\"2-横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\"><a href=\"#2-横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\" class=\"headerlink\" title=\"2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\"></a>2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。</h6><h6 id=\"3-元素距离参考图片\"><a href=\"#3-元素距离参考图片\" class=\"headerlink\" title=\"3 元素距离参考图片\"></a>3 元素距离<a href=\"http://blog.csdn.net/xxb2008/article/details/9109329\" target=\"_blank\" rel=\"external\">参考图片</a></h6><p>  offset-<br>    offsetWidth(包含padding、border、不包含margin)<br>    offsetHeight(同上)<br>    offsetLeft(返回元素的x坐标，相对于offsetParent；如果offsetParent为null,则返回对应的文档坐标)<br>    offsetTop(同上,返回元素的y坐标)<br>    offsetParent(返回最近的包含该元素的定位元素)</p>\n<p>  client-<br>    clientWidth(不包含border、margin、滚动条)<br>    clientHeight(同上)<br>    clientLeft(相当于border-left-width,属性设置元素的左边框的宽度。)<br>    clientTop(相当于border-top-width)</p>\n<p>  scroll-<br>    scrollWidth(不包含border、margin，返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth。)<br>    scroHeight(同上)<br>    scrollLeft(可读写，获取或设置元素滚动条的位置)<br>    scrollTop(同上)</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"实现列表标题标题头第一列最后一列固定\"><a href=\"#实现列表标题标题头第一列最后一列固定\" class=\"headerlink\" title=\"实现列表标题标题头第一列最后一列固定\"></a>实现列表标题标题头第一列最后一列固定</h1><blockquote>\n<p>实现思路：<br>创建三个div，布局为左中右，其中每个div中设置为上下结构（上为列表的表头，下为数据部分）<br>左右：{overflow：hide, 宽度：固定值， 高度：根绝文档设置高度}<br>中间：{overflow：auto, 宽度：文档宽度-左右宽度， 高度：根绝文档设置高度}<br>js代码处理：<br>上下滚动，左右的div scrollTop和当前滚动的divscrollTop, 左右滚动同理</p>\n</blockquote>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><h4 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/template7\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container-fluid-tpl\"</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div1\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_table1\"</span>&gt;</span></div><div class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>基金名称<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_div2\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"left_table2\"</span>&gt;</span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataLeft&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"name &#123;&#123;font&#125;&#125;\"</span>&gt;&#123;&#123;name&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"code\"</span>&gt;&#123;&#123;code&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div1\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_divx\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">        &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_table1\"</span>&gt;</span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>认/申购费率<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"active\"</span>&gt;日涨幅&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">1</span>周&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-down2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">1</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">3</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近<span class=\"number\">6</span>月&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;今年以来&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近一年&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;近三年&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;th&gt;成立以来&lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"iconfont icon-arrow-up2\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_div2\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"data_table2\"</span>&gt;</span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataCenter&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center1.status11&#125;&#125;\"</span>&gt;&#123;&#123;center1.center11&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center1.status12&#125;&#125;\"</span>&gt;&#123;&#123;center1.center12&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">            &lt;td <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"&#123;&#123;center2.status&#125;&#125;\"</span>&gt;&#123;&#123;center2.center2&#125;&#125;&lt;<span class=\"regexp\">/td&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center3&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center4&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center5&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center6&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center7&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center8&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center9&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;center10&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div1\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_table1\"</span>&gt;</span></div><div class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>操作<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">    &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_div2\"</span>&gt;</span></div><div class=\"line\"><span class=\"javascript\">      &lt;table <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"right_table2\"</span>&gt;</span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;#each dataRight&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"javascript\">              &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"buy-btn\"</span>&gt;&#123;&#123;<span class=\"keyword\">this</span>&#125;&#125;&lt;<span class=\"regexp\">/div&gt;</span></span></div><div class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span></div><div class=\"line\"><span class=\"undefined\">        &#123;&#123;/each&#125;&#125;</span></div><div class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n<h4 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container-fluid</span> &#123;</div><div class=\"line\">  table &#123;</div><div class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</div><div class=\"line\">    <span class=\"selector-tag\">max-width</span>: 100%;</div><div class=\"line\">    <span class=\"selector-tag\">margin-bottom</span>: 20<span class=\"selector-tag\">px</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.red</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#ff0000</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.green</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#1bc01b</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.gray</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#a3a3a3</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.tlt</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#a3a3a3</span>;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: line-through;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.left_table1</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.data_table1</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.right_table1</span> <span class=\"selector-tag\">th</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#686868</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#F0F1F3</span>;</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">7px</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.left_table2</span> <span class=\"selector-tag\">th</span>, <span class=\"selector-class\">.data_table2</span> <span class=\"selector-tag\">td</span>, <span class=\"selector-class\">.right_table2</span> <span class=\"selector-tag\">th</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">word-break</span>: break-all;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</div><div class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">500</span>;</div><div class=\"line\">  <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#efeff4</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</div><div class=\"line\">  .fs15 &#123;</div><div class=\"line\">    <span class=\"selector-tag\">font-size</span>: 15<span class=\"selector-tag\">px</span>;</div><div class=\"line\">  &#125; </div><div class=\"line\">  <span class=\"selector-class\">.fs13</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">  &#125; </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.left_div</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">120px</span>;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  .left_div1&#123;</div><div class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.left_div2</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.left_table1</span> <span class=\"selector-tag\">th</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: left;</div><div class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">16px</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.left_table2</span> <span class=\"selector-tag\">th</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: left;</div><div class=\"line\">    <span class=\"attribute\">padding-left</span>: <span class=\"number\">16px</span>;</div><div class=\"line\">    .name &#123;</div><div class=\"line\">      <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#424647</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-class\">.code</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#888</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.right_div</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">80px</span>;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  .right_div1&#123;</div><div class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.right_div2</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    // height: 72vh;</div><div class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.right_table2</span> <span class=\"selector-class\">.buy-btn</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</div><div class=\"line\">    <span class=\"attribute\">background</span>: <span class=\"number\">#e15b54</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: inline-block;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">60px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">24px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">2px</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-class\">.data_div</span>&#123;</div><div class=\"line\">  <span class=\"attribute\">float</span>: left;</div><div class=\"line\">  .data_div1&#123;</div><div class=\"line\">    <span class=\"selector-tag\">width</span>: 100%;</div><div class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">auto</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_divx</span>&#123;</div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">900px</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_div2</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>:-<span class=\"number\">20px</span>;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</div><div class=\"line\">    // height:72vh;</div><div class=\"line\">    <span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">auto</span>;</div><div class=\"line\">    <span class=\"selector-tag\">-webkit-overflow-scrolling</span>: <span class=\"selector-tag\">auto</span>; </div><div class=\"line\">    // -webkit-overflow-scrolling: touch;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_table1</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">880px</span>;</div><div class=\"line\">    .iconfont &#123;</div><div class=\"line\">      <span class=\"selector-tag\">font-size</span>: 12<span class=\"selector-tag\">px</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"selector-tag\">th</span><span class=\"selector-class\">.active</span>&#123;</div><div class=\"line\">      <span class=\"attribute\">color</span>: <span class=\"number\">#e15b54</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_table2</span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**width和max-width一起写，手机浏览器打开也能固定长度**/</span></div><div class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">880px</span>;</div><div class=\"line\">      <span class=\"attribute\">max-width</span>: <span class=\"number\">880px</span>;</div><div class=\"line\">      <span class=\"attribute\">white-space</span>:nowrap;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_table1</span> <span class=\"selector-tag\">th</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">10%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"selector-class\">.data_table2</span> <span class=\"selector-tag\">td</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">10%</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTab</span>(<span class=\"params\">selector, data</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> template = $$(<span class=\"string\">'#container-fluid-tpl'</span>).html();</div><div class=\"line\">  <span class=\"keyword\">var</span> complieTemplate = Template7.compile(template);</div><div class=\"line\">  <span class=\"keyword\">var</span> renderTemplate = complieTemplate(data);</div><div class=\"line\">  $$(selector+<span class=\"string\">' .container-fluid'</span>).html(renderTemplate);</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">var</span> right_div2 = <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>);</div><div class=\"line\">  <span class=\"keyword\">var</span> data_div1 = <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div1'</span>);</div><div class=\"line\">  right_div2.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> right_div2_top = <span class=\"keyword\">this</span>.scrollTop;</div><div class=\"line\">      <span class=\"keyword\">var</span> right_div2_left = <span class=\"keyword\">this</span>.scrollLeft;</div><div class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .left_div2'</span>).scrollTop = right_div2_top;</div><div class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .right_div2'</span>).scrollTop = right_div2_top;</div><div class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div1'</span>).scrollLeft = right_div2_left;</div><div class=\"line\">  &#125;</div><div class=\"line\">  data_div1.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> data_div1_left = <span class=\"keyword\">this</span>.scrollLeft;</div><div class=\"line\">      <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>).scrollLeft = data_div1_left;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">//设置右边div宽度</span></div><div class=\"line\">  <span class=\"keyword\">var</span> tabHeight = $$(<span class=\"string\">'body'</span>).height()-$$(<span class=\"string\">'.navbar'</span>).height()-$$(<span class=\"string\">'.tab-nav'</span>).height()-$$(selector+<span class=\"string\">' .data_divx'</span>).height()</div><div class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div'</span>).style.width=<span class=\"string\">\"\"</span>+$$(<span class=\"string\">'body'</span>).width()<span class=\"number\">-200</span>+<span class=\"string\">\"px\"</span>;  </div><div class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .left_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </div><div class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .data_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </div><div class=\"line\">  <span class=\"built_in\">document</span>.querySelector(selector+<span class=\"string\">' .right_div2'</span>).style.height=tabHeight+<span class=\"string\">\"px\"</span>;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"问题-amp-总结\"><a href=\"#问题-amp-总结\" class=\"headerlink\" title=\"问题&amp;总结\"></a>问题&amp;总结</h4><h6 id=\"1-苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\"><a href=\"#1-苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\" class=\"headerlink\" title=\"1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置\"></a>1 苹果手机出现滚动条时会有橡皮条效果通过-webkit-overflow-scrolling设置</h6><p>  -webkit-overflow-scrolling: auto; // 橡皮条效果，滚动速度较慢<br>  -webkit-overflow-scrolling: touch; // 默认效果</p>\n<h6 id=\"2-横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\"><a href=\"#2-横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\" class=\"headerlink\" title=\"2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。\"></a>2 横向滚动条scroll事件频繁触发，（网页中）页面显示会有些错位。（待优化）。</h6><h6 id=\"3-元素距离参考图片\"><a href=\"#3-元素距离参考图片\" class=\"headerlink\" title=\"3 元素距离参考图片\"></a>3 元素距离<a href=\"http://blog.csdn.net/xxb2008/article/details/9109329\" target=\"_blank\" rel=\"external\">参考图片</a></h6><p>  offset-<br>    offsetWidth(包含padding、border、不包含margin)<br>    offsetHeight(同上)<br>    offsetLeft(返回元素的x坐标，相对于offsetParent；如果offsetParent为null,则返回对应的文档坐标)<br>    offsetTop(同上,返回元素的y坐标)<br>    offsetParent(返回最近的包含该元素的定位元素)</p>\n<p>  client-<br>    clientWidth(不包含border、margin、滚动条)<br>    clientHeight(同上)<br>    clientLeft(相当于border-left-width,属性设置元素的左边框的宽度。)<br>    clientTop(相当于border-top-width)</p>\n<p>  scroll-<br>    scrollWidth(不包含border、margin，返回元素的内容区域宽度或元素的本身的宽度中更大的那个值。若元素的宽度大于其内容的区域（例如，元素存在滚动条时）, scrollWidth的值要大于clientWidth。)<br>    scroHeight(同上)<br>    scrollLeft(可读写，获取或设置元素滚动条的位置)<br>    scrollTop(同上)</p>\n"},{"title":"布局","date":"2017-09-29T06:17:15.000Z","_content":"\n>布局: 元素的摆放方式\ndisplay\nposition\nfloat\nflex\n\n## display 实现同行显示或者换行显示\n\n  block（p, h1, ul, form）\n  和margin: 0 auto 组合使用，居中显示\n\n  inline(span, a, label)\n\n  inline-block(input, textarea, select, button)\n  和inline比起来，内容换行后占据宽度剩下的空间\n  和 vertical-align: middle 实现垂直居中\n\n  none\n  display: none VS visibility: hidden\n  `visibility 元素仅仅是隐藏，占据原来的空间`\n\n## position 定位\ntop, bottom, left, right, z-index\n同时设置top, bottom, left, right会将元素撑开\n\n`z-index 栈`, 因此z-index大的不一定就显示在上面\n\nstatic|relative|absolute|fixed\n### relative\n仍在文档流中\n参照物为元素本身\n\n### absolute\n默认宽度为内容宽度\n脱离文档流\n参照物为第一个定位祖先/视窗（`包含块`/`初始包含块`--padding-edge）\nhttps://segmentfault.com/a/1190000009661604\n\n### fixed\n默认宽度为内容宽度\n脱离文档流\n参照物为视窗\n\nios中会存在一些问题，存在原因？解决方式？\n问题，解决方案\niscroll库引入\n动态改变position的值，改为static\n\n\n## float\nleft right none\n默认宽度为内容宽度\n`半脱离文档流`（对元素，托利文档流，对内容，在文档流）\n会向指定方向一直移动\n\nclear [both|left:right|none|inherit]\n应用于后续元素\n应用块级元素\n`清除浮动的方法`：\n增加空白元素，设置class{display: block; clear: both; }\n在浮动元素的父元素添加clearfix\n.clearfix:after {\n  content: '.';\n  display: block;\n  clear: both;\n  height: 0;\n  overflow: hidden;\n  visibility: hidden;\n}\n\n## flex\nflex-grow: 拉伸\nflex-shrink: 收缩\n\n## 其它\n实现左右布局的方式\nabsolute+margin-left\nfix+margin-left\nfloat\nflex\n\n顶部固定，底部固定布局\nposition: fixed固定，\n使用padding-bottom和padding-top控制上下间距。\n\n走马观花的耕了一遍..感觉没有多少成就感，呜呜 ~~~~(>_<)~~~~ 以后有收获再来升级这篇文章吧..\n","source":"_posts/布局.md","raw":"---\ntitle: 布局\ndate: 2017-09-29 14:17:15\ncategories: css\ntags: 布局\n---\n\n>布局: 元素的摆放方式\ndisplay\nposition\nfloat\nflex\n\n## display 实现同行显示或者换行显示\n\n  block（p, h1, ul, form）\n  和margin: 0 auto 组合使用，居中显示\n\n  inline(span, a, label)\n\n  inline-block(input, textarea, select, button)\n  和inline比起来，内容换行后占据宽度剩下的空间\n  和 vertical-align: middle 实现垂直居中\n\n  none\n  display: none VS visibility: hidden\n  `visibility 元素仅仅是隐藏，占据原来的空间`\n\n## position 定位\ntop, bottom, left, right, z-index\n同时设置top, bottom, left, right会将元素撑开\n\n`z-index 栈`, 因此z-index大的不一定就显示在上面\n\nstatic|relative|absolute|fixed\n### relative\n仍在文档流中\n参照物为元素本身\n\n### absolute\n默认宽度为内容宽度\n脱离文档流\n参照物为第一个定位祖先/视窗（`包含块`/`初始包含块`--padding-edge）\nhttps://segmentfault.com/a/1190000009661604\n\n### fixed\n默认宽度为内容宽度\n脱离文档流\n参照物为视窗\n\nios中会存在一些问题，存在原因？解决方式？\n问题，解决方案\niscroll库引入\n动态改变position的值，改为static\n\n\n## float\nleft right none\n默认宽度为内容宽度\n`半脱离文档流`（对元素，托利文档流，对内容，在文档流）\n会向指定方向一直移动\n\nclear [both|left:right|none|inherit]\n应用于后续元素\n应用块级元素\n`清除浮动的方法`：\n增加空白元素，设置class{display: block; clear: both; }\n在浮动元素的父元素添加clearfix\n.clearfix:after {\n  content: '.';\n  display: block;\n  clear: both;\n  height: 0;\n  overflow: hidden;\n  visibility: hidden;\n}\n\n## flex\nflex-grow: 拉伸\nflex-shrink: 收缩\n\n## 其它\n实现左右布局的方式\nabsolute+margin-left\nfix+margin-left\nfloat\nflex\n\n顶部固定，底部固定布局\nposition: fixed固定，\n使用padding-bottom和padding-top控制上下间距。\n\n走马观花的耕了一遍..感觉没有多少成就感，呜呜 ~~~~(>_<)~~~~ 以后有收获再来升级这篇文章吧..\n","slug":"布局","published":1,"updated":"2017-10-09T08:11:44.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk5c0010jsvcgqnkbs34","content":"<blockquote>\n<p>布局: 元素的摆放方式<br>display<br>position<br>float<br>flex</p>\n</blockquote>\n<h2 id=\"display-实现同行显示或者换行显示\"><a href=\"#display-实现同行显示或者换行显示\" class=\"headerlink\" title=\"display 实现同行显示或者换行显示\"></a>display 实现同行显示或者换行显示</h2><p>  block（p, h1, ul, form）<br>  和margin: 0 auto 组合使用，居中显示</p>\n<p>  inline(span, a, label)</p>\n<p>  inline-block(input, textarea, select, button)<br>  和inline比起来，内容换行后占据宽度剩下的空间<br>  和 vertical-align: middle 实现垂直居中</p>\n<p>  none<br>  display: none VS visibility: hidden<br>  <code>visibility 元素仅仅是隐藏，占据原来的空间</code></p>\n<h2 id=\"position-定位\"><a href=\"#position-定位\" class=\"headerlink\" title=\"position 定位\"></a>position 定位</h2><p>top, bottom, left, right, z-index<br>同时设置top, bottom, left, right会将元素撑开</p>\n<p><code>z-index 栈</code>, 因此z-index大的不一定就显示在上面</p>\n<p>static|relative|absolute|fixed</p>\n<h3 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h3><p>仍在文档流中<br>参照物为元素本身</p>\n<h3 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h3><p>默认宽度为内容宽度<br>脱离文档流<br>参照物为第一个定位祖先/视窗（<code>包含块</code>/<code>初始包含块</code>–padding-edge）<br><a href=\"https://segmentfault.com/a/1190000009661604\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000009661604</a></p>\n<h3 id=\"fixed\"><a href=\"#fixed\" class=\"headerlink\" title=\"fixed\"></a>fixed</h3><p>默认宽度为内容宽度<br>脱离文档流<br>参照物为视窗</p>\n<p>ios中会存在一些问题，存在原因？解决方式？<br>问题，解决方案<br>iscroll库引入<br>动态改变position的值，改为static</p>\n<h2 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h2><p>left right none<br>默认宽度为内容宽度<br><code>半脱离文档流</code>（对元素，托利文档流，对内容，在文档流）<br>会向指定方向一直移动</p>\n<p>clear [both|left:right|none|inherit]<br>应用于后续元素<br>应用块级元素<br><code>清除浮动的方法</code>：<br>增加空白元素，设置class{display: block; clear: both; }<br>在浮动元素的父元素添加clearfix<br>.clearfix:after {<br>  content: ‘.’;<br>  display: block;<br>  clear: both;<br>  height: 0;<br>  overflow: hidden;<br>  visibility: hidden;<br>}</p>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>flex-grow: 拉伸<br>flex-shrink: 收缩</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>实现左右布局的方式<br>absolute+margin-left<br>fix+margin-left<br>float<br>flex</p>\n<p>顶部固定，底部固定布局<br>position: fixed固定，<br>使用padding-bottom和padding-top控制上下间距。</p>\n<p>走马观花的耕了一遍..感觉没有多少成就感，呜呜 <del>~~(&gt;_&lt;)</del>~~ 以后有收获再来升级这篇文章吧..</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>布局: 元素的摆放方式<br>display<br>position<br>float<br>flex</p>\n</blockquote>\n<h2 id=\"display-实现同行显示或者换行显示\"><a href=\"#display-实现同行显示或者换行显示\" class=\"headerlink\" title=\"display 实现同行显示或者换行显示\"></a>display 实现同行显示或者换行显示</h2><p>  block（p, h1, ul, form）<br>  和margin: 0 auto 组合使用，居中显示</p>\n<p>  inline(span, a, label)</p>\n<p>  inline-block(input, textarea, select, button)<br>  和inline比起来，内容换行后占据宽度剩下的空间<br>  和 vertical-align: middle 实现垂直居中</p>\n<p>  none<br>  display: none VS visibility: hidden<br>  <code>visibility 元素仅仅是隐藏，占据原来的空间</code></p>\n<h2 id=\"position-定位\"><a href=\"#position-定位\" class=\"headerlink\" title=\"position 定位\"></a>position 定位</h2><p>top, bottom, left, right, z-index<br>同时设置top, bottom, left, right会将元素撑开</p>\n<p><code>z-index 栈</code>, 因此z-index大的不一定就显示在上面</p>\n<p>static|relative|absolute|fixed</p>\n<h3 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h3><p>仍在文档流中<br>参照物为元素本身</p>\n<h3 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h3><p>默认宽度为内容宽度<br>脱离文档流<br>参照物为第一个定位祖先/视窗（<code>包含块</code>/<code>初始包含块</code>–padding-edge）<br><a href=\"https://segmentfault.com/a/1190000009661604\" target=\"_blank\" rel=\"external\">https://segmentfault.com/a/1190000009661604</a></p>\n<h3 id=\"fixed\"><a href=\"#fixed\" class=\"headerlink\" title=\"fixed\"></a>fixed</h3><p>默认宽度为内容宽度<br>脱离文档流<br>参照物为视窗</p>\n<p>ios中会存在一些问题，存在原因？解决方式？<br>问题，解决方案<br>iscroll库引入<br>动态改变position的值，改为static</p>\n<h2 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h2><p>left right none<br>默认宽度为内容宽度<br><code>半脱离文档流</code>（对元素，托利文档流，对内容，在文档流）<br>会向指定方向一直移动</p>\n<p>clear [both|left:right|none|inherit]<br>应用于后续元素<br>应用块级元素<br><code>清除浮动的方法</code>：<br>增加空白元素，设置class{display: block; clear: both; }<br>在浮动元素的父元素添加clearfix<br>.clearfix:after {<br>  content: ‘.’;<br>  display: block;<br>  clear: both;<br>  height: 0;<br>  overflow: hidden;<br>  visibility: hidden;<br>}</p>\n<h2 id=\"flex\"><a href=\"#flex\" class=\"headerlink\" title=\"flex\"></a>flex</h2><p>flex-grow: 拉伸<br>flex-shrink: 收缩</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>实现左右布局的方式<br>absolute+margin-left<br>fix+margin-left<br>float<br>flex</p>\n<p>顶部固定，底部固定布局<br>position: fixed固定，<br>使用padding-bottom和padding-top控制上下间距。</p>\n<p>走马观花的耕了一遍..感觉没有多少成就感，呜呜 <del>~~(&gt;_&lt;)</del>~~ 以后有收获再来升级这篇文章吧..</p>\n"},{"title":"继承","date":"2017-10-08T00:42:04.000Z","_content":"\n## 原型链\n构造函数，原型对象，实例关系：每个构造函数都有一个原型对象，原型对象对象包含指向构造函数的指针，每个实例都包含指向原型对象的内部指针。当把一个实例赋值给一个原型对象的时候，`原型对象-》实例-》该实例的原型对象`（从而获取该实例的属性方法），原型的查找顺序也是(原型对象-》实例-》该实例的原型对象)从左向右查找的。\n```\nSub.prototype = new sup();\n```\n>1 默认的原型为Object，因此每个对象都会有hasOwnProperty, isPropertyOf, toString等方法\n2 确定原型与实例的关系可以根据 `instanceof` `Person.prototype.isPropertyOf(p1)` 判断\n3 注意定义方法的顺序，给原型添加的方法一定要放在替换原型的语句之后\n4 原型链的问题：和原型一样，引用类型的数据会被所有实例共享。\n\n## 借用构造函数（constructor stealing）\n借用构造函数就是通过call,apply的方式将另一个的构造函数当做自己的函数体\n```\nfunction sup() {}\nfunction sub() {\n  sup.call(this);\n}\n```\n这种方式很少单独使用，无法避免构造函数模式存在的问题\n\n>特点\n可以在子类的`构造函数中`给超类的构造函数传递参数\n\n## 组合继承\n组合继承 = 原型链 + 借用构造函数模式\n```\nfunction sup() {}\nfunction sub() {\n  sup.call(this);\n}\nsub.prototype = new sup();\nsub.prototype.constructor = sub;\n...\n```\n融合了两种模式的优点，是最常用的继承模式\n## 原型式继承\n```\nfunction object(o) { // o必须为一个对象\n  function F() {};\n  F.prototype = o;\n  return new F();\n}\n// es5规范了原型式继承\nObject.create(o);\n```\n## 寄生式继承\n在原型式继承的基础上继续加工的结果\n```\nfunction Test(o) {\n  var clone = object(o);\n  clone.sayHi = function() {}\n  return clone;\n}\n```\n## 寄生组合继承\n在`原型，原型链笔记`文章中有案例\n通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。\n将`sub.prototype = new sup()`替换为了`object(sup.prototype)`,省去了一次构造函数的调用（可是增加了`new F()` ..）\n## 备注\n理解这些概念的时候本身就比较生硬，考虑问题的时候需要过滤掉一些干扰性的元素，考虑要考虑的问题本身。\n","source":"_posts/继承.md","raw":"---\ntitle: 继承\ndate: 2017-10-08 08:42:04\ncategories: js\ntags: js基础\n---\n\n## 原型链\n构造函数，原型对象，实例关系：每个构造函数都有一个原型对象，原型对象对象包含指向构造函数的指针，每个实例都包含指向原型对象的内部指针。当把一个实例赋值给一个原型对象的时候，`原型对象-》实例-》该实例的原型对象`（从而获取该实例的属性方法），原型的查找顺序也是(原型对象-》实例-》该实例的原型对象)从左向右查找的。\n```\nSub.prototype = new sup();\n```\n>1 默认的原型为Object，因此每个对象都会有hasOwnProperty, isPropertyOf, toString等方法\n2 确定原型与实例的关系可以根据 `instanceof` `Person.prototype.isPropertyOf(p1)` 判断\n3 注意定义方法的顺序，给原型添加的方法一定要放在替换原型的语句之后\n4 原型链的问题：和原型一样，引用类型的数据会被所有实例共享。\n\n## 借用构造函数（constructor stealing）\n借用构造函数就是通过call,apply的方式将另一个的构造函数当做自己的函数体\n```\nfunction sup() {}\nfunction sub() {\n  sup.call(this);\n}\n```\n这种方式很少单独使用，无法避免构造函数模式存在的问题\n\n>特点\n可以在子类的`构造函数中`给超类的构造函数传递参数\n\n## 组合继承\n组合继承 = 原型链 + 借用构造函数模式\n```\nfunction sup() {}\nfunction sub() {\n  sup.call(this);\n}\nsub.prototype = new sup();\nsub.prototype.constructor = sub;\n...\n```\n融合了两种模式的优点，是最常用的继承模式\n## 原型式继承\n```\nfunction object(o) { // o必须为一个对象\n  function F() {};\n  F.prototype = o;\n  return new F();\n}\n// es5规范了原型式继承\nObject.create(o);\n```\n## 寄生式继承\n在原型式继承的基础上继续加工的结果\n```\nfunction Test(o) {\n  var clone = object(o);\n  clone.sayHi = function() {}\n  return clone;\n}\n```\n## 寄生组合继承\n在`原型，原型链笔记`文章中有案例\n通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。\n将`sub.prototype = new sup()`替换为了`object(sup.prototype)`,省去了一次构造函数的调用（可是增加了`new F()` ..）\n## 备注\n理解这些概念的时候本身就比较生硬，考虑问题的时候需要过滤掉一些干扰性的元素，考虑要考虑的问题本身。\n","slug":"继承","published":1,"updated":"2017-10-11T02:42:28.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk5i0014jsvcqyj6p3hy","content":"<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>构造函数，原型对象，实例关系：每个构造函数都有一个原型对象，原型对象对象包含指向构造函数的指针，每个实例都包含指向原型对象的内部指针。当把一个实例赋值给一个原型对象的时候，<code>原型对象-》实例-》该实例的原型对象</code>（从而获取该实例的属性方法），原型的查找顺序也是(原型对象-》实例-》该实例的原型对象)从左向右查找的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sub.prototype = new sup();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>1 默认的原型为Object，因此每个对象都会有hasOwnProperty, isPropertyOf, toString等方法<br>2 确定原型与实例的关系可以根据 <code>instanceof</code> <code>Person.prototype.isPropertyOf(p1)</code> 判断<br>3 注意定义方法的顺序，给原型添加的方法一定要放在替换原型的语句之后<br>4 原型链的问题：和原型一样，引用类型的数据会被所有实例共享。</p>\n</blockquote>\n<h2 id=\"借用构造函数（constructor-stealing）\"><a href=\"#借用构造函数（constructor-stealing）\" class=\"headerlink\" title=\"借用构造函数（constructor stealing）\"></a>借用构造函数（constructor stealing）</h2><p>借用构造函数就是通过call,apply的方式将另一个的构造函数当做自己的函数体<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function sup() &#123;&#125;</div><div class=\"line\">function sub() &#123;</div><div class=\"line\">  sup.call(this);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种方式很少单独使用，无法避免构造函数模式存在的问题</p>\n<blockquote>\n<p>特点<br>可以在子类的<code>构造函数中</code>给超类的构造函数传递参数</p>\n</blockquote>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><p>组合继承 = 原型链 + 借用构造函数模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function sup() &#123;&#125;</div><div class=\"line\">function sub() &#123;</div><div class=\"line\">  sup.call(this);</div><div class=\"line\">&#125;</div><div class=\"line\">sub.prototype = new sup();</div><div class=\"line\">sub.prototype.constructor = sub;</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>融合了两种模式的优点，是最常用的继承模式</p>\n<h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function object(o) &#123; // o必须为一个对象</div><div class=\"line\">  function F() &#123;&#125;;</div><div class=\"line\">  F.prototype = o;</div><div class=\"line\">  return new F();</div><div class=\"line\">&#125;</div><div class=\"line\">// es5规范了原型式继承</div><div class=\"line\">Object.create(o);</div></pre></td></tr></table></figure>\n<h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><p>在原型式继承的基础上继续加工的结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Test(o) &#123;</div><div class=\"line\">  var clone = object(o);</div><div class=\"line\">  clone.sayHi = function() &#123;&#125;</div><div class=\"line\">  return clone;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h2><p>在<code>原型，原型链笔记</code>文章中有案例<br>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。<br>将<code>sub.prototype = new sup()</code>替换为了<code>object(sup.prototype)</code>,省去了一次构造函数的调用（可是增加了<code>new F()</code> ..）</p>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>理解这些概念的时候本身就比较生硬，考虑问题的时候需要过滤掉一些干扰性的元素，考虑要考虑的问题本身。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h2><p>构造函数，原型对象，实例关系：每个构造函数都有一个原型对象，原型对象对象包含指向构造函数的指针，每个实例都包含指向原型对象的内部指针。当把一个实例赋值给一个原型对象的时候，<code>原型对象-》实例-》该实例的原型对象</code>（从而获取该实例的属性方法），原型的查找顺序也是(原型对象-》实例-》该实例的原型对象)从左向右查找的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Sub.prototype = new sup();</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>1 默认的原型为Object，因此每个对象都会有hasOwnProperty, isPropertyOf, toString等方法<br>2 确定原型与实例的关系可以根据 <code>instanceof</code> <code>Person.prototype.isPropertyOf(p1)</code> 判断<br>3 注意定义方法的顺序，给原型添加的方法一定要放在替换原型的语句之后<br>4 原型链的问题：和原型一样，引用类型的数据会被所有实例共享。</p>\n</blockquote>\n<h2 id=\"借用构造函数（constructor-stealing）\"><a href=\"#借用构造函数（constructor-stealing）\" class=\"headerlink\" title=\"借用构造函数（constructor stealing）\"></a>借用构造函数（constructor stealing）</h2><p>借用构造函数就是通过call,apply的方式将另一个的构造函数当做自己的函数体<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function sup() &#123;&#125;</div><div class=\"line\">function sub() &#123;</div><div class=\"line\">  sup.call(this);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种方式很少单独使用，无法避免构造函数模式存在的问题</p>\n<blockquote>\n<p>特点<br>可以在子类的<code>构造函数中</code>给超类的构造函数传递参数</p>\n</blockquote>\n<h2 id=\"组合继承\"><a href=\"#组合继承\" class=\"headerlink\" title=\"组合继承\"></a>组合继承</h2><p>组合继承 = 原型链 + 借用构造函数模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function sup() &#123;&#125;</div><div class=\"line\">function sub() &#123;</div><div class=\"line\">  sup.call(this);</div><div class=\"line\">&#125;</div><div class=\"line\">sub.prototype = new sup();</div><div class=\"line\">sub.prototype.constructor = sub;</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>融合了两种模式的优点，是最常用的继承模式</p>\n<h2 id=\"原型式继承\"><a href=\"#原型式继承\" class=\"headerlink\" title=\"原型式继承\"></a>原型式继承</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function object(o) &#123; // o必须为一个对象</div><div class=\"line\">  function F() &#123;&#125;;</div><div class=\"line\">  F.prototype = o;</div><div class=\"line\">  return new F();</div><div class=\"line\">&#125;</div><div class=\"line\">// es5规范了原型式继承</div><div class=\"line\">Object.create(o);</div></pre></td></tr></table></figure>\n<h2 id=\"寄生式继承\"><a href=\"#寄生式继承\" class=\"headerlink\" title=\"寄生式继承\"></a>寄生式继承</h2><p>在原型式继承的基础上继续加工的结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Test(o) &#123;</div><div class=\"line\">  var clone = object(o);</div><div class=\"line\">  clone.sayHi = function() &#123;&#125;</div><div class=\"line\">  return clone;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h2><p>在<code>原型，原型链笔记</code>文章中有案例<br>通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。<br>将<code>sub.prototype = new sup()</code>替换为了<code>object(sup.prototype)</code>,省去了一次构造函数的调用（可是增加了<code>new F()</code> ..）</p>\n<h2 id=\"备注\"><a href=\"#备注\" class=\"headerlink\" title=\"备注\"></a>备注</h2><p>理解这些概念的时候本身就比较生硬，考虑问题的时候需要过滤掉一些干扰性的元素，考虑要考虑的问题本身。</p>\n"},{"title":"闭包","date":"2017-10-09T12:11:03.000Z","_content":"\n## 闭包定义\n  有权访问另一个函数作用域的变量的函数\n  闭包不同于一般的函数，它允许立即词法作用域外调用时仍可访问本地变量\n\n  通常这样定义：\n  ```\n  function outerFn() {\n    var a = 30;\n    return function() {\n      return a;\n    }\n  }\n\n  var outer = outerFn();\n  ```\n\n## 闭包表现形式\n  >1 在一个函数中return另一个函数\n  2 定时器，setTimeout，setInterval\n  3 addEventListener\n  4 $.ajax等\n\n  ```\n  // 闭包无处不在，使用闭包的举例,可以比较方便的访问局部变量\n  !function() {\n    var localData = \"localData\";\n    document.addEventListener('click', function() {\n      console.log(localData);\n    });\n  }();\n\n  !function() {\n    var localData = 'localData';\n    var url = 'htp://www.baidu.com';\n    $.ajax({\n      url: url,\n      success: function() {\n        // do something\n        console.log(localData);\n      }\n    });\n  }()\n  ```\n\n## 理解闭包，及闭包带来的问题\n  ```\n  // 示例1\n  function a() {\n    var res = [];\n    for(var i=0; i<10; i++) {\n      res[i] = function() {\n        return i;\n      }\n    }\n    return res;\n  }\n  a()      // 一个包括10个函数引用的数组\n  a()[0]() // 10\n  a()[1]() // 10\n\n  // 示例2\n  for(var i = 0; i < 10; i++) {\n      setTimeout(function() {\n          console.log(i);  // 10\n      }, 1000);\n  }\n\n  // 示例3\n  function b(){\n    document.body.innerHTML = '<div id=div1>aaa</div> <div id=div2>bbb</div> <div id=div3>ccc</div>';\n    for(var i=1; i<4; i++) {\n      document.getElementById('div'+i).addEventListener('click', function() {\n        alert(i);\n      })\n    }\n  }\n  ```\n  >上面的三种都为闭包的表现形式，他们有共同的特点。都是分两步执行的，1 执行外部函数（或语句），2 执行闭包内函数。\n  第一个函数执行a(),返回一个数组，数组元素为一个个的函数引用，当执行a()[0],此时for循环已经执行完毕了，因此结果为10\n  第二个语句内部为定时器，定时器本身就是异步的，for循环先执行，当定时器函数执行的时候i已经为10了。\n  第三个函数内部为事件绑定，当只有触发click时间的时候才去打印i,此时的i已经是for循环最终执行的值了。\n\n  解决这些问题的方法：可以在闭包函数外层包一层立即执行函数，并给立即执行函数添加形参。\n  ```\n  function fn2(){\n    document.body.innerHTML = '<div id=div1>aaa</div> <div id=div2>bbb</div> <div id=div3>ccc</div>';\n    for(var i=1; i<4; i++) {\n      !function(mun) {\n        document.getElementById('div'+mun).addEventListener('click', function() {\n          alert(mun);\n        })\n      }(i);\n    }\n  }\n  ```\n\n## 使用闭包封装代码\n  ```\n  (function() {\n    var _userId = 23554;\n    var _typeId = 'item';\n    var exportTest = {};\n\n    function converter(userId) {\n      return +userId;\n    }\n\n    exportTest.getUserId = function() {\n      return converter(_userId);\n    }\n\n    exportTest.getTypeId = function() {\n      return _typeId;\n    }\n    window.exportTest = exportTest;\n  }());\n\n  exportTest.getUserId();\n  exportTest.getTypeId();\n  ```\n\n## 释放引用对象，来释放空间\n  由于闭包会保持对外部函数的引用，会一直占用空间，造成内存泄漏\n  ```\n  function a() {\n    var b = 1;\n    return function() {\n      console.log(b++)\n    }\n  }\n  ```\n  var c = a();\n  c()// 1,第二次执行打印2,依次加一,,\n  c = null; // 解除对匿名函数的引用，这样对变量b的引用就会结束\n\n## 其它\n  使用作用域链去解释闭包。（闭包活动对象-》函数活动对象-》全局变量对象）\n","source":"_posts/闭包.md","raw":"---\ntitle: 闭包\ndate: 2017-10-09 20:11:03\ncategories: js\ntags: js基础\n---\n\n## 闭包定义\n  有权访问另一个函数作用域的变量的函数\n  闭包不同于一般的函数，它允许立即词法作用域外调用时仍可访问本地变量\n\n  通常这样定义：\n  ```\n  function outerFn() {\n    var a = 30;\n    return function() {\n      return a;\n    }\n  }\n\n  var outer = outerFn();\n  ```\n\n## 闭包表现形式\n  >1 在一个函数中return另一个函数\n  2 定时器，setTimeout，setInterval\n  3 addEventListener\n  4 $.ajax等\n\n  ```\n  // 闭包无处不在，使用闭包的举例,可以比较方便的访问局部变量\n  !function() {\n    var localData = \"localData\";\n    document.addEventListener('click', function() {\n      console.log(localData);\n    });\n  }();\n\n  !function() {\n    var localData = 'localData';\n    var url = 'htp://www.baidu.com';\n    $.ajax({\n      url: url,\n      success: function() {\n        // do something\n        console.log(localData);\n      }\n    });\n  }()\n  ```\n\n## 理解闭包，及闭包带来的问题\n  ```\n  // 示例1\n  function a() {\n    var res = [];\n    for(var i=0; i<10; i++) {\n      res[i] = function() {\n        return i;\n      }\n    }\n    return res;\n  }\n  a()      // 一个包括10个函数引用的数组\n  a()[0]() // 10\n  a()[1]() // 10\n\n  // 示例2\n  for(var i = 0; i < 10; i++) {\n      setTimeout(function() {\n          console.log(i);  // 10\n      }, 1000);\n  }\n\n  // 示例3\n  function b(){\n    document.body.innerHTML = '<div id=div1>aaa</div> <div id=div2>bbb</div> <div id=div3>ccc</div>';\n    for(var i=1; i<4; i++) {\n      document.getElementById('div'+i).addEventListener('click', function() {\n        alert(i);\n      })\n    }\n  }\n  ```\n  >上面的三种都为闭包的表现形式，他们有共同的特点。都是分两步执行的，1 执行外部函数（或语句），2 执行闭包内函数。\n  第一个函数执行a(),返回一个数组，数组元素为一个个的函数引用，当执行a()[0],此时for循环已经执行完毕了，因此结果为10\n  第二个语句内部为定时器，定时器本身就是异步的，for循环先执行，当定时器函数执行的时候i已经为10了。\n  第三个函数内部为事件绑定，当只有触发click时间的时候才去打印i,此时的i已经是for循环最终执行的值了。\n\n  解决这些问题的方法：可以在闭包函数外层包一层立即执行函数，并给立即执行函数添加形参。\n  ```\n  function fn2(){\n    document.body.innerHTML = '<div id=div1>aaa</div> <div id=div2>bbb</div> <div id=div3>ccc</div>';\n    for(var i=1; i<4; i++) {\n      !function(mun) {\n        document.getElementById('div'+mun).addEventListener('click', function() {\n          alert(mun);\n        })\n      }(i);\n    }\n  }\n  ```\n\n## 使用闭包封装代码\n  ```\n  (function() {\n    var _userId = 23554;\n    var _typeId = 'item';\n    var exportTest = {};\n\n    function converter(userId) {\n      return +userId;\n    }\n\n    exportTest.getUserId = function() {\n      return converter(_userId);\n    }\n\n    exportTest.getTypeId = function() {\n      return _typeId;\n    }\n    window.exportTest = exportTest;\n  }());\n\n  exportTest.getUserId();\n  exportTest.getTypeId();\n  ```\n\n## 释放引用对象，来释放空间\n  由于闭包会保持对外部函数的引用，会一直占用空间，造成内存泄漏\n  ```\n  function a() {\n    var b = 1;\n    return function() {\n      console.log(b++)\n    }\n  }\n  ```\n  var c = a();\n  c()// 1,第二次执行打印2,依次加一,,\n  c = null; // 解除对匿名函数的引用，这样对变量b的引用就会结束\n\n## 其它\n  使用作用域链去解释闭包。（闭包活动对象-》函数活动对象-》全局变量对象）\n","slug":"闭包","published":1,"updated":"2017-10-10T05:46:57.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjauztk5m0016jsvcxvnwfy1q","content":"<h2 id=\"闭包定义\"><a href=\"#闭包定义\" class=\"headerlink\" title=\"闭包定义\"></a>闭包定义</h2><p>  有权访问另一个函数作用域的变量的函数<br>  闭包不同于一般的函数，它允许立即词法作用域外调用时仍可访问本地变量</p>\n<p>  通常这样定义：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function outerFn() &#123;</div><div class=\"line\">  var a = 30;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    return a;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var outer = outerFn();</div></pre></td></tr></table></figure></p>\n<h2 id=\"闭包表现形式\"><a href=\"#闭包表现形式\" class=\"headerlink\" title=\"闭包表现形式\"></a>闭包表现形式</h2><blockquote>\n<p>1 在一个函数中return另一个函数<br>  2 定时器，setTimeout，setInterval<br>  3 addEventListener<br>  4 $.ajax等</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 闭包无处不在，使用闭包的举例,可以比较方便的访问局部变量</div><div class=\"line\">!function() &#123;</div><div class=\"line\">  var localData = &quot;localData&quot;;</div><div class=\"line\">  document.addEventListener(&apos;click&apos;, function() &#123;</div><div class=\"line\">    console.log(localData);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;();</div><div class=\"line\"></div><div class=\"line\">!function() &#123;</div><div class=\"line\">  var localData = &apos;localData&apos;;</div><div class=\"line\">  var url = &apos;htp://www.baidu.com&apos;;</div><div class=\"line\">  $.ajax(&#123;</div><div class=\"line\">    url: url,</div><div class=\"line\">    success: function() &#123;</div><div class=\"line\">      // do something</div><div class=\"line\">      console.log(localData);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>\n<h2 id=\"理解闭包，及闭包带来的问题\"><a href=\"#理解闭包，及闭包带来的问题\" class=\"headerlink\" title=\"理解闭包，及闭包带来的问题\"></a>理解闭包，及闭包带来的问题</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 示例1</div><div class=\"line\">function a() &#123;</div><div class=\"line\">  var res = [];</div><div class=\"line\">  for(var i=0; i&lt;10; i++) &#123;</div><div class=\"line\">    res[i] = function() &#123;</div><div class=\"line\">      return i;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return res;</div><div class=\"line\">&#125;</div><div class=\"line\">a()      // 一个包括10个函数引用的数组</div><div class=\"line\">a()[0]() // 10</div><div class=\"line\">a()[1]() // 10</div><div class=\"line\"></div><div class=\"line\">// 示例2</div><div class=\"line\">for(var i = 0; i &lt; 10; i++) &#123;</div><div class=\"line\">    setTimeout(function() &#123;</div><div class=\"line\">        console.log(i);  // 10</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 示例3</div><div class=\"line\">function b()&#123;</div><div class=\"line\">  document.body.innerHTML = &apos;&lt;div id=div1&gt;aaa&lt;/div&gt; &lt;div id=div2&gt;bbb&lt;/div&gt; &lt;div id=div3&gt;ccc&lt;/div&gt;&apos;;</div><div class=\"line\">  for(var i=1; i&lt;4; i++) &#123;</div><div class=\"line\">    document.getElementById(&apos;div&apos;+i).addEventListener(&apos;click&apos;, function() &#123;</div><div class=\"line\">      alert(i);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的三种都为闭包的表现形式，他们有共同的特点。都是分两步执行的，1 执行外部函数（或语句），2 执行闭包内函数。<br>  第一个函数执行a(),返回一个数组，数组元素为一个个的函数引用，当执行a()[0],此时for循环已经执行完毕了，因此结果为10<br>  第二个语句内部为定时器，定时器本身就是异步的，for循环先执行，当定时器函数执行的时候i已经为10了。<br>  第三个函数内部为事件绑定，当只有触发click时间的时候才去打印i,此时的i已经是for循环最终执行的值了。</p>\n</blockquote>\n<p>  解决这些问题的方法：可以在闭包函数外层包一层立即执行函数，并给立即执行函数添加形参。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function fn2()&#123;</div><div class=\"line\">  document.body.innerHTML = &apos;&lt;div id=div1&gt;aaa&lt;/div&gt; &lt;div id=div2&gt;bbb&lt;/div&gt; &lt;div id=div3&gt;ccc&lt;/div&gt;&apos;;</div><div class=\"line\">  for(var i=1; i&lt;4; i++) &#123;</div><div class=\"line\">    !function(mun) &#123;</div><div class=\"line\">      document.getElementById(&apos;div&apos;+mun).addEventListener(&apos;click&apos;, function() &#123;</div><div class=\"line\">        alert(mun);</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;(i);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用闭包封装代码\"><a href=\"#使用闭包封装代码\" class=\"headerlink\" title=\"使用闭包封装代码\"></a>使用闭包封装代码</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">  var _userId = 23554;</div><div class=\"line\">  var _typeId = &apos;item&apos;;</div><div class=\"line\">  var exportTest = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  function converter(userId) &#123;</div><div class=\"line\">    return +userId;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  exportTest.getUserId = function() &#123;</div><div class=\"line\">    return converter(_userId);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  exportTest.getTypeId = function() &#123;</div><div class=\"line\">    return _typeId;</div><div class=\"line\">  &#125;</div><div class=\"line\">  window.exportTest = exportTest;</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\">exportTest.getUserId();</div><div class=\"line\">exportTest.getTypeId();</div></pre></td></tr></table></figure>\n<h2 id=\"释放引用对象，来释放空间\"><a href=\"#释放引用对象，来释放空间\" class=\"headerlink\" title=\"释放引用对象，来释放空间\"></a>释放引用对象，来释放空间</h2><p>  由于闭包会保持对外部函数的引用，会一直占用空间，造成内存泄漏<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a() &#123;</div><div class=\"line\">  var b = 1;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    console.log(b++)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  var c = a();<br>  c()// 1,第二次执行打印2,依次加一,,<br>  c = null; // 解除对匿名函数的引用，这样对变量b的引用就会结束</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>  使用作用域链去解释闭包。（闭包活动对象-》函数活动对象-》全局变量对象）</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"闭包定义\"><a href=\"#闭包定义\" class=\"headerlink\" title=\"闭包定义\"></a>闭包定义</h2><p>  有权访问另一个函数作用域的变量的函数<br>  闭包不同于一般的函数，它允许立即词法作用域外调用时仍可访问本地变量</p>\n<p>  通常这样定义：<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function outerFn() &#123;</div><div class=\"line\">  var a = 30;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    return a;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var outer = outerFn();</div></pre></td></tr></table></figure></p>\n<h2 id=\"闭包表现形式\"><a href=\"#闭包表现形式\" class=\"headerlink\" title=\"闭包表现形式\"></a>闭包表现形式</h2><blockquote>\n<p>1 在一个函数中return另一个函数<br>  2 定时器，setTimeout，setInterval<br>  3 addEventListener<br>  4 $.ajax等</p>\n</blockquote>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 闭包无处不在，使用闭包的举例,可以比较方便的访问局部变量</div><div class=\"line\">!function() &#123;</div><div class=\"line\">  var localData = &quot;localData&quot;;</div><div class=\"line\">  document.addEventListener(&apos;click&apos;, function() &#123;</div><div class=\"line\">    console.log(localData);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;();</div><div class=\"line\"></div><div class=\"line\">!function() &#123;</div><div class=\"line\">  var localData = &apos;localData&apos;;</div><div class=\"line\">  var url = &apos;htp://www.baidu.com&apos;;</div><div class=\"line\">  $.ajax(&#123;</div><div class=\"line\">    url: url,</div><div class=\"line\">    success: function() &#123;</div><div class=\"line\">      // do something</div><div class=\"line\">      console.log(localData);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure>\n<h2 id=\"理解闭包，及闭包带来的问题\"><a href=\"#理解闭包，及闭包带来的问题\" class=\"headerlink\" title=\"理解闭包，及闭包带来的问题\"></a>理解闭包，及闭包带来的问题</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 示例1</div><div class=\"line\">function a() &#123;</div><div class=\"line\">  var res = [];</div><div class=\"line\">  for(var i=0; i&lt;10; i++) &#123;</div><div class=\"line\">    res[i] = function() &#123;</div><div class=\"line\">      return i;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return res;</div><div class=\"line\">&#125;</div><div class=\"line\">a()      // 一个包括10个函数引用的数组</div><div class=\"line\">a()[0]() // 10</div><div class=\"line\">a()[1]() // 10</div><div class=\"line\"></div><div class=\"line\">// 示例2</div><div class=\"line\">for(var i = 0; i &lt; 10; i++) &#123;</div><div class=\"line\">    setTimeout(function() &#123;</div><div class=\"line\">        console.log(i);  // 10</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 示例3</div><div class=\"line\">function b()&#123;</div><div class=\"line\">  document.body.innerHTML = &apos;&lt;div id=div1&gt;aaa&lt;/div&gt; &lt;div id=div2&gt;bbb&lt;/div&gt; &lt;div id=div3&gt;ccc&lt;/div&gt;&apos;;</div><div class=\"line\">  for(var i=1; i&lt;4; i++) &#123;</div><div class=\"line\">    document.getElementById(&apos;div&apos;+i).addEventListener(&apos;click&apos;, function() &#123;</div><div class=\"line\">      alert(i);</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>上面的三种都为闭包的表现形式，他们有共同的特点。都是分两步执行的，1 执行外部函数（或语句），2 执行闭包内函数。<br>  第一个函数执行a(),返回一个数组，数组元素为一个个的函数引用，当执行a()[0],此时for循环已经执行完毕了，因此结果为10<br>  第二个语句内部为定时器，定时器本身就是异步的，for循环先执行，当定时器函数执行的时候i已经为10了。<br>  第三个函数内部为事件绑定，当只有触发click时间的时候才去打印i,此时的i已经是for循环最终执行的值了。</p>\n</blockquote>\n<p>  解决这些问题的方法：可以在闭包函数外层包一层立即执行函数，并给立即执行函数添加形参。<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function fn2()&#123;</div><div class=\"line\">  document.body.innerHTML = &apos;&lt;div id=div1&gt;aaa&lt;/div&gt; &lt;div id=div2&gt;bbb&lt;/div&gt; &lt;div id=div3&gt;ccc&lt;/div&gt;&apos;;</div><div class=\"line\">  for(var i=1; i&lt;4; i++) &#123;</div><div class=\"line\">    !function(mun) &#123;</div><div class=\"line\">      document.getElementById(&apos;div&apos;+mun).addEventListener(&apos;click&apos;, function() &#123;</div><div class=\"line\">        alert(mun);</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;(i);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用闭包封装代码\"><a href=\"#使用闭包封装代码\" class=\"headerlink\" title=\"使用闭包封装代码\"></a>使用闭包封装代码</h2>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function() &#123;</div><div class=\"line\">  var _userId = 23554;</div><div class=\"line\">  var _typeId = &apos;item&apos;;</div><div class=\"line\">  var exportTest = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  function converter(userId) &#123;</div><div class=\"line\">    return +userId;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  exportTest.getUserId = function() &#123;</div><div class=\"line\">    return converter(_userId);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  exportTest.getTypeId = function() &#123;</div><div class=\"line\">    return _typeId;</div><div class=\"line\">  &#125;</div><div class=\"line\">  window.exportTest = exportTest;</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\">exportTest.getUserId();</div><div class=\"line\">exportTest.getTypeId();</div></pre></td></tr></table></figure>\n<h2 id=\"释放引用对象，来释放空间\"><a href=\"#释放引用对象，来释放空间\" class=\"headerlink\" title=\"释放引用对象，来释放空间\"></a>释放引用对象，来释放空间</h2><p>  由于闭包会保持对外部函数的引用，会一直占用空间，造成内存泄漏<br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function a() &#123;</div><div class=\"line\">  var b = 1;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    console.log(b++)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>  var c = a();<br>  c()// 1,第二次执行打印2,依次加一,,<br>  c = null; // 解除对匿名函数的引用，这样对变量b的引用就会结束</p>\n<h2 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h2><p>  使用作用域链去解释闭包。（闭包活动对象-》函数活动对象-》全局变量对象）</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjauztk200000jsvc0d7sgz9o","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjauztk49000fjsvco8c55ysb"},{"post_id":"cjauztk3i0008jsvc428b2kbe","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjauztk4e000ijsvc2i2fcgfn"},{"post_id":"cjauztk2h0002jsvcs0rleltw","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjauztk4i000ljsvcyy6l99ys"},{"post_id":"cjauztk44000djsvcrff3xxpf","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjauztk4o000pjsvcztl3ugpb"},{"post_id":"cjauztk370006jsvc0l5nxexh","category_id":"cjauztk48000ejsvc5ex123ln","_id":"cjauztk4t000sjsvc36iliupi"},{"post_id":"cjauztk4g000kjsvcxuy6lgmg","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjauztk51000wjsvc6h9w6gmc"},{"post_id":"cjauztk4m000ojsvcj62uidza","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjauztk5a000zjsvc9qvmkcg8"},{"post_id":"cjauztk3d0007jsvcke6o19rl","category_id":"cjauztk4j000mjsvcqvlobhfk","_id":"cjauztk5h0012jsvcdm5kyzp6"},{"post_id":"cjauztk4q000rjsvc0w6besyr","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjauztk5k0015jsvcr353wa0e"},{"post_id":"cjauztk4y000vjsvc6o67stdf","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjauztk5q0017jsvcgwcq3c2n"},{"post_id":"cjauztk4a000hjsvcrq3x9pcf","category_id":"cjauztk4u000tjsvchges355y","_id":"cjauztk5s001ajsvc0ocd594r"},{"post_id":"cjauztk55000yjsvcpd65j4b6","category_id":"cjauztk4j000mjsvcqvlobhfk","_id":"cjauztk5v001cjsvc9ekjf9hz"},{"post_id":"cjauztk5c0010jsvcgqnkbs34","category_id":"cjauztk4j000mjsvcqvlobhfk","_id":"cjauztk5x001fjsvc25q7b7fs"},{"post_id":"cjauztk5i0014jsvcqyj6p3hy","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjauztk5y001hjsvco79ey9ew"},{"post_id":"cjauztk5m0016jsvcxvnwfy1q","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjauztk5z001jjsvc4bu00d99"},{"post_id":"cjauztk40000cjsvcy0j0qo8t","category_id":"cjauztk2s0004jsvc47wlaib3","_id":"cjavs1x310001l0vcxmh76rze"}],"PostTag":[{"post_id":"cjauztk200000jsvc0d7sgz9o","tag_id":"cjauztk360005jsvc4t0hcr3z","_id":"cjauztk3z000bjsvc5pybsrc4"},{"post_id":"cjauztk2h0002jsvcs0rleltw","tag_id":"cjauztk3v000ajsvcy0hhx2qy","_id":"cjauztk4e000jjsvcaadau7z3"},{"post_id":"cjauztk370006jsvc0l5nxexh","tag_id":"cjauztk49000gjsvcn8dhqy87","_id":"cjauztk4p000qjsvc3qdvok8l"},{"post_id":"cjauztk3d0007jsvcke6o19rl","tag_id":"cjauztk4k000njsvcsmc6h7po","_id":"cjauztk51000xjsvcsj29wxz2"},{"post_id":"cjauztk3i0008jsvc428b2kbe","tag_id":"cjauztk4v000ujsvcbqov5a0l","_id":"cjauztk5i0013jsvceo6l61ot"},{"post_id":"cjauztk5i0014jsvcqyj6p3hy","tag_id":"cjauztk5f0011jsvcbisma0tx","_id":"cjauztk5r0019jsvcu6pni8xw"},{"post_id":"cjauztk44000djsvcrff3xxpf","tag_id":"cjauztk5f0011jsvcbisma0tx","_id":"cjauztk5t001bjsvcb6pfzy15"},{"post_id":"cjauztk5m0016jsvcxvnwfy1q","tag_id":"cjauztk5f0011jsvcbisma0tx","_id":"cjauztk5w001ejsvc1ydwm8s0"},{"post_id":"cjauztk4a000hjsvcrq3x9pcf","tag_id":"cjauztk5q0018jsvcjfr65ovs","_id":"cjauztk5x001gjsvc4fcc5w2g"},{"post_id":"cjauztk4g000kjsvcxuy6lgmg","tag_id":"cjauztk5f0011jsvcbisma0tx","_id":"cjauztk5z001kjsvcfymiyoic"},{"post_id":"cjauztk4m000ojsvcj62uidza","tag_id":"cjauztk5f0011jsvcbisma0tx","_id":"cjauztk61001mjsvc2ceptpw4"},{"post_id":"cjauztk4q000rjsvc0w6besyr","tag_id":"cjauztk5q0018jsvcjfr65ovs","_id":"cjauztk64001ojsvcwpmkorox"},{"post_id":"cjauztk4y000vjsvc6o67stdf","tag_id":"cjauztk5f0011jsvcbisma0tx","_id":"cjauztk66001qjsvca6insz1b"},{"post_id":"cjauztk55000yjsvcpd65j4b6","tag_id":"cjauztk65001pjsvcrbhx17bd","_id":"cjauztk67001sjsvc4l9bogzb"},{"post_id":"cjauztk5c0010jsvcgqnkbs34","tag_id":"cjauztk65001pjsvcrbhx17bd","_id":"cjauztk68001tjsvcnnfx8u03"},{"post_id":"cjauztk40000cjsvcy0j0qo8t","tag_id":"cjauztk5f0011jsvcbisma0tx","_id":"cjavs1x310000l0vcvs8e0fnb"}],"Tag":[{"name":"jquery","_id":"cjauztk360005jsvc4t0hcr3z"},{"name":"canvas","_id":"cjauztk3v000ajsvcy0hhx2qy"},{"name":"Hexo","_id":"cjauztk49000gjsvcn8dhqy87"},{"name":"选择器","_id":"cjauztk4k000njsvcsmc6h7po"},{"name":"es6","_id":"cjauztk4v000ujsvcbqov5a0l"},{"name":"js基础","_id":"cjauztk5f0011jsvcbisma0tx"},{"name":"工作总结","_id":"cjauztk5q0018jsvcjfr65ovs"},{"name":"布局","_id":"cjauztk65001pjsvcrbhx17bd"}]}}